
PCA-42.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000079aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000003de  00802000  000079aa  00007a3e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001b5  008023de  008023de  00007e1c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00007e1c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007e78  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003c8  00000000  00000000  00007eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000ebd4  00000000  00000000  00008280  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003b2c  00000000  00000000  00016e54  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004cef  00000000  00000000  0001a980  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000011b4  00000000  00000000  0001f670  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003cb2  00000000  00000000  00020824  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000067c0  00000000  00000000  000244d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003b0  00000000  00000000  0002ac96  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3c 01 	jmp	0x278	; 0x278 <__ctors_end>
       4:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
       8:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
       c:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      10:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      14:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      18:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      1c:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      20:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      24:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      28:	0c 94 e7 1d 	jmp	0x3bce	; 0x3bce <__vector_10>
      2c:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      30:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      34:	0c 94 ee 20 	jmp	0x41dc	; 0x41dc <__vector_13>
      38:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      3c:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      40:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      44:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      48:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      4c:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      50:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      54:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      58:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      5c:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      60:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      64:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      68:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      6c:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      70:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      74:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      78:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      7c:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      80:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      84:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      88:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      8c:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      90:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      94:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      98:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      9c:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      a0:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      a4:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      a8:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      ac:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      b0:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      b4:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      b8:	0c 94 18 21 	jmp	0x4230	; 0x4230 <__vector_46>
      bc:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      c0:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      c4:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      c8:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      cc:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      d0:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      d4:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      d8:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      dc:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      e0:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      e4:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      e8:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      ec:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      f0:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      f4:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      f8:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      fc:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
     100:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
     104:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
     108:	0c 94 70 21 	jmp	0x42e0	; 0x42e0 <__vector_66>
     10c:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
     110:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
     114:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
     118:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
     11c:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
     120:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
     124:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
     128:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
     12c:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
     130:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
     134:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
     138:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
     13c:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
     140:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
     144:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
     148:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
     14c:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
     150:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
     154:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
     158:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
     15c:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
     160:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
     164:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
     168:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
     16c:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
     170:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
     174:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
     178:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
     17c:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
     180:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
     184:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
     188:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
     18c:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
     190:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
     194:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
     198:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
     19c:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
     1a0:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
     1a4:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
     1a8:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
     1ac:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
     1b0:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
     1b4:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
     1b8:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
     1bc:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
     1c0:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
     1c4:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
     1c8:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
     1cc:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
     1d0:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
     1d4:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
     1d8:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
     1dc:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
     1e0:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
     1e4:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
     1e8:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
     1ec:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
     1f0:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
     1f4:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
     1f8:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
     1fc:	2e 0f       	add	r18, r30
     1fe:	72 0e       	add	r7, r18
     200:	bc 0d       	add	r27, r12
     202:	d2 0d       	add	r29, r2
     204:	f4 0d       	add	r31, r4
     206:	0a 0e       	add	r0, r26
     208:	2c 0e       	add	r2, r28
     20a:	43 0e       	add	r4, r19
     20c:	50 0e       	add	r5, r16
     20e:	7f 0e       	add	r7, r31
     210:	91 0e       	add	r9, r17
     212:	a4 0e       	add	r10, r20
     214:	b4 0e       	add	r11, r20
     216:	c9 0e       	add	r12, r25
     218:	d9 0e       	add	r13, r25
     21a:	ee 0e       	add	r14, r30
     21c:	0b 0f       	add	r16, r27
     21e:	08 00       	.word	0x0008	; ????
     220:	00 00       	nop
     222:	be 92       	st	-X, r11
     224:	24 49       	sbci	r18, 0x94	; 148
     226:	12 3e       	cpi	r17, 0xE2	; 226
     228:	ab aa       	std	Y+51, r10	; 0x33
     22a:	aa 2a       	or	r10, r26
     22c:	be cd       	rjmp	.-1156   	; 0xfffffdaa <__eeprom_end+0xff7efdaa>
     22e:	cc cc       	rjmp	.-1640   	; 0xfffffbc8 <__eeprom_end+0xff7efbc8>
     230:	4c 3e       	cpi	r20, 0xEC	; 236
     232:	00 00       	nop
     234:	00 80       	ld	r0, Z
     236:	be ab       	std	Y+54, r27	; 0x36
     238:	aa aa       	std	Y+50, r10	; 0x32
     23a:	aa 3e       	cpi	r26, 0xEA	; 234
     23c:	00 00       	nop
     23e:	00 00       	nop
     240:	bf 00       	.word	0x00bf	; ????
     242:	00 00       	nop
     244:	80 3f       	cpi	r24, 0xF0	; 240
     246:	00 00       	nop
     248:	00 00       	nop
     24a:	00 08       	sbc	r0, r0
     24c:	41 78       	andi	r20, 0x81	; 129
     24e:	d3 bb       	out	0x13, r29	; 19
     250:	43 87       	std	Z+11, r20	; 0x0b
     252:	d1 13       	cpse	r29, r17
     254:	3d 19       	sub	r19, r13
     256:	0e 3c       	cpi	r16, 0xCE	; 206
     258:	c3 bd       	out	0x23, r28	; 35
     25a:	42 82       	std	Z+2, r4	; 0x02
     25c:	ad 2b       	or	r26, r29
     25e:	3e 68       	ori	r19, 0x8E	; 142
     260:	ec 82       	std	Y+4, r14	; 0x04
     262:	76 be       	out	0x36, r7	; 54
     264:	d9 8f       	std	Y+25, r29	; 0x19
     266:	e1 a9       	ldd	r30, Z+49	; 0x31
     268:	3e 4c       	sbci	r19, 0xCE	; 206
     26a:	80 ef       	ldi	r24, 0xF0	; 240
     26c:	ff be       	out	0x3f, r15	; 63
     26e:	01 c4       	rjmp	.+2050   	; 0xa72 <display_digital_reading+0x2e>
     270:	ff 7f       	andi	r31, 0xFF	; 255
     272:	3f 00       	.word	0x003f	; ????
     274:	00 00       	nop
	...

00000278 <__ctors_end>:
     278:	11 24       	eor	r1, r1
     27a:	1f be       	out	0x3f, r1	; 63
     27c:	cf ef       	ldi	r28, 0xFF	; 255
     27e:	cd bf       	out	0x3d, r28	; 61
     280:	df e2       	ldi	r29, 0x2F	; 47
     282:	de bf       	out	0x3e, r29	; 62

00000284 <__do_copy_data>:
     284:	13 e2       	ldi	r17, 0x23	; 35
     286:	a0 e0       	ldi	r26, 0x00	; 0
     288:	b0 e2       	ldi	r27, 0x20	; 32
     28a:	ea ea       	ldi	r30, 0xAA	; 170
     28c:	f9 e7       	ldi	r31, 0x79	; 121
     28e:	02 c0       	rjmp	.+4      	; 0x294 <__do_copy_data+0x10>
     290:	05 90       	lpm	r0, Z+
     292:	0d 92       	st	X+, r0
     294:	ae 3d       	cpi	r26, 0xDE	; 222
     296:	b1 07       	cpc	r27, r17
     298:	d9 f7       	brne	.-10     	; 0x290 <__do_copy_data+0xc>

0000029a <__do_clear_bss>:
     29a:	25 e2       	ldi	r18, 0x25	; 37
     29c:	ae ed       	ldi	r26, 0xDE	; 222
     29e:	b3 e2       	ldi	r27, 0x23	; 35
     2a0:	01 c0       	rjmp	.+2      	; 0x2a4 <.do_clear_bss_start>

000002a2 <.do_clear_bss_loop>:
     2a2:	1d 92       	st	X+, r1

000002a4 <.do_clear_bss_start>:
     2a4:	a3 39       	cpi	r26, 0x93	; 147
     2a6:	b2 07       	cpc	r27, r18
     2a8:	e1 f7       	brne	.-8      	; 0x2a2 <.do_clear_bss_loop>
     2aa:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <main>
     2ae:	0c 94 d3 3c 	jmp	0x79a6	; 0x79a6 <_exit>

000002b2 <__bad_interrupt>:
     2b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002b6 <wr32>:
void draw_simple_rectangle(uint16_t top_left_x, uint16_t top_left_y, uint16_t bottom_right_x, uint16_t bottom_right_y, uint8_t r, uint8_t g, uint8_t b)
{
	cmd( COLOR_RGB(r, g, b) );
	cmd( BEGIN(RECTS) );
	cmd( VERTEX2F(top_left_x * 16,top_left_y * 16) );
	cmd( VERTEX2F(bottom_right_x * 16,bottom_right_y * 16) );
     2b6:	cf 92       	push	r12
     2b8:	df 92       	push	r13
     2ba:	ef 92       	push	r14
     2bc:	ff 92       	push	r15
     2be:	e0 e1       	ldi	r30, 0x10	; 16
     2c0:	e0 93 66 06 	sts	0x0666, r30	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     2c4:	e8 2f       	mov	r30, r24
     2c6:	e0 68       	ori	r30, 0x80	; 128
     2c8:	e0 93 c3 09 	sts	0x09C3, r30	; 0x8009c3 <__TEXT_REGION_LENGTH__+0x7009c3>
     2cc:	e0 91 c2 09 	lds	r30, 0x09C2	; 0x8009c2 <__TEXT_REGION_LENGTH__+0x7009c2>
     2d0:	e7 ff       	sbrs	r30, 7
     2d2:	fc cf       	rjmp	.-8      	; 0x2cc <wr32+0x16>
     2d4:	c7 2e       	mov	r12, r23
     2d6:	d8 2e       	mov	r13, r24
     2d8:	e9 2e       	mov	r14, r25
     2da:	ff 24       	eor	r15, r15
     2dc:	c0 92 c3 09 	sts	0x09C3, r12	; 0x8009c3 <__TEXT_REGION_LENGTH__+0x7009c3>
     2e0:	e0 91 c2 09 	lds	r30, 0x09C2	; 0x8009c2 <__TEXT_REGION_LENGTH__+0x7009c2>
     2e4:	e7 ff       	sbrs	r30, 7
     2e6:	fc cf       	rjmp	.-8      	; 0x2e0 <wr32+0x2a>
     2e8:	60 93 c3 09 	sts	0x09C3, r22	; 0x8009c3 <__TEXT_REGION_LENGTH__+0x7009c3>
     2ec:	80 91 c2 09 	lds	r24, 0x09C2	; 0x8009c2 <__TEXT_REGION_LENGTH__+0x7009c2>
     2f0:	87 ff       	sbrs	r24, 7
     2f2:	fc cf       	rjmp	.-8      	; 0x2ec <wr32+0x36>
     2f4:	80 e0       	ldi	r24, 0x00	; 0
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	69 01       	movw	r12, r18
     2fa:	7a 01       	movw	r14, r20
     2fc:	08 2e       	mov	r0, r24
     2fe:	04 c0       	rjmp	.+8      	; 0x308 <wr32+0x52>
     300:	f6 94       	lsr	r15
     302:	e7 94       	ror	r14
     304:	d7 94       	ror	r13
     306:	c7 94       	ror	r12
     308:	0a 94       	dec	r0
     30a:	d2 f7       	brpl	.-12     	; 0x300 <wr32+0x4a>
     30c:	c0 92 c3 09 	sts	0x09C3, r12	; 0x8009c3 <__TEXT_REGION_LENGTH__+0x7009c3>
     310:	60 91 c2 09 	lds	r22, 0x09C2	; 0x8009c2 <__TEXT_REGION_LENGTH__+0x7009c2>
     314:	67 ff       	sbrs	r22, 7
     316:	fc cf       	rjmp	.-8      	; 0x310 <wr32+0x5a>
     318:	08 96       	adiw	r24, 0x08	; 8
     31a:	80 32       	cpi	r24, 0x20	; 32
     31c:	91 05       	cpc	r25, r1
     31e:	61 f7       	brne	.-40     	; 0x2f8 <wr32+0x42>
     320:	80 e1       	ldi	r24, 0x10	; 16
     322:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
     326:	ff 90       	pop	r15
     328:	ef 90       	pop	r14
     32a:	df 90       	pop	r13
     32c:	cf 90       	pop	r12
     32e:	08 95       	ret

00000330 <wr16>:
     330:	0f 93       	push	r16
     332:	1f 93       	push	r17
     334:	20 e1       	ldi	r18, 0x10	; 16
     336:	20 93 66 06 	sts	0x0666, r18	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     33a:	28 2f       	mov	r18, r24
     33c:	20 68       	ori	r18, 0x80	; 128
     33e:	20 93 c3 09 	sts	0x09C3, r18	; 0x8009c3 <__TEXT_REGION_LENGTH__+0x7009c3>
     342:	20 91 c2 09 	lds	r18, 0x09C2	; 0x8009c2 <__TEXT_REGION_LENGTH__+0x7009c2>
     346:	27 ff       	sbrs	r18, 7
     348:	fc cf       	rjmp	.-8      	; 0x342 <wr16+0x12>
     34a:	07 2f       	mov	r16, r23
     34c:	18 2f       	mov	r17, r24
     34e:	29 2f       	mov	r18, r25
     350:	33 27       	eor	r19, r19
     352:	00 93 c3 09 	sts	0x09C3, r16	; 0x8009c3 <__TEXT_REGION_LENGTH__+0x7009c3>
     356:	20 91 c2 09 	lds	r18, 0x09C2	; 0x8009c2 <__TEXT_REGION_LENGTH__+0x7009c2>
     35a:	27 ff       	sbrs	r18, 7
     35c:	fc cf       	rjmp	.-8      	; 0x356 <wr16+0x26>
     35e:	60 93 c3 09 	sts	0x09C3, r22	; 0x8009c3 <__TEXT_REGION_LENGTH__+0x7009c3>
     362:	80 91 c2 09 	lds	r24, 0x09C2	; 0x8009c2 <__TEXT_REGION_LENGTH__+0x7009c2>
     366:	87 ff       	sbrs	r24, 7
     368:	fc cf       	rjmp	.-8      	; 0x362 <wr16+0x32>
     36a:	40 93 c3 09 	sts	0x09C3, r20	; 0x8009c3 <__TEXT_REGION_LENGTH__+0x7009c3>
     36e:	80 91 c2 09 	lds	r24, 0x09C2	; 0x8009c2 <__TEXT_REGION_LENGTH__+0x7009c2>
     372:	87 ff       	sbrs	r24, 7
     374:	fc cf       	rjmp	.-8      	; 0x36e <wr16+0x3e>
     376:	50 93 c3 09 	sts	0x09C3, r21	; 0x8009c3 <__TEXT_REGION_LENGTH__+0x7009c3>
     37a:	80 91 c2 09 	lds	r24, 0x09C2	; 0x8009c2 <__TEXT_REGION_LENGTH__+0x7009c2>
     37e:	87 ff       	sbrs	r24, 7
     380:	fc cf       	rjmp	.-8      	; 0x37a <wr16+0x4a>
     382:	80 e1       	ldi	r24, 0x10	; 16
     384:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
     388:	1f 91       	pop	r17
     38a:	0f 91       	pop	r16
     38c:	08 95       	ret

0000038e <wr8>:
     38e:	0f 93       	push	r16
     390:	1f 93       	push	r17
     392:	20 e1       	ldi	r18, 0x10	; 16
     394:	20 93 66 06 	sts	0x0666, r18	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     398:	28 2f       	mov	r18, r24
     39a:	20 68       	ori	r18, 0x80	; 128
     39c:	20 93 c3 09 	sts	0x09C3, r18	; 0x8009c3 <__TEXT_REGION_LENGTH__+0x7009c3>
     3a0:	20 91 c2 09 	lds	r18, 0x09C2	; 0x8009c2 <__TEXT_REGION_LENGTH__+0x7009c2>
     3a4:	27 ff       	sbrs	r18, 7
     3a6:	fc cf       	rjmp	.-8      	; 0x3a0 <wr8+0x12>
     3a8:	07 2f       	mov	r16, r23
     3aa:	18 2f       	mov	r17, r24
     3ac:	29 2f       	mov	r18, r25
     3ae:	33 27       	eor	r19, r19
     3b0:	00 93 c3 09 	sts	0x09C3, r16	; 0x8009c3 <__TEXT_REGION_LENGTH__+0x7009c3>
     3b4:	20 91 c2 09 	lds	r18, 0x09C2	; 0x8009c2 <__TEXT_REGION_LENGTH__+0x7009c2>
     3b8:	27 ff       	sbrs	r18, 7
     3ba:	fc cf       	rjmp	.-8      	; 0x3b4 <wr8+0x26>
     3bc:	60 93 c3 09 	sts	0x09C3, r22	; 0x8009c3 <__TEXT_REGION_LENGTH__+0x7009c3>
     3c0:	80 91 c2 09 	lds	r24, 0x09C2	; 0x8009c2 <__TEXT_REGION_LENGTH__+0x7009c2>
     3c4:	87 ff       	sbrs	r24, 7
     3c6:	fc cf       	rjmp	.-8      	; 0x3c0 <wr8+0x32>
     3c8:	40 93 c3 09 	sts	0x09C3, r20	; 0x8009c3 <__TEXT_REGION_LENGTH__+0x7009c3>
     3cc:	80 91 c2 09 	lds	r24, 0x09C2	; 0x8009c2 <__TEXT_REGION_LENGTH__+0x7009c2>
     3d0:	87 ff       	sbrs	r24, 7
     3d2:	fc cf       	rjmp	.-8      	; 0x3cc <wr8+0x3e>
     3d4:	80 e1       	ldi	r24, 0x10	; 16
     3d6:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
     3da:	1f 91       	pop	r17
     3dc:	0f 91       	pop	r16
     3de:	08 95       	ret

000003e0 <host_command>:
     3e0:	20 e1       	ldi	r18, 0x10	; 16
     3e2:	20 93 66 06 	sts	0x0666, r18	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     3e6:	9c 01       	movw	r18, r24
     3e8:	2d 5f       	subi	r18, 0xFD	; 253
     3ea:	3f 4f       	sbci	r19, 0xFF	; 255
     3ec:	fc 01       	movw	r30, r24
     3ee:	41 91       	ld	r20, Z+
     3f0:	cf 01       	movw	r24, r30
     3f2:	40 93 c3 09 	sts	0x09C3, r20	; 0x8009c3 <__TEXT_REGION_LENGTH__+0x7009c3>
     3f6:	40 91 c2 09 	lds	r20, 0x09C2	; 0x8009c2 <__TEXT_REGION_LENGTH__+0x7009c2>
     3fa:	47 ff       	sbrs	r20, 7
     3fc:	fc cf       	rjmp	.-8      	; 0x3f6 <host_command+0x16>
     3fe:	82 17       	cp	r24, r18
     400:	93 07       	cpc	r25, r19
     402:	a1 f7       	brne	.-24     	; 0x3ec <host_command+0xc>
     404:	80 e1       	ldi	r24, 0x10	; 16
     406:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
     40a:	08 95       	ret

0000040c <rd8>:
     40c:	0f 93       	push	r16
     40e:	1f 93       	push	r17
     410:	20 e1       	ldi	r18, 0x10	; 16
     412:	20 93 66 06 	sts	0x0666, r18	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     416:	8c 01       	movw	r16, r24
     418:	22 27       	eor	r18, r18
     41a:	33 27       	eor	r19, r19
     41c:	00 93 c3 09 	sts	0x09C3, r16	; 0x8009c3 <__TEXT_REGION_LENGTH__+0x7009c3>
     420:	20 91 c2 09 	lds	r18, 0x09C2	; 0x8009c2 <__TEXT_REGION_LENGTH__+0x7009c2>
     424:	27 ff       	sbrs	r18, 7
     426:	fc cf       	rjmp	.-8      	; 0x420 <rd8+0x14>
     428:	07 2f       	mov	r16, r23
     42a:	18 2f       	mov	r17, r24
     42c:	29 2f       	mov	r18, r25
     42e:	33 27       	eor	r19, r19
     430:	00 93 c3 09 	sts	0x09C3, r16	; 0x8009c3 <__TEXT_REGION_LENGTH__+0x7009c3>
     434:	20 91 c2 09 	lds	r18, 0x09C2	; 0x8009c2 <__TEXT_REGION_LENGTH__+0x7009c2>
     438:	27 ff       	sbrs	r18, 7
     43a:	fc cf       	rjmp	.-8      	; 0x434 <rd8+0x28>
     43c:	60 93 c3 09 	sts	0x09C3, r22	; 0x8009c3 <__TEXT_REGION_LENGTH__+0x7009c3>
     440:	80 91 c2 09 	lds	r24, 0x09C2	; 0x8009c2 <__TEXT_REGION_LENGTH__+0x7009c2>
     444:	87 ff       	sbrs	r24, 7
     446:	fc cf       	rjmp	.-8      	; 0x440 <rd8+0x34>
     448:	8f ef       	ldi	r24, 0xFF	; 255
     44a:	80 93 c3 09 	sts	0x09C3, r24	; 0x8009c3 <__TEXT_REGION_LENGTH__+0x7009c3>
     44e:	80 91 c2 09 	lds	r24, 0x09C2	; 0x8009c2 <__TEXT_REGION_LENGTH__+0x7009c2>
     452:	87 ff       	sbrs	r24, 7
     454:	fc cf       	rjmp	.-8      	; 0x44e <rd8+0x42>
     456:	8f ef       	ldi	r24, 0xFF	; 255
     458:	80 93 c3 09 	sts	0x09C3, r24	; 0x8009c3 <__TEXT_REGION_LENGTH__+0x7009c3>
     45c:	80 91 c2 09 	lds	r24, 0x09C2	; 0x8009c2 <__TEXT_REGION_LENGTH__+0x7009c2>
     460:	87 ff       	sbrs	r24, 7
     462:	fc cf       	rjmp	.-8      	; 0x45c <rd8+0x50>
     464:	80 91 c3 09 	lds	r24, 0x09C3	; 0x8009c3 <__TEXT_REGION_LENGTH__+0x7009c3>
     468:	90 e1       	ldi	r25, 0x10	; 16
     46a:	90 93 65 06 	sts	0x0665, r25	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
     46e:	1f 91       	pop	r17
     470:	0f 91       	pop	r16
     472:	08 95       	ret

00000474 <FT813_init>:
     474:	81 e0       	ldi	r24, 0x01	; 1
     476:	80 93 61 06 	sts	0x0661, r24	; 0x800661 <__TEXT_REGION_LENGTH__+0x700661>
     47a:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     47e:	2f e7       	ldi	r18, 0x7F	; 127
     480:	38 e3       	ldi	r19, 0x38	; 56
     482:	91 e0       	ldi	r25, 0x01	; 1
     484:	21 50       	subi	r18, 0x01	; 1
     486:	30 40       	sbci	r19, 0x00	; 0
     488:	90 40       	sbci	r25, 0x00	; 0
     48a:	e1 f7       	brne	.-8      	; 0x484 <FT813_init+0x10>
     48c:	00 c0       	rjmp	.+0      	; 0x48e <FT813_init+0x1a>
     48e:	00 00       	nop
     490:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
     494:	2f e7       	ldi	r18, 0x7F	; 127
     496:	38 e3       	ldi	r19, 0x38	; 56
     498:	81 e0       	ldi	r24, 0x01	; 1
     49a:	21 50       	subi	r18, 0x01	; 1
     49c:	30 40       	sbci	r19, 0x00	; 0
     49e:	80 40       	sbci	r24, 0x00	; 0
     4a0:	e1 f7       	brne	.-8      	; 0x49a <FT813_init+0x26>
     4a2:	00 c0       	rjmp	.+0      	; 0x4a4 <FT813_init+0x30>
     4a4:	00 00       	nop
     4a6:	88 e0       	ldi	r24, 0x08	; 8
     4a8:	90 e2       	ldi	r25, 0x20	; 32
     4aa:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <host_command>
     4ae:	8e ed       	ldi	r24, 0xDE	; 222
     4b0:	93 e2       	ldi	r25, 0x23	; 35
     4b2:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <host_command>
     4b6:	60 e0       	ldi	r22, 0x00	; 0
     4b8:	70 e2       	ldi	r23, 0x20	; 32
     4ba:	80 e3       	ldi	r24, 0x30	; 48
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	0e 94 06 02 	call	0x40c	; 0x40c <rd8>
     4c2:	8c 37       	cpi	r24, 0x7C	; 124
     4c4:	c1 f7       	brne	.-16     	; 0x4b6 <FT813_init+0x42>
     4c6:	44 ea       	ldi	r20, 0xA4	; 164
     4c8:	51 e0       	ldi	r21, 0x01	; 1
     4ca:	6c e2       	ldi	r22, 0x2C	; 44
     4cc:	70 e2       	ldi	r23, 0x20	; 32
     4ce:	80 e3       	ldi	r24, 0x30	; 48
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	0e 94 98 01 	call	0x330	; 0x330 <wr16>
     4d6:	45 e4       	ldi	r20, 0x45	; 69
     4d8:	50 e0       	ldi	r21, 0x00	; 0
     4da:	60 e3       	ldi	r22, 0x30	; 48
     4dc:	70 e2       	ldi	r23, 0x20	; 32
     4de:	80 e3       	ldi	r24, 0x30	; 48
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	0e 94 98 01 	call	0x330	; 0x330 <wr16>
     4e6:	40 e0       	ldi	r20, 0x00	; 0
     4e8:	50 e0       	ldi	r21, 0x00	; 0
     4ea:	68 e3       	ldi	r22, 0x38	; 56
     4ec:	70 e2       	ldi	r23, 0x20	; 32
     4ee:	80 e3       	ldi	r24, 0x30	; 48
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	0e 94 98 01 	call	0x330	; 0x330 <wr16>
     4f6:	49 e2       	ldi	r20, 0x29	; 41
     4f8:	50 e0       	ldi	r21, 0x00	; 0
     4fa:	6c e3       	ldi	r22, 0x3C	; 60
     4fc:	70 e2       	ldi	r23, 0x20	; 32
     4fe:	80 e3       	ldi	r24, 0x30	; 48
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	0e 94 98 01 	call	0x330	; 0x330 <wr16>
     506:	44 e2       	ldi	r20, 0x24	; 36
     508:	51 e0       	ldi	r21, 0x01	; 1
     50a:	60 e4       	ldi	r22, 0x40	; 64
     50c:	70 e2       	ldi	r23, 0x20	; 32
     50e:	80 e3       	ldi	r24, 0x30	; 48
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	0e 94 98 01 	call	0x330	; 0x330 <wr16>
     516:	4d e0       	ldi	r20, 0x0D	; 13
     518:	50 e0       	ldi	r21, 0x00	; 0
     51a:	64 e4       	ldi	r22, 0x44	; 68
     51c:	70 e2       	ldi	r23, 0x20	; 32
     51e:	80 e3       	ldi	r24, 0x30	; 48
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	0e 94 98 01 	call	0x330	; 0x330 <wr16>
     526:	40 e0       	ldi	r20, 0x00	; 0
     528:	50 e0       	ldi	r21, 0x00	; 0
     52a:	6c e4       	ldi	r22, 0x4C	; 76
     52c:	70 e2       	ldi	r23, 0x20	; 32
     52e:	80 e3       	ldi	r24, 0x30	; 48
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	0e 94 98 01 	call	0x330	; 0x330 <wr16>
     536:	4a e0       	ldi	r20, 0x0A	; 10
     538:	50 e0       	ldi	r21, 0x00	; 0
     53a:	60 e5       	ldi	r22, 0x50	; 80
     53c:	70 e2       	ldi	r23, 0x20	; 32
     53e:	80 e3       	ldi	r24, 0x30	; 48
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	0e 94 98 01 	call	0x330	; 0x330 <wr16>
     546:	40 e0       	ldi	r20, 0x00	; 0
     548:	64 e6       	ldi	r22, 0x64	; 100
     54a:	70 e2       	ldi	r23, 0x20	; 32
     54c:	80 e3       	ldi	r24, 0x30	; 48
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	0e 94 c7 01 	call	0x38e	; 0x38e <wr8>
     554:	41 e0       	ldi	r20, 0x01	; 1
     556:	6c e6       	ldi	r22, 0x6C	; 108
     558:	70 e2       	ldi	r23, 0x20	; 32
     55a:	80 e3       	ldi	r24, 0x30	; 48
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	0e 94 c7 01 	call	0x38e	; 0x38e <wr8>
     562:	41 e0       	ldi	r20, 0x01	; 1
     564:	68 e6       	ldi	r22, 0x68	; 104
     566:	70 e2       	ldi	r23, 0x20	; 32
     568:	80 e3       	ldi	r24, 0x30	; 48
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	0e 94 c7 01 	call	0x38e	; 0x38e <wr8>
     570:	40 e4       	ldi	r20, 0x40	; 64
     572:	51 e0       	ldi	r21, 0x01	; 1
     574:	64 e3       	ldi	r22, 0x34	; 52
     576:	70 e2       	ldi	r23, 0x20	; 32
     578:	80 e3       	ldi	r24, 0x30	; 48
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	0e 94 98 01 	call	0x330	; 0x330 <wr16>
     580:	40 ef       	ldi	r20, 0xF0	; 240
     582:	50 e0       	ldi	r21, 0x00	; 0
     584:	68 e4       	ldi	r22, 0x48	; 72
     586:	70 e2       	ldi	r23, 0x20	; 32
     588:	80 e3       	ldi	r24, 0x30	; 48
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	0e 94 98 01 	call	0x330	; 0x330 <wr16>
     590:	28 ec       	ldi	r18, 0xC8	; 200
     592:	3f ef       	ldi	r19, 0xFF	; 255
     594:	4f ef       	ldi	r20, 0xFF	; 255
     596:	52 e0       	ldi	r21, 0x02	; 2
     598:	60 e0       	ldi	r22, 0x00	; 0
     59a:	70 e0       	ldi	r23, 0x00	; 0
     59c:	80 e3       	ldi	r24, 0x30	; 48
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <wr32>
     5a4:	27 e0       	ldi	r18, 0x07	; 7
     5a6:	30 e0       	ldi	r19, 0x00	; 0
     5a8:	40 e0       	ldi	r20, 0x00	; 0
     5aa:	56 e2       	ldi	r21, 0x26	; 38
     5ac:	64 e0       	ldi	r22, 0x04	; 4
     5ae:	70 e0       	ldi	r23, 0x00	; 0
     5b0:	80 e3       	ldi	r24, 0x30	; 48
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <wr32>
     5b8:	20 e0       	ldi	r18, 0x00	; 0
     5ba:	30 e0       	ldi	r19, 0x00	; 0
     5bc:	a9 01       	movw	r20, r18
     5be:	68 e0       	ldi	r22, 0x08	; 8
     5c0:	70 e0       	ldi	r23, 0x00	; 0
     5c2:	80 e3       	ldi	r24, 0x30	; 48
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <wr32>
     5ca:	42 e0       	ldi	r20, 0x02	; 2
     5cc:	64 e5       	ldi	r22, 0x54	; 84
     5ce:	70 e2       	ldi	r23, 0x20	; 32
     5d0:	80 e3       	ldi	r24, 0x30	; 48
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	0e 94 c7 01 	call	0x38e	; 0x38e <wr8>
     5d8:	40 e8       	ldi	r20, 0x80	; 128
     5da:	60 e9       	ldi	r22, 0x90	; 144
     5dc:	70 e2       	ldi	r23, 0x20	; 32
     5de:	80 e3       	ldi	r24, 0x30	; 48
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	0e 94 c7 01 	call	0x38e	; 0x38e <wr8>
     5e6:	40 e8       	ldi	r20, 0x80	; 128
     5e8:	64 e9       	ldi	r22, 0x94	; 148
     5ea:	70 e2       	ldi	r23, 0x20	; 32
     5ec:	80 e3       	ldi	r24, 0x30	; 48
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	0e 94 c7 01 	call	0x38e	; 0x38e <wr8>
     5f4:	42 e0       	ldi	r20, 0x02	; 2
     5f6:	60 e7       	ldi	r22, 0x70	; 112
     5f8:	70 e2       	ldi	r23, 0x20	; 32
     5fa:	80 e3       	ldi	r24, 0x30	; 48
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	0c 94 c7 01 	jmp	0x38e	; 0x38e <wr8>

00000602 <cmd>:
     602:	cf 92       	push	r12
     604:	df 92       	push	r13
     606:	ef 92       	push	r14
     608:	ff 92       	push	r15
     60a:	cf 93       	push	r28
     60c:	df 93       	push	r29
     60e:	6b 01       	movw	r12, r22
     610:	7c 01       	movw	r14, r24
     612:	c0 91 e1 23 	lds	r28, 0x23E1	; 0x8023e1 <cmd_offset>
     616:	d0 91 e2 23 	lds	r29, 0x23E2	; 0x8023e2 <cmd_offset+0x1>
     61a:	ce 01       	movw	r24, r28
     61c:	a0 e0       	ldi	r26, 0x00	; 0
     61e:	b0 e0       	ldi	r27, 0x00	; 0
     620:	bc 01       	movw	r22, r24
     622:	cd 01       	movw	r24, r26
     624:	70 58       	subi	r23, 0x80	; 128
     626:	8f 4c       	sbci	r24, 0xCF	; 207
     628:	9f 4f       	sbci	r25, 0xFF	; 255
     62a:	a7 01       	movw	r20, r14
     62c:	96 01       	movw	r18, r12
     62e:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <wr32>
     632:	ae 01       	movw	r20, r28
     634:	4c 5f       	subi	r20, 0xFC	; 252
     636:	5f 4f       	sbci	r21, 0xFF	; 255
     638:	5f 70       	andi	r21, 0x0F	; 15
     63a:	40 93 e1 23 	sts	0x23E1, r20	; 0x8023e1 <cmd_offset>
     63e:	50 93 e2 23 	sts	0x23E2, r21	; 0x8023e2 <cmd_offset+0x1>
     642:	81 e0       	ldi	r24, 0x01	; 1
     644:	c8 16       	cp	r12, r24
     646:	8f ef       	ldi	r24, 0xFF	; 255
     648:	d8 06       	cpc	r13, r24
     64a:	e8 06       	cpc	r14, r24
     64c:	f8 06       	cpc	r15, r24
     64e:	61 f4       	brne	.+24     	; 0x668 <cmd+0x66>
     650:	6c ef       	ldi	r22, 0xFC	; 252
     652:	70 e2       	ldi	r23, 0x20	; 32
     654:	80 e3       	ldi	r24, 0x30	; 48
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	df 91       	pop	r29
     65a:	cf 91       	pop	r28
     65c:	ff 90       	pop	r15
     65e:	ef 90       	pop	r14
     660:	df 90       	pop	r13
     662:	cf 90       	pop	r12
     664:	0c 94 98 01 	jmp	0x330	; 0x330 <wr16>
     668:	df 91       	pop	r29
     66a:	cf 91       	pop	r28
     66c:	ff 90       	pop	r15
     66e:	ef 90       	pop	r14
     670:	df 90       	pop	r13
     672:	cf 90       	pop	r12
     674:	08 95       	ret

00000676 <cmd_2>:
     676:	cf 93       	push	r28
     678:	df 93       	push	r29
     67a:	ac 01       	movw	r20, r24
     67c:	c0 91 e1 23 	lds	r28, 0x23E1	; 0x8023e1 <cmd_offset>
     680:	d0 91 e2 23 	lds	r29, 0x23E2	; 0x8023e2 <cmd_offset+0x1>
     684:	ce 01       	movw	r24, r28
     686:	a0 e0       	ldi	r26, 0x00	; 0
     688:	b0 e0       	ldi	r27, 0x00	; 0
     68a:	bc 01       	movw	r22, r24
     68c:	cd 01       	movw	r24, r26
     68e:	70 58       	subi	r23, 0x80	; 128
     690:	8f 4c       	sbci	r24, 0xCF	; 207
     692:	9f 4f       	sbci	r25, 0xFF	; 255
     694:	0e 94 98 01 	call	0x330	; 0x330 <wr16>
     698:	22 96       	adiw	r28, 0x02	; 2
     69a:	df 70       	andi	r29, 0x0F	; 15
     69c:	c0 93 e1 23 	sts	0x23E1, r28	; 0x8023e1 <cmd_offset>
     6a0:	d0 93 e2 23 	sts	0x23E2, r29	; 0x8023e2 <cmd_offset+0x1>
     6a4:	df 91       	pop	r29
     6a6:	cf 91       	pop	r28
     6a8:	08 95       	ret

000006aa <cmd_1>:
     6aa:	cf 93       	push	r28
     6ac:	df 93       	push	r29
     6ae:	48 2f       	mov	r20, r24
     6b0:	c0 91 e1 23 	lds	r28, 0x23E1	; 0x8023e1 <cmd_offset>
     6b4:	d0 91 e2 23 	lds	r29, 0x23E2	; 0x8023e2 <cmd_offset+0x1>
     6b8:	ce 01       	movw	r24, r28
     6ba:	a0 e0       	ldi	r26, 0x00	; 0
     6bc:	b0 e0       	ldi	r27, 0x00	; 0
     6be:	bc 01       	movw	r22, r24
     6c0:	cd 01       	movw	r24, r26
     6c2:	70 58       	subi	r23, 0x80	; 128
     6c4:	8f 4c       	sbci	r24, 0xCF	; 207
     6c6:	9f 4f       	sbci	r25, 0xFF	; 255
     6c8:	0e 94 c7 01 	call	0x38e	; 0x38e <wr8>
     6cc:	21 96       	adiw	r28, 0x01	; 1
     6ce:	df 70       	andi	r29, 0x0F	; 15
     6d0:	c0 93 e1 23 	sts	0x23E1, r28	; 0x8023e1 <cmd_offset>
     6d4:	d0 93 e2 23 	sts	0x23E2, r29	; 0x8023e2 <cmd_offset+0x1>
     6d8:	df 91       	pop	r29
     6da:	cf 91       	pop	r28
     6dc:	08 95       	ret

000006de <cmd_text>:
     6de:	af 92       	push	r10
     6e0:	bf 92       	push	r11
     6e2:	cf 92       	push	r12
     6e4:	df 92       	push	r13
     6e6:	ef 92       	push	r14
     6e8:	ff 92       	push	r15
     6ea:	0f 93       	push	r16
     6ec:	1f 93       	push	r17
     6ee:	cf 93       	push	r28
     6f0:	df 93       	push	r29
     6f2:	5c 01       	movw	r10, r24
     6f4:	6b 01       	movw	r12, r22
     6f6:	7a 01       	movw	r14, r20
     6f8:	e9 01       	movw	r28, r18
     6fa:	6c e0       	ldi	r22, 0x0C	; 12
     6fc:	7f ef       	ldi	r23, 0xFF	; 255
     6fe:	8f ef       	ldi	r24, 0xFF	; 255
     700:	9f ef       	ldi	r25, 0xFF	; 255
     702:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
     706:	c5 01       	movw	r24, r10
     708:	0e 94 3b 03 	call	0x676	; 0x676 <cmd_2>
     70c:	c6 01       	movw	r24, r12
     70e:	0e 94 3b 03 	call	0x676	; 0x676 <cmd_2>
     712:	c7 01       	movw	r24, r14
     714:	0e 94 3b 03 	call	0x676	; 0x676 <cmd_2>
     718:	ce 01       	movw	r24, r28
     71a:	0e 94 3b 03 	call	0x676	; 0x676 <cmd_2>
     71e:	e8 01       	movw	r28, r16
     720:	89 91       	ld	r24, Y+
     722:	88 23       	and	r24, r24
     724:	19 f0       	breq	.+6      	; 0x72c <cmd_text+0x4e>
     726:	0e 94 55 03 	call	0x6aa	; 0x6aa <cmd_1>
     72a:	fa cf       	rjmp	.-12     	; 0x720 <cmd_text+0x42>
     72c:	80 91 e1 23 	lds	r24, 0x23E1	; 0x8023e1 <cmd_offset>
     730:	90 91 e2 23 	lds	r25, 0x23E2	; 0x8023e2 <cmd_offset+0x1>
     734:	83 70       	andi	r24, 0x03	; 3
     736:	99 27       	eor	r25, r25
     738:	c4 e0       	ldi	r28, 0x04	; 4
     73a:	d0 e0       	ldi	r29, 0x00	; 0
     73c:	c8 1b       	sub	r28, r24
     73e:	d9 0b       	sbc	r29, r25
     740:	80 e0       	ldi	r24, 0x00	; 0
     742:	0e 94 55 03 	call	0x6aa	; 0x6aa <cmd_1>
     746:	21 97       	sbiw	r28, 0x01	; 1
     748:	d9 f7       	brne	.-10     	; 0x740 <cmd_text+0x62>
     74a:	df 91       	pop	r29
     74c:	cf 91       	pop	r28
     74e:	1f 91       	pop	r17
     750:	0f 91       	pop	r16
     752:	ff 90       	pop	r15
     754:	ef 90       	pop	r14
     756:	df 90       	pop	r13
     758:	cf 90       	pop	r12
     75a:	bf 90       	pop	r11
     75c:	af 90       	pop	r10
     75e:	08 95       	ret

00000760 <VERTEX2II>:
     760:	cf 92       	push	r12
     762:	df 92       	push	r13
     764:	ef 92       	push	r14
     766:	ff 92       	push	r15
     768:	0f 93       	push	r16
     76a:	1f 93       	push	r17
     76c:	8b 01       	movw	r16, r22
     76e:	50 e0       	ldi	r21, 0x00	; 0
     770:	60 e0       	ldi	r22, 0x00	; 0
     772:	70 e0       	ldi	r23, 0x00	; 0
     774:	37 e0       	ldi	r19, 0x07	; 7
     776:	44 0f       	add	r20, r20
     778:	55 1f       	adc	r21, r21
     77a:	66 1f       	adc	r22, r22
     77c:	77 1f       	adc	r23, r23
     77e:	3a 95       	dec	r19
     780:	d1 f7       	brne	.-12     	; 0x776 <VERTEX2II+0x16>
     782:	c2 2e       	mov	r12, r18
     784:	d1 2c       	mov	r13, r1
     786:	e1 2c       	mov	r14, r1
     788:	f1 2c       	mov	r15, r1
     78a:	68 94       	set
     78c:	f7 f8       	bld	r15, 7
     78e:	4c 29       	or	r20, r12
     790:	5d 29       	or	r21, r13
     792:	6e 29       	or	r22, r14
     794:	7f 29       	or	r23, r15
     796:	11 70       	andi	r17, 0x01	; 1
     798:	20 e0       	ldi	r18, 0x00	; 0
     79a:	30 e0       	ldi	r19, 0x00	; 0
     79c:	ec e0       	ldi	r30, 0x0C	; 12
     79e:	00 0f       	add	r16, r16
     7a0:	11 1f       	adc	r17, r17
     7a2:	22 1f       	adc	r18, r18
     7a4:	33 1f       	adc	r19, r19
     7a6:	ea 95       	dec	r30
     7a8:	d1 f7       	brne	.-12     	; 0x79e <VERTEX2II+0x3e>
     7aa:	40 2b       	or	r20, r16
     7ac:	51 2b       	or	r21, r17
     7ae:	62 2b       	or	r22, r18
     7b0:	73 2b       	or	r23, r19
     7b2:	91 70       	andi	r25, 0x01	; 1
     7b4:	a0 e0       	ldi	r26, 0x00	; 0
     7b6:	b0 e0       	ldi	r27, 0x00	; 0
     7b8:	f5 e1       	ldi	r31, 0x15	; 21
     7ba:	88 0f       	add	r24, r24
     7bc:	99 1f       	adc	r25, r25
     7be:	aa 1f       	adc	r26, r26
     7c0:	bb 1f       	adc	r27, r27
     7c2:	fa 95       	dec	r31
     7c4:	d1 f7       	brne	.-12     	; 0x7ba <VERTEX2II+0x5a>
     7c6:	8a 01       	movw	r16, r20
     7c8:	9b 01       	movw	r18, r22
     7ca:	08 2b       	or	r16, r24
     7cc:	19 2b       	or	r17, r25
     7ce:	2a 2b       	or	r18, r26
     7d0:	3b 2b       	or	r19, r27
     7d2:	c9 01       	movw	r24, r18
     7d4:	b8 01       	movw	r22, r16
     7d6:	1f 91       	pop	r17
     7d8:	0f 91       	pop	r16
     7da:	ff 90       	pop	r15
     7dc:	ef 90       	pop	r14
     7de:	df 90       	pop	r13
     7e0:	cf 90       	pop	r12
     7e2:	08 95       	ret

000007e4 <draw_character>:
     7e4:	af 92       	push	r10
     7e6:	bf 92       	push	r11
     7e8:	cf 92       	push	r12
     7ea:	ef 92       	push	r14
     7ec:	ff 92       	push	r15
     7ee:	0f 93       	push	r16
     7f0:	1f 93       	push	r17
     7f2:	cf 93       	push	r28
     7f4:	df 93       	push	r29
     7f6:	f8 2e       	mov	r15, r24
     7f8:	16 2f       	mov	r17, r22
     7fa:	ea 01       	movw	r28, r20
     7fc:	59 01       	movw	r10, r18
     7fe:	8c 2d       	mov	r24, r12
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	a0 e0       	ldi	r26, 0x00	; 0
     804:	b0 e0       	ldi	r27, 0x00	; 0
     806:	dc 01       	movw	r26, r24
     808:	99 27       	eor	r25, r25
     80a:	88 27       	eor	r24, r24
     80c:	b4 60       	ori	r27, 0x04	; 4
     80e:	9e 29       	or	r25, r14
     810:	bc 01       	movw	r22, r24
     812:	cd 01       	movw	r24, r26
     814:	60 2b       	or	r22, r16
     816:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
     81a:	61 e0       	ldi	r22, 0x01	; 1
     81c:	70 e0       	ldi	r23, 0x00	; 0
     81e:	80 e0       	ldi	r24, 0x00	; 0
     820:	9f e1       	ldi	r25, 0x1F	; 31
     822:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
     826:	2f 2d       	mov	r18, r15
     828:	41 2f       	mov	r20, r17
     82a:	b5 01       	movw	r22, r10
     82c:	ce 01       	movw	r24, r28
     82e:	0e 94 b0 03 	call	0x760	; 0x760 <VERTEX2II>
     832:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
     836:	60 e0       	ldi	r22, 0x00	; 0
     838:	70 e0       	ldi	r23, 0x00	; 0
     83a:	80 e0       	ldi	r24, 0x00	; 0
     83c:	91 e2       	ldi	r25, 0x21	; 33
     83e:	df 91       	pop	r29
     840:	cf 91       	pop	r28
     842:	1f 91       	pop	r17
     844:	0f 91       	pop	r16
     846:	ff 90       	pop	r15
     848:	ef 90       	pop	r14
     84a:	cf 90       	pop	r12
     84c:	bf 90       	pop	r11
     84e:	af 90       	pop	r10
     850:	0c 94 01 03 	jmp	0x602	; 0x602 <cmd>

00000854 <draw_text>:
     854:	2f 92       	push	r2
     856:	3f 92       	push	r3
     858:	4f 92       	push	r4
     85a:	5f 92       	push	r5
     85c:	6f 92       	push	r6
     85e:	7f 92       	push	r7
     860:	8f 92       	push	r8
     862:	9f 92       	push	r9
     864:	af 92       	push	r10
     866:	bf 92       	push	r11
     868:	cf 92       	push	r12
     86a:	df 92       	push	r13
     86c:	ef 92       	push	r14
     86e:	ff 92       	push	r15
     870:	0f 93       	push	r16
     872:	1f 93       	push	r17
     874:	cf 93       	push	r28
     876:	df 93       	push	r29
     878:	cd b7       	in	r28, 0x3d	; 61
     87a:	de b7       	in	r29, 0x3e	; 62
     87c:	26 97       	sbiw	r28, 0x06	; 6
     87e:	cd bf       	out	0x3d, r28	; 61
     880:	de bf       	out	0x3e, r29	; 62
     882:	4c 01       	movw	r8, r24
     884:	d6 2e       	mov	r13, r22
     886:	f4 2e       	mov	r15, r20
     888:	19 01       	movw	r2, r18
     88a:	38 01       	movw	r6, r16
     88c:	8a 2d       	mov	r24, r10
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	a0 e0       	ldi	r26, 0x00	; 0
     892:	b0 e0       	ldi	r27, 0x00	; 0
     894:	dc 01       	movw	r26, r24
     896:	99 27       	eor	r25, r25
     898:	88 27       	eor	r24, r24
     89a:	8f 6f       	ori	r24, 0xFF	; 255
     89c:	b4 60       	ori	r27, 0x04	; 4
     89e:	bc 01       	movw	r22, r24
     8a0:	cd 01       	movw	r24, r26
     8a2:	7c 29       	or	r23, r12
     8a4:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
     8a8:	61 e0       	ldi	r22, 0x01	; 1
     8aa:	70 e0       	ldi	r23, 0x00	; 0
     8ac:	80 e0       	ldi	r24, 0x00	; 0
     8ae:	9f e1       	ldi	r25, 0x1F	; 31
     8b0:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
     8b4:	1d 82       	std	Y+5, r1	; 0x05
     8b6:	1e 82       	std	Y+6, r1	; 0x06
     8b8:	2d 2d       	mov	r18, r13
     8ba:	30 e0       	ldi	r19, 0x00	; 0
     8bc:	29 83       	std	Y+1, r18	; 0x01
     8be:	3a 83       	std	Y+2, r19	; 0x02
     8c0:	8f 2d       	mov	r24, r15
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	8b 83       	std	Y+3, r24	; 0x03
     8c6:	9c 83       	std	Y+4, r25	; 0x04
     8c8:	41 2c       	mov	r4, r1
     8ca:	51 2c       	mov	r5, r1
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	9e 81       	ldd	r25, Y+6	; 0x06
     8d0:	29 81       	ldd	r18, Y+1	; 0x01
     8d2:	3a 81       	ldd	r19, Y+2	; 0x02
     8d4:	82 17       	cp	r24, r18
     8d6:	93 07       	cpc	r25, r19
     8d8:	cc f5       	brge	.+114    	; 0x94c <draw_text+0xf8>
     8da:	2b 81       	ldd	r18, Y+3	; 0x03
     8dc:	3c 81       	ldd	r19, Y+4	; 0x04
     8de:	8d 81       	ldd	r24, Y+5	; 0x05
     8e0:	9e 81       	ldd	r25, Y+6	; 0x06
     8e2:	28 9f       	mul	r18, r24
     8e4:	b0 01       	movw	r22, r0
     8e6:	29 9f       	mul	r18, r25
     8e8:	70 0d       	add	r23, r0
     8ea:	38 9f       	mul	r19, r24
     8ec:	70 0d       	add	r23, r0
     8ee:	11 24       	eor	r1, r1
     8f0:	07 2e       	mov	r0, r23
     8f2:	00 0c       	add	r0, r0
     8f4:	88 0b       	sbc	r24, r24
     8f6:	99 0b       	sbc	r25, r25
     8f8:	0e 94 e6 35 	call	0x6bcc	; 0x6bcc <__floatsisf>
     8fc:	20 e0       	ldi	r18, 0x00	; 0
     8fe:	30 e0       	ldi	r19, 0x00	; 0
     900:	40 e0       	ldi	r20, 0x00	; 0
     902:	5f e3       	ldi	r21, 0x3F	; 63
     904:	0e 94 f3 36 	call	0x6de6	; 0x6de6 <__mulsf3>
     908:	5b 01       	movw	r10, r22
     90a:	6c 01       	movw	r12, r24
     90c:	c2 01       	movw	r24, r4
     90e:	b1 01       	movw	r22, r2
     910:	0e 94 e4 35 	call	0x6bc8	; 0x6bc8 <__floatunsisf>
     914:	9b 01       	movw	r18, r22
     916:	ac 01       	movw	r20, r24
     918:	c6 01       	movw	r24, r12
     91a:	b5 01       	movw	r22, r10
     91c:	0e 94 cb 34 	call	0x6996	; 0x6996 <__addsf3>
     920:	0e 94 b5 35 	call	0x6b6a	; 0x6b6a <__fixunssfsi>
     924:	ed 81       	ldd	r30, Y+5	; 0x05
     926:	fe 81       	ldd	r31, Y+6	; 0x06
     928:	e8 0d       	add	r30, r8
     92a:	f9 1d       	adc	r31, r9
     92c:	c1 2c       	mov	r12, r1
     92e:	e1 2c       	mov	r14, r1
     930:	00 e0       	ldi	r16, 0x00	; 0
     932:	93 01       	movw	r18, r6
     934:	ab 01       	movw	r20, r22
     936:	6f 2d       	mov	r22, r15
     938:	80 81       	ld	r24, Z
     93a:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <draw_character>
     93e:	2d 81       	ldd	r18, Y+5	; 0x05
     940:	3e 81       	ldd	r19, Y+6	; 0x06
     942:	2f 5f       	subi	r18, 0xFF	; 255
     944:	3f 4f       	sbci	r19, 0xFF	; 255
     946:	2d 83       	std	Y+5, r18	; 0x05
     948:	3e 83       	std	Y+6, r19	; 0x06
     94a:	c0 cf       	rjmp	.-128    	; 0x8cc <draw_text+0x78>
     94c:	60 e0       	ldi	r22, 0x00	; 0
     94e:	70 e0       	ldi	r23, 0x00	; 0
     950:	80 e0       	ldi	r24, 0x00	; 0
     952:	91 e2       	ldi	r25, 0x21	; 33
     954:	26 96       	adiw	r28, 0x06	; 6
     956:	cd bf       	out	0x3d, r28	; 61
     958:	de bf       	out	0x3e, r29	; 62
     95a:	df 91       	pop	r29
     95c:	cf 91       	pop	r28
     95e:	1f 91       	pop	r17
     960:	0f 91       	pop	r16
     962:	ff 90       	pop	r15
     964:	ef 90       	pop	r14
     966:	df 90       	pop	r13
     968:	cf 90       	pop	r12
     96a:	bf 90       	pop	r11
     96c:	af 90       	pop	r10
     96e:	9f 90       	pop	r9
     970:	8f 90       	pop	r8
     972:	7f 90       	pop	r7
     974:	6f 90       	pop	r6
     976:	5f 90       	pop	r5
     978:	4f 90       	pop	r4
     97a:	3f 90       	pop	r3
     97c:	2f 90       	pop	r2
     97e:	0c 94 01 03 	jmp	0x602	; 0x602 <cmd>

00000982 <int_to_char_array>:
     982:	cf 92       	push	r12
     984:	df 92       	push	r13
     986:	ef 92       	push	r14
     988:	ff 92       	push	r15
     98a:	0f 93       	push	r16
     98c:	1f 93       	push	r17
     98e:	cf 93       	push	r28
     990:	df 93       	push	r29
     992:	cd b7       	in	r28, 0x3d	; 61
     994:	de b7       	in	r29, 0x3e	; 62
     996:	2d 97       	sbiw	r28, 0x0d	; 13
     998:	cd bf       	out	0x3d, r28	; 61
     99a:	de bf       	out	0x3e, r29	; 62
     99c:	9c 01       	movw	r18, r24
     99e:	ce 01       	movw	r24, r28
     9a0:	01 96       	adiw	r24, 0x01	; 1
     9a2:	7c 01       	movw	r14, r24
     9a4:	fc 01       	movw	r30, r24
     9a6:	c9 01       	movw	r24, r18
     9a8:	4a e0       	ldi	r20, 0x0A	; 10
     9aa:	c4 2e       	mov	r12, r20
     9ac:	d1 2c       	mov	r13, r1
     9ae:	8f 01       	movw	r16, r30
     9b0:	0e 19       	sub	r16, r14
     9b2:	1f 09       	sbc	r17, r15
     9b4:	00 97       	sbiw	r24, 0x00	; 0
     9b6:	39 f0       	breq	.+14     	; 0x9c6 <int_to_char_array+0x44>
     9b8:	b6 01       	movw	r22, r12
     9ba:	0e 94 e8 37 	call	0x6fd0	; 0x6fd0 <__divmodhi4>
     9be:	80 5d       	subi	r24, 0xD0	; 208
     9c0:	81 93       	st	Z+, r24
     9c2:	cb 01       	movw	r24, r22
     9c4:	f4 cf       	rjmp	.-24     	; 0x9ae <int_to_char_array+0x2c>
     9c6:	23 2b       	or	r18, r19
     9c8:	49 f4       	brne	.+18     	; 0x9dc <int_to_char_array+0x5a>
     9ca:	81 e0       	ldi	r24, 0x01	; 1
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	0e 94 c3 38 	call	0x7186	; 0x7186 <malloc>
     9d2:	fc 01       	movw	r30, r24
     9d4:	80 e3       	ldi	r24, 0x30	; 48
     9d6:	80 83       	st	Z, r24
     9d8:	cf 01       	movw	r24, r30
     9da:	16 c0       	rjmp	.+44     	; 0xa08 <int_to_char_array+0x86>
     9dc:	c8 01       	movw	r24, r16
     9de:	01 96       	adiw	r24, 0x01	; 1
     9e0:	0e 94 c3 38 	call	0x7186	; 0x7186 <malloc>
     9e4:	f7 01       	movw	r30, r14
     9e6:	e0 0f       	add	r30, r16
     9e8:	f1 1f       	adc	r31, r17
     9ea:	dc 01       	movw	r26, r24
     9ec:	31 97       	sbiw	r30, 0x01	; 1
     9ee:	9f 01       	movw	r18, r30
     9f0:	2e 19       	sub	r18, r14
     9f2:	3f 09       	sbc	r19, r15
     9f4:	2f 3f       	cpi	r18, 0xFF	; 255
     9f6:	3f 4f       	sbci	r19, 0xFF	; 255
     9f8:	19 f0       	breq	.+6      	; 0xa00 <int_to_char_array+0x7e>
     9fa:	20 81       	ld	r18, Z
     9fc:	2d 93       	st	X+, r18
     9fe:	f6 cf       	rjmp	.-20     	; 0x9ec <int_to_char_array+0x6a>
     a00:	fc 01       	movw	r30, r24
     a02:	e0 0f       	add	r30, r16
     a04:	f1 1f       	adc	r31, r17
     a06:	10 82       	st	Z, r1
     a08:	2d 96       	adiw	r28, 0x0d	; 13
     a0a:	cd bf       	out	0x3d, r28	; 61
     a0c:	de bf       	out	0x3e, r29	; 62
     a0e:	df 91       	pop	r29
     a10:	cf 91       	pop	r28
     a12:	1f 91       	pop	r17
     a14:	0f 91       	pop	r16
     a16:	ff 90       	pop	r15
     a18:	ef 90       	pop	r14
     a1a:	df 90       	pop	r13
     a1c:	cf 90       	pop	r12
     a1e:	08 95       	ret

00000a20 <number_of_digits>:
     a20:	bc 01       	movw	r22, r24
     a22:	99 0f       	add	r25, r25
     a24:	88 0b       	sbc	r24, r24
     a26:	99 0b       	sbc	r25, r25
     a28:	0e 94 e6 35 	call	0x6bcc	; 0x6bcc <__floatsisf>
     a2c:	0e 94 9b 36 	call	0x6d36	; 0x6d36 <log10>
     a30:	20 e0       	ldi	r18, 0x00	; 0
     a32:	30 e0       	ldi	r19, 0x00	; 0
     a34:	40 e8       	ldi	r20, 0x80	; 128
     a36:	5f e3       	ldi	r21, 0x3F	; 63
     a38:	0e 94 cb 34 	call	0x6996	; 0x6996 <__addsf3>
     a3c:	0e 94 ae 35 	call	0x6b5c	; 0x6b5c <__fixsfsi>
     a40:	cb 01       	movw	r24, r22
     a42:	08 95       	ret

00000a44 <display_digital_reading>:
     a44:	9f 92       	push	r9
     a46:	af 92       	push	r10
     a48:	bf 92       	push	r11
     a4a:	cf 92       	push	r12
     a4c:	df 92       	push	r13
     a4e:	ef 92       	push	r14
     a50:	ff 92       	push	r15
     a52:	0f 93       	push	r16
     a54:	1f 93       	push	r17
     a56:	cf 93       	push	r28
     a58:	df 93       	push	r29
     a5a:	cd b7       	in	r28, 0x3d	; 61
     a5c:	de b7       	in	r29, 0x3e	; 62
     a5e:	27 97       	sbiw	r28, 0x07	; 7
     a60:	cd bf       	out	0x3d, r28	; 61
     a62:	de bf       	out	0x3e, r29	; 62
     a64:	7b 01       	movw	r14, r22
     a66:	6a 01       	movw	r12, r20
     a68:	59 01       	movw	r10, r18
     a6a:	90 2e       	mov	r9, r16
     a6c:	6a e0       	ldi	r22, 0x0A	; 10
     a6e:	70 e0       	ldi	r23, 0x00	; 0
     a70:	0e 94 d4 37 	call	0x6fa8	; 0x6fa8 <__udivmodhi4>
     a74:	cb 01       	movw	r24, r22
     a76:	25 e0       	ldi	r18, 0x05	; 5
     a78:	eb e0       	ldi	r30, 0x0B	; 11
     a7a:	f0 e2       	ldi	r31, 0x20	; 32
     a7c:	de 01       	movw	r26, r28
     a7e:	11 96       	adiw	r26, 0x01	; 1
     a80:	01 90       	ld	r0, Z+
     a82:	0d 92       	st	X+, r0
     a84:	2a 95       	dec	r18
     a86:	e1 f7       	brne	.-8      	; 0xa80 <display_digital_reading+0x3c>
     a88:	fe 01       	movw	r30, r28
     a8a:	31 96       	adiw	r30, 0x01	; 1
     a8c:	23 e0       	ldi	r18, 0x03	; 3
     a8e:	30 e0       	ldi	r19, 0x00	; 0
     a90:	0a e0       	ldi	r16, 0x0A	; 10
     a92:	10 e0       	ldi	r17, 0x00	; 0
     a94:	00 97       	sbiw	r24, 0x00	; 0
     a96:	81 f0       	breq	.+32     	; 0xab8 <display_digital_reading+0x74>
     a98:	22 30       	cpi	r18, 0x02	; 2
     a9a:	31 05       	cpc	r19, r1
     a9c:	31 f0       	breq	.+12     	; 0xaaa <display_digital_reading+0x66>
     a9e:	b8 01       	movw	r22, r16
     aa0:	0e 94 d4 37 	call	0x6fa8	; 0x6fa8 <__udivmodhi4>
     aa4:	80 5d       	subi	r24, 0xD0	; 208
     aa6:	83 83       	std	Z+3, r24	; 0x03
     aa8:	cb 01       	movw	r24, r22
     aaa:	21 50       	subi	r18, 0x01	; 1
     aac:	31 09       	sbc	r19, r1
     aae:	31 97       	sbiw	r30, 0x01	; 1
     ab0:	2f 3f       	cpi	r18, 0xFF	; 255
     ab2:	4f ef       	ldi	r20, 0xFF	; 255
     ab4:	34 07       	cpc	r19, r20
     ab6:	71 f7       	brne	.-36     	; 0xa94 <display_digital_reading+0x50>
     ab8:	8e 01       	movw	r16, r28
     aba:	0f 5f       	subi	r16, 0xFF	; 255
     abc:	1f 4f       	sbci	r17, 0xFF	; 255
     abe:	20 e0       	ldi	r18, 0x00	; 0
     ac0:	30 e0       	ldi	r19, 0x00	; 0
     ac2:	a5 01       	movw	r20, r10
     ac4:	b6 01       	movw	r22, r12
     ac6:	c7 01       	movw	r24, r14
     ac8:	0e 94 6f 03 	call	0x6de	; 0x6de <cmd_text>
     acc:	99 20       	and	r9, r9
     ace:	11 f0       	breq	.+4      	; 0xad4 <display_digital_reading+0x90>
     ad0:	86 e5       	ldi	r24, 0x56	; 86
     ad2:	01 c0       	rjmp	.+2      	; 0xad6 <display_digital_reading+0x92>
     ad4:	81 e4       	ldi	r24, 0x41	; 65
     ad6:	8e 83       	std	Y+6, r24	; 0x06
     ad8:	1f 82       	std	Y+7, r1	; 0x07
     ada:	8e 01       	movw	r16, r28
     adc:	0a 5f       	subi	r16, 0xFA	; 250
     ade:	1f 4f       	sbci	r17, 0xFF	; 255
     ae0:	20 e0       	ldi	r18, 0x00	; 0
     ae2:	30 e0       	ldi	r19, 0x00	; 0
     ae4:	a5 01       	movw	r20, r10
     ae6:	b6 01       	movw	r22, r12
     ae8:	c7 01       	movw	r24, r14
     aea:	86 96       	adiw	r24, 0x26	; 38
     aec:	0e 94 6f 03 	call	0x6de	; 0x6de <cmd_text>
     af0:	27 96       	adiw	r28, 0x07	; 7
     af2:	cd bf       	out	0x3d, r28	; 61
     af4:	de bf       	out	0x3e, r29	; 62
     af6:	df 91       	pop	r29
     af8:	cf 91       	pop	r28
     afa:	1f 91       	pop	r17
     afc:	0f 91       	pop	r16
     afe:	ff 90       	pop	r15
     b00:	ef 90       	pop	r14
     b02:	df 90       	pop	r13
     b04:	cf 90       	pop	r12
     b06:	bf 90       	pop	r11
     b08:	af 90       	pop	r10
     b0a:	9f 90       	pop	r9
     b0c:	08 95       	ret

00000b0e <draw_one_pixel_line>:
     b0e:	af 92       	push	r10
     b10:	cf 92       	push	r12
     b12:	ef 92       	push	r14
     b14:	0f 93       	push	r16
     b16:	1f 93       	push	r17
     b18:	cf 93       	push	r28
     b1a:	df 93       	push	r29
     b1c:	1f 92       	push	r1
     b1e:	cd b7       	in	r28, 0x3d	; 61
     b20:	de b7       	in	r29, 0x3e	; 62
     b22:	3c e7       	ldi	r19, 0x7C	; 124
     b24:	39 83       	std	Y+1, r19	; 0x01
     b26:	ae 2c       	mov	r10, r14
     b28:	c0 2e       	mov	r12, r16
     b2a:	e2 2e       	mov	r14, r18
     b2c:	8b 01       	movw	r16, r22
     b2e:	9c 01       	movw	r18, r24
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	ce 01       	movw	r24, r28
     b34:	01 96       	adiw	r24, 0x01	; 1
     b36:	0e 94 2a 04 	call	0x854	; 0x854 <draw_text>
     b3a:	0f 90       	pop	r0
     b3c:	df 91       	pop	r29
     b3e:	cf 91       	pop	r28
     b40:	1f 91       	pop	r17
     b42:	0f 91       	pop	r16
     b44:	ef 90       	pop	r14
     b46:	cf 90       	pop	r12
     b48:	af 90       	pop	r10
     b4a:	08 95       	ret

00000b4c <draw_gauge>:
/*
Draws the part of the gauge with all the repetitive graduation lines
*/

void draw_gauge(int start_x, int y, int width) 
{
     b4c:	2f 92       	push	r2
     b4e:	3f 92       	push	r3
     b50:	4f 92       	push	r4
     b52:	5f 92       	push	r5
     b54:	6f 92       	push	r6
     b56:	7f 92       	push	r7
     b58:	8f 92       	push	r8
     b5a:	9f 92       	push	r9
     b5c:	af 92       	push	r10
     b5e:	bf 92       	push	r11
     b60:	cf 92       	push	r12
     b62:	df 92       	push	r13
     b64:	ef 92       	push	r14
     b66:	ff 92       	push	r15
     b68:	0f 93       	push	r16
     b6a:	1f 93       	push	r17
     b6c:	cf 93       	push	r28
     b6e:	df 93       	push	r29
     b70:	eb 01       	movw	r28, r22
	int start = 35;
	int cnt = 0;
	for(int i = start; i <= 325-start; i += 5)
     b72:	23 e2       	ldi	r18, 0x23	; 35
     b74:	c2 2e       	mov	r12, r18
     b76:	d1 2c       	mov	r13, r1
*/

void draw_gauge(int start_x, int y, int width) 
{
	int start = 35;
	int cnt = 0;
     b78:	a1 2c       	mov	r10, r1
     b7a:	b1 2c       	mov	r11, r1
	for(int i = start; i <= 325-start; i += 5)
	{
		if((i-start) % 25 == 0)
		{
			draw_one_pixel_line(i+cnt-1, y-1, 23, 0, 0, 0); //draws larger graduation line
     b7c:	1b 01       	movw	r2, r22
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	28 1a       	sub	r2, r24
     b82:	31 08       	sbc	r3, r1
			++cnt;
			if((i-start)%50 == 0)
     b84:	32 e3       	ldi	r19, 0x32	; 50
     b86:	43 2e       	mov	r4, r19
     b88:	51 2c       	mov	r5, r1
     b8a:	cb 01       	movw	r24, r22
     b8c:	42 96       	adiw	r24, 0x12	; 18
     b8e:	4c 01       	movw	r8, r24
     b90:	36 01       	movw	r6, r12
     b92:	93 e2       	ldi	r25, 0x23	; 35
     b94:	69 1a       	sub	r6, r25
     b96:	71 08       	sbc	r7, r1
{
	int start = 35;
	int cnt = 0;
	for(int i = start; i <= 325-start; i += 5)
	{
		if((i-start) % 25 == 0)
     b98:	c3 01       	movw	r24, r6
     b9a:	69 e1       	ldi	r22, 0x19	; 25
     b9c:	70 e0       	ldi	r23, 0x00	; 0
     b9e:	0e 94 e8 37 	call	0x6fd0	; 0x6fd0 <__divmodhi4>
     ba2:	9c 01       	movw	r18, r24
     ba4:	c5 01       	movw	r24, r10
     ba6:	8c 0d       	add	r24, r12
     ba8:	9d 1d       	adc	r25, r13
		{
			draw_one_pixel_line(i+cnt-1, y-1, 23, 0, 0, 0); //draws larger graduation line
     baa:	e1 2c       	mov	r14, r1
     bac:	00 e0       	ldi	r16, 0x00	; 0
{
	int start = 35;
	int cnt = 0;
	for(int i = start; i <= 325-start; i += 5)
	{
		if((i-start) % 25 == 0)
     bae:	23 2b       	or	r18, r19
     bb0:	89 f5       	brne	.+98     	; 0xc14 <draw_gauge+0xc8>
		{
			draw_one_pixel_line(i+cnt-1, y-1, 23, 0, 0, 0); //draws larger graduation line
     bb2:	20 e0       	ldi	r18, 0x00	; 0
     bb4:	47 e1       	ldi	r20, 0x17	; 23
     bb6:	b1 01       	movw	r22, r2
     bb8:	01 97       	sbiw	r24, 0x01	; 1
     bba:	0e 94 87 05 	call	0xb0e	; 0xb0e <draw_one_pixel_line>
			++cnt;
     bbe:	8f ef       	ldi	r24, 0xFF	; 255
     bc0:	a8 1a       	sub	r10, r24
     bc2:	b8 0a       	sbc	r11, r24
			if((i-start)%50 == 0)
     bc4:	c3 01       	movw	r24, r6
     bc6:	b2 01       	movw	r22, r4
     bc8:	0e 94 e8 37 	call	0x6fd0	; 0x6fd0 <__divmodhi4>
     bcc:	89 2b       	or	r24, r25
     bce:	41 f5       	brne	.+80     	; 0xc20 <draw_gauge+0xd4>
			{
				char* text = int_to_char_array((i-start)/5);
     bd0:	c3 01       	movw	r24, r6
     bd2:	65 e0       	ldi	r22, 0x05	; 5
     bd4:	70 e0       	ldi	r23, 0x00	; 0
     bd6:	0e 94 e8 37 	call	0x6fd0	; 0x6fd0 <__divmodhi4>
     bda:	8b 01       	movw	r16, r22
     bdc:	cb 01       	movw	r24, r22
     bde:	0e 94 c1 04 	call	0x982	; 0x982 <int_to_char_array>
     be2:	7c 01       	movw	r14, r24
				int numDigits = number_of_digits((i-start)/5);
     be4:	c8 01       	movw	r24, r16
     be6:	0e 94 10 05 	call	0xa20	; 0xa20 <number_of_digits>
				
				if(numDigits < 2)//for single digits
				{ 
					cmd_text(i-3, y+18, 21, 0, text);
     bea:	87 01       	movw	r16, r14
     bec:	20 e0       	ldi	r18, 0x00	; 0
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	45 e1       	ldi	r20, 0x15	; 21
     bf2:	50 e0       	ldi	r21, 0x00	; 0
     bf4:	b4 01       	movw	r22, r8
			if((i-start)%50 == 0)
			{
				char* text = int_to_char_array((i-start)/5);
				int numDigits = number_of_digits((i-start)/5);
				
				if(numDigits < 2)//for single digits
     bf6:	02 97       	sbiw	r24, 0x02	; 2
     bf8:	1c f4       	brge	.+6      	; 0xc00 <draw_gauge+0xb4>
				{ 
					cmd_text(i-3, y+18, 21, 0, text);
     bfa:	c6 01       	movw	r24, r12
     bfc:	03 97       	sbiw	r24, 0x03	; 3
     bfe:	04 c0       	rjmp	.+8      	; 0xc08 <draw_gauge+0xbc>
				}
				else if(i-start < 300)//for double digits
				{ 
					cmd_text(i-9+cnt, y+18, 21, 0, text);
     c00:	c6 01       	movw	r24, r12
     c02:	09 97       	sbiw	r24, 0x09	; 9
     c04:	8a 0d       	add	r24, r10
     c06:	9b 1d       	adc	r25, r11
     c08:	0e 94 6f 03 	call	0x6de	; 0x6de <cmd_text>
					
				}
				free(text);
     c0c:	c7 01       	movw	r24, r14
     c0e:	0e 94 5b 39 	call	0x72b6	; 0x72b6 <free>
     c12:	06 c0       	rjmp	.+12     	; 0xc20 <draw_gauge+0xd4>
			}
			continue;
		}
		draw_one_pixel_line(i+cnt-1, y, 20, 0, 0, 0); //draws small graduation line
     c14:	20 e0       	ldi	r18, 0x00	; 0
     c16:	44 e1       	ldi	r20, 0x14	; 20
     c18:	be 01       	movw	r22, r28
     c1a:	01 97       	sbiw	r24, 0x01	; 1
     c1c:	0e 94 87 05 	call	0xb0e	; 0xb0e <draw_one_pixel_line>

void draw_gauge(int start_x, int y, int width) 
{
	int start = 35;
	int cnt = 0;
	for(int i = start; i <= 325-start; i += 5)
     c20:	95 e0       	ldi	r25, 0x05	; 5
     c22:	c9 0e       	add	r12, r25
     c24:	d1 1c       	adc	r13, r1
     c26:	87 e2       	ldi	r24, 0x27	; 39
     c28:	c8 16       	cp	r12, r24
     c2a:	81 e0       	ldi	r24, 0x01	; 1
     c2c:	d8 06       	cpc	r13, r24
     c2e:	09 f0       	breq	.+2      	; 0xc32 <draw_gauge+0xe6>
     c30:	af cf       	rjmp	.-162    	; 0xb90 <draw_gauge+0x44>
     c32:	83 e2       	ldi	r24, 0x23	; 35
     c34:	c8 2e       	mov	r12, r24
     c36:	d1 2c       	mov	r13, r1
     c38:	a1 2c       	mov	r10, r1
     c3a:	b1 2c       	mov	r11, r1
	cnt = 0;
	y+= 15;
	
	for(int i = start; i <= 325-start; i += 5)
	{
		if((i-start) % 25 == 0)
     c3c:	99 e1       	ldi	r25, 0x19	; 25
     c3e:	89 2e       	mov	r8, r25
     c40:	91 2c       	mov	r9, r1
		{
			draw_one_pixel_line(i+cnt-1, y+16, 23, 0, 0, 0); //draws larger graduation line
			++cnt;
			continue;
		}
		draw_one_pixel_line(i+cnt-1, y+25, 20, 0, 0, 0); //draws small graduation line
     c42:	3e 01       	movw	r6, r28
     c44:	98 e2       	ldi	r25, 0x28	; 40
     c46:	69 0e       	add	r6, r25
     c48:	71 1c       	adc	r7, r1
	
	for(int i = start; i <= 325-start; i += 5)
	{
		if((i-start) % 25 == 0)
		{
			draw_one_pixel_line(i+cnt-1, y+16, 23, 0, 0, 0); //draws larger graduation line
     c4a:	6f 96       	adiw	r28, 0x1f	; 31
	cnt = 0;
	y+= 15;
	
	for(int i = start; i <= 325-start; i += 5)
	{
		if((i-start) % 25 == 0)
     c4c:	c6 01       	movw	r24, r12
     c4e:	83 97       	sbiw	r24, 0x23	; 35
     c50:	b4 01       	movw	r22, r8
     c52:	0e 94 e8 37 	call	0x6fd0	; 0x6fd0 <__divmodhi4>
     c56:	9c 01       	movw	r18, r24
     c58:	c5 01       	movw	r24, r10
     c5a:	8c 0d       	add	r24, r12
     c5c:	9d 1d       	adc	r25, r13
		{
			draw_one_pixel_line(i+cnt-1, y+16, 23, 0, 0, 0); //draws larger graduation line
     c5e:	e1 2c       	mov	r14, r1
     c60:	00 e0       	ldi	r16, 0x00	; 0
	cnt = 0;
	y+= 15;
	
	for(int i = start; i <= 325-start; i += 5)
	{
		if((i-start) % 25 == 0)
     c62:	23 2b       	or	r18, r19
     c64:	51 f4       	brne	.+20     	; 0xc7a <draw_gauge+0x12e>
		{
			draw_one_pixel_line(i+cnt-1, y+16, 23, 0, 0, 0); //draws larger graduation line
     c66:	20 e0       	ldi	r18, 0x00	; 0
     c68:	47 e1       	ldi	r20, 0x17	; 23
     c6a:	be 01       	movw	r22, r28
     c6c:	01 97       	sbiw	r24, 0x01	; 1
     c6e:	0e 94 87 05 	call	0xb0e	; 0xb0e <draw_one_pixel_line>
			++cnt;
     c72:	8f ef       	ldi	r24, 0xFF	; 255
     c74:	a8 1a       	sub	r10, r24
     c76:	b8 0a       	sbc	r11, r24
			continue;
     c78:	06 c0       	rjmp	.+12     	; 0xc86 <draw_gauge+0x13a>
		}
		draw_one_pixel_line(i+cnt-1, y+25, 20, 0, 0, 0); //draws small graduation line
     c7a:	20 e0       	ldi	r18, 0x00	; 0
     c7c:	44 e1       	ldi	r20, 0x14	; 20
     c7e:	b3 01       	movw	r22, r6
     c80:	01 97       	sbiw	r24, 0x01	; 1
     c82:	0e 94 87 05 	call	0xb0e	; 0xb0e <draw_one_pixel_line>
	
	start = 35;
	cnt = 0;
	y+= 15;
	
	for(int i = start; i <= 325-start; i += 5)
     c86:	95 e0       	ldi	r25, 0x05	; 5
     c88:	c9 0e       	add	r12, r25
     c8a:	d1 1c       	adc	r13, r1
     c8c:	87 e2       	ldi	r24, 0x27	; 39
     c8e:	c8 16       	cp	r12, r24
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	d8 06       	cpc	r13, r24
     c94:	d9 f6       	brne	.-74     	; 0xc4c <draw_gauge+0x100>
			++cnt;
			continue;
		}
		draw_one_pixel_line(i+cnt-1, y+25, 20, 0, 0, 0); //draws small graduation line
	}
}
     c96:	df 91       	pop	r29
     c98:	cf 91       	pop	r28
     c9a:	1f 91       	pop	r17
     c9c:	0f 91       	pop	r16
     c9e:	ff 90       	pop	r15
     ca0:	ef 90       	pop	r14
     ca2:	df 90       	pop	r13
     ca4:	cf 90       	pop	r12
     ca6:	bf 90       	pop	r11
     ca8:	af 90       	pop	r10
     caa:	9f 90       	pop	r9
     cac:	8f 90       	pop	r8
     cae:	7f 90       	pop	r7
     cb0:	6f 90       	pop	r6
     cb2:	5f 90       	pop	r5
     cb4:	4f 90       	pop	r4
     cb6:	3f 90       	pop	r3
     cb8:	2f 90       	pop	r2
     cba:	08 95       	ret

00000cbc <draw_gauge_and_partial_snapshot>:
/*
Draws the part of the gauge with all the repetitive graduation lines, then takes a snapshot of that gauge and stores in RAM_G. This can then be called as a bitmap.
This way, we don't have to keep re-writing the whole gauge every single time
*/
void draw_gauge_and_partial_snapshot(int start_x, int y, int width)
{
     cbc:	cf 92       	push	r12
     cbe:	df 92       	push	r13
     cc0:	ef 92       	push	r14
     cc2:	ff 92       	push	r15
     cc4:	0f 93       	push	r16
     cc6:	1f 93       	push	r17
     cc8:	cf 93       	push	r28
     cca:	df 93       	push	r29
     ccc:	8c 01       	movw	r16, r24
     cce:	7b 01       	movw	r14, r22
     cd0:	6a 01       	movw	r12, r20
     cd2:	c5 e0       	ldi	r28, 0x05	; 5
     cd4:	d0 e0       	ldi	r29, 0x00	; 0
	for(int i = 0; i < 5; ++i)
	{
		//**************************************************
		wdt_reset(); // WATCH DOG TIMER RESET
     cd6:	a8 95       	wdr
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     cd8:	2f ef       	ldi	r18, 0xFF	; 255
     cda:	80 e7       	ldi	r24, 0x70	; 112
     cdc:	92 e0       	ldi	r25, 0x02	; 2
     cde:	21 50       	subi	r18, 0x01	; 1
     ce0:	80 40       	sbci	r24, 0x00	; 0
     ce2:	90 40       	sbci	r25, 0x00	; 0
     ce4:	e1 f7       	brne	.-8      	; 0xcde <draw_gauge_and_partial_snapshot+0x22>
     ce6:	00 c0       	rjmp	.+0      	; 0xce8 <draw_gauge_and_partial_snapshot+0x2c>
     ce8:	00 00       	nop
		//**************************************************
		_delay_ms(40);
		cmd(CMD_DLSTART);
     cea:	60 e0       	ldi	r22, 0x00	; 0
     cec:	7f ef       	ldi	r23, 0xFF	; 255
     cee:	8f ef       	ldi	r24, 0xFF	; 255
     cf0:	9f ef       	ldi	r25, 0xFF	; 255
     cf2:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
		cmd(CLEAR_COLOR_RGB(220, 230, 230));
     cf6:	6c ed       	ldi	r22, 0xDC	; 220
     cf8:	76 ee       	ldi	r23, 0xE6	; 230
     cfa:	86 ee       	ldi	r24, 0xE6	; 230
     cfc:	92 e0       	ldi	r25, 0x02	; 2
     cfe:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
		cmd(CLEAR(1, 1, 1)); // clear screen
     d02:	67 e0       	ldi	r22, 0x07	; 7
     d04:	70 e0       	ldi	r23, 0x00	; 0
     d06:	80 e0       	ldi	r24, 0x00	; 0
     d08:	96 e2       	ldi	r25, 0x26	; 38
     d0a:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
		
		
		draw_gauge(start_x, y, width);
     d0e:	a6 01       	movw	r20, r12
     d10:	b7 01       	movw	r22, r14
     d12:	c8 01       	movw	r24, r16
     d14:	0e 94 a6 05 	call	0xb4c	; 0xb4c <draw_gauge>
		
		cmd(DISPLAY()); // display the image
     d18:	60 e0       	ldi	r22, 0x00	; 0
     d1a:	70 e0       	ldi	r23, 0x00	; 0
     d1c:	cb 01       	movw	r24, r22
     d1e:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
		cmd(CMD_SWAP);
     d22:	61 e0       	ldi	r22, 0x01	; 1
     d24:	7f ef       	ldi	r23, 0xFF	; 255
     d26:	8f ef       	ldi	r24, 0xFF	; 255
     d28:	9f ef       	ldi	r25, 0xFF	; 255
     d2a:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
     d2e:	2f e3       	ldi	r18, 0x3F	; 63
     d30:	8d e0       	ldi	r24, 0x0D	; 13
     d32:	93 e0       	ldi	r25, 0x03	; 3
     d34:	21 50       	subi	r18, 0x01	; 1
     d36:	80 40       	sbci	r24, 0x00	; 0
     d38:	90 40       	sbci	r25, 0x00	; 0
     d3a:	e1 f7       	brne	.-8      	; 0xd34 <draw_gauge_and_partial_snapshot+0x78>
     d3c:	00 c0       	rjmp	.+0      	; 0xd3e <draw_gauge_and_partial_snapshot+0x82>
     d3e:	00 00       	nop
		
		_delay_ms(50);
		
		cmd(SNAPSHOT2());
     d40:	67 e3       	ldi	r22, 0x37	; 55
     d42:	7f ef       	ldi	r23, 0xFF	; 255
     d44:	8f ef       	ldi	r24, 0xFF	; 255
     d46:	9f ef       	ldi	r25, 0xFF	; 255
     d48:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
		cmd(6); //format
     d4c:	66 e0       	ldi	r22, 0x06	; 6
     d4e:	70 e0       	ldi	r23, 0x00	; 0
     d50:	80 e0       	ldi	r24, 0x00	; 0
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
		cmd(0); //RAM_G ptr
     d58:	60 e0       	ldi	r22, 0x00	; 0
     d5a:	70 e0       	ldi	r23, 0x00	; 0
     d5c:	cb 01       	movw	r24, r22
     d5e:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
		cmd_2(30); //top left x
     d62:	8e e1       	ldi	r24, 0x1E	; 30
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	0e 94 3b 03 	call	0x676	; 0x676 <cmd_2>
		cmd_2(5); //top left y
     d6a:	85 e0       	ldi	r24, 0x05	; 5
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	0e 94 3b 03 	call	0x676	; 0x676 <cmd_2>
		cmd_2(280); //width
     d72:	88 e1       	ldi	r24, 0x18	; 24
     d74:	91 e0       	ldi	r25, 0x01	; 1
     d76:	0e 94 3b 03 	call	0x676	; 0x676 <cmd_2>
		cmd_2(80); //height
     d7a:	80 e5       	ldi	r24, 0x50	; 80
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	0e 94 3b 03 	call	0x676	; 0x676 <cmd_2>
     d82:	21 97       	sbiw	r28, 0x01	; 1
Draws the part of the gauge with all the repetitive graduation lines, then takes a snapshot of that gauge and stores in RAM_G. This can then be called as a bitmap.
This way, we don't have to keep re-writing the whole gauge every single time
*/
void draw_gauge_and_partial_snapshot(int start_x, int y, int width)
{
	for(int i = 0; i < 5; ++i)
     d84:	09 f0       	breq	.+2      	; 0xd88 <draw_gauge_and_partial_snapshot+0xcc>
     d86:	a7 cf       	rjmp	.-178    	; 0xcd6 <draw_gauge_and_partial_snapshot+0x1a>
		cmd_2(5); //top left y
		cmd_2(280); //width
		cmd_2(80); //height
		
	}
}
     d88:	df 91       	pop	r29
     d8a:	cf 91       	pop	r28
     d8c:	1f 91       	pop	r17
     d8e:	0f 91       	pop	r16
     d90:	ff 90       	pop	r15
     d92:	ef 90       	pop	r14
     d94:	df 90       	pop	r13
     d96:	cf 90       	pop	r12
     d98:	08 95       	ret

00000d9a <draw_settings_page>:



void draw_settings_page(ProgramState *program_state, OutputState *output_one) 
{
     d9a:	4f 92       	push	r4
     d9c:	5f 92       	push	r5
     d9e:	6f 92       	push	r6
     da0:	7f 92       	push	r7
     da2:	8f 92       	push	r8
     da4:	9f 92       	push	r9
     da6:	af 92       	push	r10
     da8:	bf 92       	push	r11
     daa:	cf 92       	push	r12
     dac:	df 92       	push	r13
     dae:	ef 92       	push	r14
     db0:	ff 92       	push	r15
     db2:	0f 93       	push	r16
     db4:	1f 93       	push	r17
     db6:	cf 93       	push	r28
     db8:	df 93       	push	r29
     dba:	cd b7       	in	r28, 0x3d	; 61
     dbc:	de b7       	in	r29, 0x3e	; 62
     dbe:	ec 97       	sbiw	r28, 0x3c	; 60
     dc0:	cd bf       	out	0x3d, r28	; 61
     dc2:	de bf       	out	0x3e, r29	; 62
     dc4:	7c 01       	movw	r14, r24
	if (program_state->testing_mode)
     dc6:	dc 01       	movw	r26, r24
     dc8:	9e 96       	adiw	r26, 0x2e	; 46
     dca:	8c 91       	ld	r24, X
     dcc:	88 23       	and	r24, r24
     dce:	09 f4       	brne	.+2      	; 0xdd2 <draw_settings_page+0x38>
     dd0:	5c c1       	rjmp	.+696    	; 0x108a <draw_settings_page+0x2f0>
	{
		cmd( BEGIN(RECTS) );
     dd2:	69 e0       	ldi	r22, 0x09	; 9
     dd4:	70 e0       	ldi	r23, 0x00	; 0
     dd6:	80 e0       	ldi	r24, 0x00	; 0
     dd8:	9f e1       	ldi	r25, 0x1F	; 31
     dda:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
		cmd(COLOR_RGB(0, 0, 255)); //draw outer boundary
     dde:	60 e0       	ldi	r22, 0x00	; 0
     de0:	70 e0       	ldi	r23, 0x00	; 0
     de2:	8f ef       	ldi	r24, 0xFF	; 255
     de4:	94 e0       	ldi	r25, 0x04	; 4
     de6:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
		cmd( LINE_WIDTH(200) );
     dea:	68 ec       	ldi	r22, 0xC8	; 200
     dec:	70 e0       	ldi	r23, 0x00	; 0
     dee:	80 e0       	ldi	r24, 0x00	; 0
     df0:	9e e0       	ldi	r25, 0x0E	; 14
     df2:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
		cmd( VERTEX2F(16 * 15, 16 * (15)) );
     df6:	60 ef       	ldi	r22, 0xF0	; 240
     df8:	70 e0       	ldi	r23, 0x00	; 0
     dfa:	88 e7       	ldi	r24, 0x78	; 120
     dfc:	90 e4       	ldi	r25, 0x40	; 64
     dfe:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
		cmd( VERTEX2F(16 * 305, 16 * (27)) );
     e02:	60 eb       	ldi	r22, 0xB0	; 176
     e04:	71 e0       	ldi	r23, 0x01	; 1
     e06:	88 e8       	ldi	r24, 0x88	; 136
     e08:	99 e4       	ldi	r25, 0x49	; 73
     e0a:	0e 94 01 03 	call	0x602	; 0x602 <cmd>

		if(program_state->settings_row_num == 0)
     e0e:	f7 01       	movw	r30, r14
     e10:	83 8d       	ldd	r24, Z+27	; 0x1b
     e12:	81 11       	cpse	r24, r1
     e14:	17 c0       	rjmp	.+46     	; 0xe44 <draw_settings_page+0xaa>
		{
			cmd(COLOR_RGB(255, 255, 255)); //draw inner boundary
     e16:	6f ef       	ldi	r22, 0xFF	; 255
     e18:	7f ef       	ldi	r23, 0xFF	; 255
     e1a:	8f ef       	ldi	r24, 0xFF	; 255
     e1c:	94 e0       	ldi	r25, 0x04	; 4
     e1e:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
			cmd( VERTEX2F(16 * 17, 16 * (17)) );
     e22:	60 e1       	ldi	r22, 0x10	; 16
     e24:	71 e0       	ldi	r23, 0x01	; 1
     e26:	88 e8       	ldi	r24, 0x88	; 136
     e28:	90 e4       	ldi	r25, 0x40	; 64
     e2a:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
			cmd( VERTEX2F(16 * 303, 16 * (25)) );
     e2e:	60 e9       	ldi	r22, 0x90	; 144
     e30:	71 e0       	ldi	r23, 0x01	; 1
     e32:	88 e7       	ldi	r24, 0x78	; 120
     e34:	99 e4       	ldi	r25, 0x49	; 73
     e36:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
			
			cmd(COLOR_RGB(0, 0, 255));
     e3a:	60 e0       	ldi	r22, 0x00	; 0
     e3c:	70 e0       	ldi	r23, 0x00	; 0
     e3e:	8f ef       	ldi	r24, 0xFF	; 255
     e40:	94 e0       	ldi	r25, 0x04	; 4
     e42:	16 c0       	rjmp	.+44     	; 0xe70 <draw_settings_page+0xd6>
		}
		else
		{
			cmd(COLOR_RGB(255, 255, 255)); //draw inner boundary
     e44:	6f ef       	ldi	r22, 0xFF	; 255
     e46:	7f ef       	ldi	r23, 0xFF	; 255
     e48:	8f ef       	ldi	r24, 0xFF	; 255
     e4a:	94 e0       	ldi	r25, 0x04	; 4
     e4c:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
			cmd( VERTEX2F(16 * 15, 16 * (15)) );
     e50:	60 ef       	ldi	r22, 0xF0	; 240
     e52:	70 e0       	ldi	r23, 0x00	; 0
     e54:	88 e7       	ldi	r24, 0x78	; 120
     e56:	90 e4       	ldi	r25, 0x40	; 64
     e58:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
			cmd( VERTEX2F(16 * 305, 16 * (27)) );
     e5c:	60 eb       	ldi	r22, 0xB0	; 176
     e5e:	71 e0       	ldi	r23, 0x01	; 1
     e60:	88 e8       	ldi	r24, 0x88	; 136
     e62:	99 e4       	ldi	r25, 0x49	; 73
     e64:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
			
			cmd(COLOR_RGB(0, 0, 0));
     e68:	60 e0       	ldi	r22, 0x00	; 0
     e6a:	70 e0       	ldi	r23, 0x00	; 0
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	94 e0       	ldi	r25, 0x04	; 4
     e70:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
		}
		cmd_text(80, 10, 26, 0, "TEMPERATURE VALUE:");
     e74:	0a e1       	ldi	r16, 0x1A	; 26
     e76:	10 e2       	ldi	r17, 0x20	; 32
     e78:	20 e0       	ldi	r18, 0x00	; 0
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	4a e1       	ldi	r20, 0x1A	; 26
     e7e:	50 e0       	ldi	r21, 0x00	; 0
     e80:	6a e0       	ldi	r22, 0x0A	; 10
     e82:	70 e0       	ldi	r23, 0x00	; 0
     e84:	80 e5       	ldi	r24, 0x50	; 80
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	0e 94 6f 03 	call	0x6de	; 0x6de <cmd_text>
		cmd_text(35, 20, 22, 0, "lower value - higher temperature cap"); 
     e8c:	0d e2       	ldi	r16, 0x2D	; 45
     e8e:	10 e2       	ldi	r17, 0x20	; 32
     e90:	20 e0       	ldi	r18, 0x00	; 0
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	46 e1       	ldi	r20, 0x16	; 22
     e96:	50 e0       	ldi	r21, 0x00	; 0
     e98:	64 e1       	ldi	r22, 0x14	; 20
     e9a:	70 e0       	ldi	r23, 0x00	; 0
     e9c:	83 e2       	ldi	r24, 0x23	; 35
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	0e 94 6f 03 	call	0x6de	; 0x6de <cmd_text>
		cmd_text(235, 10, 26, 0, int_to_char_array(OVER_TEMP_VALUE)); 
     ea4:	80 91 19 24 	lds	r24, 0x2419	; 0x802419 <OVER_TEMP_VALUE>
     ea8:	90 91 1a 24 	lds	r25, 0x241A	; 0x80241a <OVER_TEMP_VALUE+0x1>
     eac:	0e 94 c1 04 	call	0x982	; 0x982 <int_to_char_array>
     eb0:	8c 01       	movw	r16, r24
     eb2:	20 e0       	ldi	r18, 0x00	; 0
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	4a e1       	ldi	r20, 0x1A	; 26
     eb8:	50 e0       	ldi	r21, 0x00	; 0
     eba:	6a e0       	ldi	r22, 0x0A	; 10
     ebc:	70 e0       	ldi	r23, 0x00	; 0
     ebe:	8b ee       	ldi	r24, 0xEB	; 235
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	0e 94 6f 03 	call	0x6de	; 0x6de <cmd_text>
		
		cmd( BEGIN(RECTS) );
     ec6:	69 e0       	ldi	r22, 0x09	; 9
     ec8:	70 e0       	ldi	r23, 0x00	; 0
     eca:	80 e0       	ldi	r24, 0x00	; 0
     ecc:	9f e1       	ldi	r25, 0x1F	; 31
     ece:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
		cmd(COLOR_RGB(0, 0, 255)); //draw outer boundary
     ed2:	60 e0       	ldi	r22, 0x00	; 0
     ed4:	70 e0       	ldi	r23, 0x00	; 0
     ed6:	8f ef       	ldi	r24, 0xFF	; 255
     ed8:	94 e0       	ldi	r25, 0x04	; 4
     eda:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
		cmd( LINE_WIDTH(200) );
     ede:	68 ec       	ldi	r22, 0xC8	; 200
     ee0:	70 e0       	ldi	r23, 0x00	; 0
     ee2:	80 e0       	ldi	r24, 0x00	; 0
     ee4:	9e e0       	ldi	r25, 0x0E	; 14
     ee6:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
		cmd( VERTEX2F(16 * 15, 16 * (55)) );
     eea:	60 e7       	ldi	r22, 0x70	; 112
     eec:	73 e0       	ldi	r23, 0x03	; 3
     eee:	88 e7       	ldi	r24, 0x78	; 120
     ef0:	90 e4       	ldi	r25, 0x40	; 64
     ef2:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
		cmd( VERTEX2F(16 * 305, 16 * (67)) );
     ef6:	60 e3       	ldi	r22, 0x30	; 48
     ef8:	74 e0       	ldi	r23, 0x04	; 4
     efa:	88 e8       	ldi	r24, 0x88	; 136
     efc:	99 e4       	ldi	r25, 0x49	; 73
     efe:	0e 94 01 03 	call	0x602	; 0x602 <cmd>

		if(program_state->settings_row_num == 1)
     f02:	d7 01       	movw	r26, r14
     f04:	5b 96       	adiw	r26, 0x1b	; 27
     f06:	8c 91       	ld	r24, X
     f08:	81 30       	cpi	r24, 0x01	; 1
     f0a:	b9 f4       	brne	.+46     	; 0xf3a <draw_settings_page+0x1a0>
		{
			cmd(COLOR_RGB(255, 255, 255)); //draw inner boundary
     f0c:	6f ef       	ldi	r22, 0xFF	; 255
     f0e:	7f ef       	ldi	r23, 0xFF	; 255
     f10:	8f ef       	ldi	r24, 0xFF	; 255
     f12:	94 e0       	ldi	r25, 0x04	; 4
     f14:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
			cmd( VERTEX2F(16 * 17, 16 * (57)) );
     f18:	60 e9       	ldi	r22, 0x90	; 144
     f1a:	73 e0       	ldi	r23, 0x03	; 3
     f1c:	88 e8       	ldi	r24, 0x88	; 136
     f1e:	90 e4       	ldi	r25, 0x40	; 64
     f20:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
			cmd( VERTEX2F(16 * 303, 16 * (65)) );
     f24:	60 e1       	ldi	r22, 0x10	; 16
     f26:	74 e0       	ldi	r23, 0x04	; 4
     f28:	88 e7       	ldi	r24, 0x78	; 120
     f2a:	99 e4       	ldi	r25, 0x49	; 73
     f2c:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
			
			cmd(COLOR_RGB(0, 0, 255));
     f30:	60 e0       	ldi	r22, 0x00	; 0
     f32:	70 e0       	ldi	r23, 0x00	; 0
     f34:	8f ef       	ldi	r24, 0xFF	; 255
     f36:	94 e0       	ldi	r25, 0x04	; 4
     f38:	16 c0       	rjmp	.+44     	; 0xf66 <draw_settings_page+0x1cc>
		}
		else
		{
			cmd(COLOR_RGB(255, 255, 255)); //draw inner boundary
     f3a:	6f ef       	ldi	r22, 0xFF	; 255
     f3c:	7f ef       	ldi	r23, 0xFF	; 255
     f3e:	8f ef       	ldi	r24, 0xFF	; 255
     f40:	94 e0       	ldi	r25, 0x04	; 4
     f42:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
			cmd( VERTEX2F(16 * 15, 16 * (55)) );
     f46:	60 e7       	ldi	r22, 0x70	; 112
     f48:	73 e0       	ldi	r23, 0x03	; 3
     f4a:	88 e7       	ldi	r24, 0x78	; 120
     f4c:	90 e4       	ldi	r25, 0x40	; 64
     f4e:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
			cmd( VERTEX2F(16 * 305, 16 * (67)) );
     f52:	60 e3       	ldi	r22, 0x30	; 48
     f54:	74 e0       	ldi	r23, 0x04	; 4
     f56:	88 e8       	ldi	r24, 0x88	; 136
     f58:	99 e4       	ldi	r25, 0x49	; 73
     f5a:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
			
			cmd(COLOR_RGB(0, 0, 0));
     f5e:	60 e0       	ldi	r22, 0x00	; 0
     f60:	70 e0       	ldi	r23, 0x00	; 0
     f62:	80 e0       	ldi	r24, 0x00	; 0
     f64:	94 e0       	ldi	r25, 0x04	; 4
     f66:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
		}
		cmd_text(75, 55, 26, 0, "TIME TO CHECK TEMP:");
     f6a:	02 e5       	ldi	r16, 0x52	; 82
     f6c:	10 e2       	ldi	r17, 0x20	; 32
     f6e:	20 e0       	ldi	r18, 0x00	; 0
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	4a e1       	ldi	r20, 0x1A	; 26
     f74:	50 e0       	ldi	r21, 0x00	; 0
     f76:	67 e3       	ldi	r22, 0x37	; 55
     f78:	70 e0       	ldi	r23, 0x00	; 0
     f7a:	8b e4       	ldi	r24, 0x4B	; 75
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	0e 94 6f 03 	call	0x6de	; 0x6de <cmd_text>
		cmd_text(235, 55, 26, 0, int_to_char_array(TIME_TO_CHECK_TEMP / 1000));
     f82:	60 91 1d 24 	lds	r22, 0x241D	; 0x80241d <TIME_TO_CHECK_TEMP>
     f86:	70 91 1e 24 	lds	r23, 0x241E	; 0x80241e <TIME_TO_CHECK_TEMP+0x1>
     f8a:	80 91 1f 24 	lds	r24, 0x241F	; 0x80241f <TIME_TO_CHECK_TEMP+0x2>
     f8e:	90 91 20 24 	lds	r25, 0x2420	; 0x802420 <TIME_TO_CHECK_TEMP+0x3>
     f92:	28 ee       	ldi	r18, 0xE8	; 232
     f94:	33 e0       	ldi	r19, 0x03	; 3
     f96:	40 e0       	ldi	r20, 0x00	; 0
     f98:	50 e0       	ldi	r21, 0x00	; 0
     f9a:	0e 94 1e 38 	call	0x703c	; 0x703c <__divmodsi4>
     f9e:	c9 01       	movw	r24, r18
     fa0:	0e 94 c1 04 	call	0x982	; 0x982 <int_to_char_array>
     fa4:	8c 01       	movw	r16, r24
     fa6:	20 e0       	ldi	r18, 0x00	; 0
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	4a e1       	ldi	r20, 0x1A	; 26
     fac:	50 e0       	ldi	r21, 0x00	; 0
     fae:	67 e3       	ldi	r22, 0x37	; 55
     fb0:	70 e0       	ldi	r23, 0x00	; 0
     fb2:	8b ee       	ldi	r24, 0xEB	; 235
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	0e 94 6f 03 	call	0x6de	; 0x6de <cmd_text>
		cmd_text(270, 55, 26, 0, "sec");
     fba:	06 e6       	ldi	r16, 0x66	; 102
     fbc:	10 e2       	ldi	r17, 0x20	; 32
     fbe:	20 e0       	ldi	r18, 0x00	; 0
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	4a e1       	ldi	r20, 0x1A	; 26
     fc4:	50 e0       	ldi	r21, 0x00	; 0
     fc6:	67 e3       	ldi	r22, 0x37	; 55
     fc8:	70 e0       	ldi	r23, 0x00	; 0
     fca:	8e e0       	ldi	r24, 0x0E	; 14
     fcc:	91 e0       	ldi	r25, 0x01	; 1
     fce:	0e 94 6f 03 	call	0x6de	; 0x6de <cmd_text>
		
		cmd( BEGIN(RECTS) );
     fd2:	69 e0       	ldi	r22, 0x09	; 9
     fd4:	70 e0       	ldi	r23, 0x00	; 0
     fd6:	80 e0       	ldi	r24, 0x00	; 0
     fd8:	9f e1       	ldi	r25, 0x1F	; 31
     fda:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
		cmd(COLOR_RGB(0, 0, 255)); //draw outer boundary
     fde:	60 e0       	ldi	r22, 0x00	; 0
     fe0:	70 e0       	ldi	r23, 0x00	; 0
     fe2:	8f ef       	ldi	r24, 0xFF	; 255
     fe4:	94 e0       	ldi	r25, 0x04	; 4
     fe6:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
		cmd( LINE_WIDTH(200) );
     fea:	68 ec       	ldi	r22, 0xC8	; 200
     fec:	70 e0       	ldi	r23, 0x00	; 0
     fee:	80 e0       	ldi	r24, 0x00	; 0
     ff0:	9e e0       	ldi	r25, 0x0E	; 14
     ff2:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
		cmd( VERTEX2F(16 * 15, 16 * (95)) );
     ff6:	60 ef       	ldi	r22, 0xF0	; 240
     ff8:	75 e0       	ldi	r23, 0x05	; 5
     ffa:	88 e7       	ldi	r24, 0x78	; 120
     ffc:	90 e4       	ldi	r25, 0x40	; 64
     ffe:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
		cmd( VERTEX2F(16 * 305, 16 * (107)) );
    1002:	60 eb       	ldi	r22, 0xB0	; 176
    1004:	76 e0       	ldi	r23, 0x06	; 6
    1006:	88 e8       	ldi	r24, 0x88	; 136
    1008:	99 e4       	ldi	r25, 0x49	; 73
    100a:	0e 94 01 03 	call	0x602	; 0x602 <cmd>

		if(program_state->settings_row_num == 2)
    100e:	f7 01       	movw	r30, r14
    1010:	83 8d       	ldd	r24, Z+27	; 0x1b
    1012:	82 30       	cpi	r24, 0x02	; 2
    1014:	b9 f4       	brne	.+46     	; 0x1044 <draw_settings_page+0x2aa>
		{
			cmd(COLOR_RGB(255, 255, 255)); //draw inner boundary
    1016:	6f ef       	ldi	r22, 0xFF	; 255
    1018:	7f ef       	ldi	r23, 0xFF	; 255
    101a:	8f ef       	ldi	r24, 0xFF	; 255
    101c:	94 e0       	ldi	r25, 0x04	; 4
    101e:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
			cmd( VERTEX2F(16 * 17, 16 * (97)) );
    1022:	60 e1       	ldi	r22, 0x10	; 16
    1024:	76 e0       	ldi	r23, 0x06	; 6
    1026:	88 e8       	ldi	r24, 0x88	; 136
    1028:	90 e4       	ldi	r25, 0x40	; 64
    102a:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
			cmd( VERTEX2F(16 * 303, 16 * (105)) );
    102e:	60 e9       	ldi	r22, 0x90	; 144
    1030:	76 e0       	ldi	r23, 0x06	; 6
    1032:	88 e7       	ldi	r24, 0x78	; 120
    1034:	99 e4       	ldi	r25, 0x49	; 73
    1036:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
			
			cmd(COLOR_RGB(0, 0, 255));
    103a:	60 e0       	ldi	r22, 0x00	; 0
    103c:	70 e0       	ldi	r23, 0x00	; 0
    103e:	8f ef       	ldi	r24, 0xFF	; 255
    1040:	94 e0       	ldi	r25, 0x04	; 4
    1042:	16 c0       	rjmp	.+44     	; 0x1070 <draw_settings_page+0x2d6>
		}
		else
		{
			cmd(COLOR_RGB(255, 255, 255)); //draw inner boundary
    1044:	6f ef       	ldi	r22, 0xFF	; 255
    1046:	7f ef       	ldi	r23, 0xFF	; 255
    1048:	8f ef       	ldi	r24, 0xFF	; 255
    104a:	94 e0       	ldi	r25, 0x04	; 4
    104c:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
			cmd( VERTEX2F(16 * 15, 16 * (95)) );
    1050:	60 ef       	ldi	r22, 0xF0	; 240
    1052:	75 e0       	ldi	r23, 0x05	; 5
    1054:	88 e7       	ldi	r24, 0x78	; 120
    1056:	90 e4       	ldi	r25, 0x40	; 64
    1058:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
			cmd( VERTEX2F(16 * 305, 16 * (107)) );
    105c:	60 eb       	ldi	r22, 0xB0	; 176
    105e:	76 e0       	ldi	r23, 0x06	; 6
    1060:	88 e8       	ldi	r24, 0x88	; 136
    1062:	99 e4       	ldi	r25, 0x49	; 73
    1064:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
			
			cmd(COLOR_RGB(0, 0, 0));
    1068:	60 e0       	ldi	r22, 0x00	; 0
    106a:	70 e0       	ldi	r23, 0x00	; 0
    106c:	80 e0       	ldi	r24, 0x00	; 0
    106e:	94 e0       	ldi	r25, 0x04	; 4
    1070:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
		}
		cmd_text(130, 95, 26, 0, "APPLY");
    1074:	0a e6       	ldi	r16, 0x6A	; 106
    1076:	10 e2       	ldi	r17, 0x20	; 32
    1078:	20 e0       	ldi	r18, 0x00	; 0
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	4a e1       	ldi	r20, 0x1A	; 26
    107e:	50 e0       	ldi	r21, 0x00	; 0
    1080:	6f e5       	ldi	r22, 0x5F	; 95
    1082:	70 e0       	ldi	r23, 0x00	; 0
    1084:	82 e8       	ldi	r24, 0x82	; 130
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	22 c3       	rjmp	.+1604   	; 0x16ce <draw_settings_page+0x934>
	}
	else
	{
		if (program_state->program == FOURTY_ONE || program_state->program == FOURTY_ONE_DUAL)
    108a:	d7 01       	movw	r26, r14
    108c:	14 96       	adiw	r26, 0x04	; 4
    108e:	8c 91       	ld	r24, X
    1090:	81 50       	subi	r24, 0x01	; 1
    1092:	82 30       	cpi	r24, 0x02	; 2
    1094:	08 f0       	brcs	.+2      	; 0x1098 <draw_settings_page+0x2fe>
    1096:	66 c0       	rjmp	.+204    	; 0x1164 <draw_settings_page+0x3ca>
		{
			cmd( BEGIN(RECTS) );
    1098:	69 e0       	ldi	r22, 0x09	; 9
    109a:	70 e0       	ldi	r23, 0x00	; 0
    109c:	80 e0       	ldi	r24, 0x00	; 0
    109e:	9f e1       	ldi	r25, 0x1F	; 31
    10a0:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
			cmd(COLOR_RGB(0, 0, 255)); //draw outer boundary
    10a4:	60 e0       	ldi	r22, 0x00	; 0
    10a6:	70 e0       	ldi	r23, 0x00	; 0
    10a8:	8f ef       	ldi	r24, 0xFF	; 255
    10aa:	94 e0       	ldi	r25, 0x04	; 4
    10ac:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
			cmd( LINE_WIDTH(200) );
    10b0:	68 ec       	ldi	r22, 0xC8	; 200
    10b2:	70 e0       	ldi	r23, 0x00	; 0
    10b4:	80 e0       	ldi	r24, 0x00	; 0
    10b6:	9e e0       	ldi	r25, 0x0E	; 14
    10b8:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
			cmd( VERTEX2F(16 * 15, 16 * (15)) );
    10bc:	60 ef       	ldi	r22, 0xF0	; 240
    10be:	70 e0       	ldi	r23, 0x00	; 0
    10c0:	88 e7       	ldi	r24, 0x78	; 120
    10c2:	90 e4       	ldi	r25, 0x40	; 64
    10c4:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
			cmd( VERTEX2F(16 * 305, 16 * (27)) );
    10c8:	60 eb       	ldi	r22, 0xB0	; 176
    10ca:	71 e0       	ldi	r23, 0x01	; 1
    10cc:	88 e8       	ldi	r24, 0x88	; 136
    10ce:	99 e4       	ldi	r25, 0x49	; 73
    10d0:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
	
			if(program_state->settings_row_num == 0) 
    10d4:	f7 01       	movw	r30, r14
    10d6:	83 8d       	ldd	r24, Z+27	; 0x1b
    10d8:	81 11       	cpse	r24, r1
    10da:	17 c0       	rjmp	.+46     	; 0x110a <draw_settings_page+0x370>
			{
				cmd(COLOR_RGB(255, 255, 255)); //draw inner boundary
    10dc:	6f ef       	ldi	r22, 0xFF	; 255
    10de:	7f ef       	ldi	r23, 0xFF	; 255
    10e0:	8f ef       	ldi	r24, 0xFF	; 255
    10e2:	94 e0       	ldi	r25, 0x04	; 4
    10e4:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
				cmd( VERTEX2F(16 * 17, 16 * (17)) );
    10e8:	60 e1       	ldi	r22, 0x10	; 16
    10ea:	71 e0       	ldi	r23, 0x01	; 1
    10ec:	88 e8       	ldi	r24, 0x88	; 136
    10ee:	90 e4       	ldi	r25, 0x40	; 64
    10f0:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
				cmd( VERTEX2F(16 * 303, 16 * (25)) );
    10f4:	60 e9       	ldi	r22, 0x90	; 144
    10f6:	71 e0       	ldi	r23, 0x01	; 1
    10f8:	88 e7       	ldi	r24, 0x78	; 120
    10fa:	99 e4       	ldi	r25, 0x49	; 73
    10fc:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
		
				cmd(COLOR_RGB(0, 0, 255));
    1100:	60 e0       	ldi	r22, 0x00	; 0
    1102:	70 e0       	ldi	r23, 0x00	; 0
    1104:	8f ef       	ldi	r24, 0xFF	; 255
    1106:	94 e0       	ldi	r25, 0x04	; 4
    1108:	16 c0       	rjmp	.+44     	; 0x1136 <draw_settings_page+0x39c>
			}
			else 
			{
				cmd(COLOR_RGB(255, 255, 255)); //draw inner boundary
    110a:	6f ef       	ldi	r22, 0xFF	; 255
    110c:	7f ef       	ldi	r23, 0xFF	; 255
    110e:	8f ef       	ldi	r24, 0xFF	; 255
    1110:	94 e0       	ldi	r25, 0x04	; 4
    1112:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
				cmd( VERTEX2F(16 * 15, 16 * (15)) );
    1116:	60 ef       	ldi	r22, 0xF0	; 240
    1118:	70 e0       	ldi	r23, 0x00	; 0
    111a:	88 e7       	ldi	r24, 0x78	; 120
    111c:	90 e4       	ldi	r25, 0x40	; 64
    111e:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
				cmd( VERTEX2F(16 * 305, 16 * (27)) );
    1122:	60 eb       	ldi	r22, 0xB0	; 176
    1124:	71 e0       	ldi	r23, 0x01	; 1
    1126:	88 e8       	ldi	r24, 0x88	; 136
    1128:	99 e4       	ldi	r25, 0x49	; 73
    112a:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
		
				cmd(COLOR_RGB(0, 0, 0));
    112e:	60 e0       	ldi	r22, 0x00	; 0
    1130:	70 e0       	ldi	r23, 0x00	; 0
    1132:	80 e0       	ldi	r24, 0x00	; 0
    1134:	94 e0       	ldi	r25, 0x04	; 4
    1136:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
			}
	
			cmd_text(120, 15, 26, 0, "MODE : ");
    113a:	00 e7       	ldi	r16, 0x70	; 112
    113c:	10 e2       	ldi	r17, 0x20	; 32
    113e:	20 e0       	ldi	r18, 0x00	; 0
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	4a e1       	ldi	r20, 0x1A	; 26
    1144:	50 e0       	ldi	r21, 0x00	; 0
    1146:	6f e0       	ldi	r22, 0x0F	; 15
    1148:	70 e0       	ldi	r23, 0x00	; 0
    114a:	88 e7       	ldi	r24, 0x78	; 120
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	0e 94 6f 03 	call	0x6de	; 0x6de <cmd_text>
			if (program_state->num_outputs == SINGLE) 
    1152:	d7 01       	movw	r26, r14
    1154:	8d 91       	ld	r24, X+
    1156:	9c 91       	ld	r25, X
    1158:	89 2b       	or	r24, r25
    115a:	09 f4       	brne	.+2      	; 0x115e <draw_settings_page+0x3c4>
    115c:	60 c0       	rjmp	.+192    	; 0x121e <draw_settings_page+0x484>
			{
				cmd_text(170, 15, 26, 0, "SINGLE");
			}
			else 
			{
				cmd_text(170, 15, 26, 0, "DUAL");
    115e:	0f e7       	ldi	r16, 0x7F	; 127
    1160:	10 e2       	ldi	r17, 0x20	; 32
    1162:	5f c0       	rjmp	.+190    	; 0x1222 <draw_settings_page+0x488>
			}
		}
		else
		{
			cmd( BEGIN(RECTS) );
    1164:	69 e0       	ldi	r22, 0x09	; 9
    1166:	70 e0       	ldi	r23, 0x00	; 0
    1168:	80 e0       	ldi	r24, 0x00	; 0
    116a:	9f e1       	ldi	r25, 0x1F	; 31
    116c:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
			cmd(COLOR_RGB(100, 100, 255)); //draw outer boundary
    1170:	64 e6       	ldi	r22, 0x64	; 100
    1172:	74 e6       	ldi	r23, 0x64	; 100
    1174:	8f ef       	ldi	r24, 0xFF	; 255
    1176:	94 e0       	ldi	r25, 0x04	; 4
    1178:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
			cmd( LINE_WIDTH(200) );
    117c:	68 ec       	ldi	r22, 0xC8	; 200
    117e:	70 e0       	ldi	r23, 0x00	; 0
    1180:	80 e0       	ldi	r24, 0x00	; 0
    1182:	9e e0       	ldi	r25, 0x0E	; 14
    1184:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
			cmd( VERTEX2F(16 * 15, 16 * (15)) );
    1188:	60 ef       	ldi	r22, 0xF0	; 240
    118a:	70 e0       	ldi	r23, 0x00	; 0
    118c:	88 e7       	ldi	r24, 0x78	; 120
    118e:	90 e4       	ldi	r25, 0x40	; 64
    1190:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
			cmd( VERTEX2F(16 * 305, 16 * (27)) );
    1194:	60 eb       	ldi	r22, 0xB0	; 176
    1196:	71 e0       	ldi	r23, 0x01	; 1
    1198:	88 e8       	ldi	r24, 0x88	; 136
    119a:	99 e4       	ldi	r25, 0x49	; 73
    119c:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
		
			if(program_state->settings_row_num == 0)
    11a0:	f7 01       	movw	r30, r14
    11a2:	83 8d       	ldd	r24, Z+27	; 0x1b
    11a4:	81 11       	cpse	r24, r1
    11a6:	17 c0       	rjmp	.+46     	; 0x11d6 <draw_settings_page+0x43c>
			{
				cmd(COLOR_RGB(255, 255, 255)); //draw inner boundary
    11a8:	6f ef       	ldi	r22, 0xFF	; 255
    11aa:	7f ef       	ldi	r23, 0xFF	; 255
    11ac:	8f ef       	ldi	r24, 0xFF	; 255
    11ae:	94 e0       	ldi	r25, 0x04	; 4
    11b0:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
				cmd( VERTEX2F(16 * 17, 16 * (17)) );
    11b4:	60 e1       	ldi	r22, 0x10	; 16
    11b6:	71 e0       	ldi	r23, 0x01	; 1
    11b8:	88 e8       	ldi	r24, 0x88	; 136
    11ba:	90 e4       	ldi	r25, 0x40	; 64
    11bc:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
				cmd( VERTEX2F(16 * 303, 16 * (25)) );
    11c0:	60 e9       	ldi	r22, 0x90	; 144
    11c2:	71 e0       	ldi	r23, 0x01	; 1
    11c4:	88 e7       	ldi	r24, 0x78	; 120
    11c6:	99 e4       	ldi	r25, 0x49	; 73
    11c8:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
			
				cmd(COLOR_RGB(80, 80, 255));
    11cc:	60 e5       	ldi	r22, 0x50	; 80
    11ce:	70 e5       	ldi	r23, 0x50	; 80
    11d0:	8f ef       	ldi	r24, 0xFF	; 255
    11d2:	94 e0       	ldi	r25, 0x04	; 4
    11d4:	16 c0       	rjmp	.+44     	; 0x1202 <draw_settings_page+0x468>
			}
			else
			{
				cmd(COLOR_RGB(255, 255, 255)); //draw inner boundary
    11d6:	6f ef       	ldi	r22, 0xFF	; 255
    11d8:	7f ef       	ldi	r23, 0xFF	; 255
    11da:	8f ef       	ldi	r24, 0xFF	; 255
    11dc:	94 e0       	ldi	r25, 0x04	; 4
    11de:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
				cmd( VERTEX2F(16 * 15, 16 * (15)) );
    11e2:	60 ef       	ldi	r22, 0xF0	; 240
    11e4:	70 e0       	ldi	r23, 0x00	; 0
    11e6:	88 e7       	ldi	r24, 0x78	; 120
    11e8:	90 e4       	ldi	r25, 0x40	; 64
    11ea:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
				cmd( VERTEX2F(16 * 305, 16 * (27)) );
    11ee:	60 eb       	ldi	r22, 0xB0	; 176
    11f0:	71 e0       	ldi	r23, 0x01	; 1
    11f2:	88 e8       	ldi	r24, 0x88	; 136
    11f4:	99 e4       	ldi	r25, 0x49	; 73
    11f6:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
			
				cmd(COLOR_RGB(80, 80, 80));
    11fa:	60 e5       	ldi	r22, 0x50	; 80
    11fc:	70 e5       	ldi	r23, 0x50	; 80
    11fe:	80 e5       	ldi	r24, 0x50	; 80
    1200:	94 e0       	ldi	r25, 0x04	; 4
    1202:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
			}
		
			cmd_text(120, 15, 26, 0, "MODE : ");
    1206:	00 e7       	ldi	r16, 0x70	; 112
    1208:	10 e2       	ldi	r17, 0x20	; 32
    120a:	20 e0       	ldi	r18, 0x00	; 0
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	4a e1       	ldi	r20, 0x1A	; 26
    1210:	50 e0       	ldi	r21, 0x00	; 0
    1212:	6f e0       	ldi	r22, 0x0F	; 15
    1214:	70 e0       	ldi	r23, 0x00	; 0
    1216:	88 e7       	ldi	r24, 0x78	; 120
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	0e 94 6f 03 	call	0x6de	; 0x6de <cmd_text>
			cmd_text(170, 15, 26, 0, "SINGLE");
    121e:	08 e7       	ldi	r16, 0x78	; 120
    1220:	10 e2       	ldi	r17, 0x20	; 32
    1222:	20 e0       	ldi	r18, 0x00	; 0
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	4a e1       	ldi	r20, 0x1A	; 26
    1228:	50 e0       	ldi	r21, 0x00	; 0
    122a:	6f e0       	ldi	r22, 0x0F	; 15
    122c:	70 e0       	ldi	r23, 0x00	; 0
    122e:	8a ea       	ldi	r24, 0xAA	; 170
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	0e 94 6f 03 	call	0x6de	; 0x6de <cmd_text>
		}
		
		if (program_state->debug_mode)
    1236:	d7 01       	movw	r26, r14
    1238:	9f 96       	adiw	r26, 0x2f	; 47
    123a:	8c 91       	ld	r24, X
    123c:	88 23       	and	r24, r24
    123e:	09 f4       	brne	.+2      	; 0x1242 <draw_settings_page+0x4a8>
    1240:	e5 c1       	rjmp	.+970    	; 0x160c <draw_settings_page+0x872>
		{
			cmd( BEGIN(RECTS) );
    1242:	69 e0       	ldi	r22, 0x09	; 9
    1244:	70 e0       	ldi	r23, 0x00	; 0
    1246:	80 e0       	ldi	r24, 0x00	; 0
    1248:	9f e1       	ldi	r25, 0x1F	; 31
    124a:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
			cmd(COLOR_RGB(0, 0, 255)); //draw outer boundary
    124e:	60 e0       	ldi	r22, 0x00	; 0
    1250:	70 e0       	ldi	r23, 0x00	; 0
    1252:	8f ef       	ldi	r24, 0xFF	; 255
    1254:	94 e0       	ldi	r25, 0x04	; 4
    1256:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
			cmd( LINE_WIDTH(200) );
    125a:	68 ec       	ldi	r22, 0xC8	; 200
    125c:	70 e0       	ldi	r23, 0x00	; 0
    125e:	80 e0       	ldi	r24, 0x00	; 0
    1260:	9e e0       	ldi	r25, 0x0E	; 14
    1262:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
			cmd( VERTEX2F(16 * 15, 16 * (55)) );
    1266:	60 e7       	ldi	r22, 0x70	; 112
    1268:	73 e0       	ldi	r23, 0x03	; 3
    126a:	88 e7       	ldi	r24, 0x78	; 120
    126c:	90 e4       	ldi	r25, 0x40	; 64
    126e:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
			cmd( VERTEX2F(16 * 305, 16 * (67)) );
    1272:	60 e3       	ldi	r22, 0x30	; 48
    1274:	74 e0       	ldi	r23, 0x04	; 4
    1276:	88 e8       	ldi	r24, 0x88	; 136
    1278:	99 e4       	ldi	r25, 0x49	; 73
    127a:	0e 94 01 03 	call	0x602	; 0x602 <cmd>

			if(program_state->settings_row_num == 1)
    127e:	f7 01       	movw	r30, r14
    1280:	83 8d       	ldd	r24, Z+27	; 0x1b
    1282:	81 30       	cpi	r24, 0x01	; 1
    1284:	b9 f4       	brne	.+46     	; 0x12b4 <draw_settings_page+0x51a>
			{
				cmd(COLOR_RGB(255, 255, 255)); //draw inner boundary
    1286:	6f ef       	ldi	r22, 0xFF	; 255
    1288:	7f ef       	ldi	r23, 0xFF	; 255
    128a:	8f ef       	ldi	r24, 0xFF	; 255
    128c:	94 e0       	ldi	r25, 0x04	; 4
    128e:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
				cmd( VERTEX2F(16 * 17, 16 * (57)) );
    1292:	60 e9       	ldi	r22, 0x90	; 144
    1294:	73 e0       	ldi	r23, 0x03	; 3
    1296:	88 e8       	ldi	r24, 0x88	; 136
    1298:	90 e4       	ldi	r25, 0x40	; 64
    129a:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
				cmd( VERTEX2F(16 * 303, 16 * (65)) );
    129e:	60 e1       	ldi	r22, 0x10	; 16
    12a0:	74 e0       	ldi	r23, 0x04	; 4
    12a2:	88 e7       	ldi	r24, 0x78	; 120
    12a4:	99 e4       	ldi	r25, 0x49	; 73
    12a6:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
			
				cmd(COLOR_RGB(0, 0, 255));
    12aa:	60 e0       	ldi	r22, 0x00	; 0
    12ac:	70 e0       	ldi	r23, 0x00	; 0
    12ae:	8f ef       	ldi	r24, 0xFF	; 255
    12b0:	94 e0       	ldi	r25, 0x04	; 4
    12b2:	16 c0       	rjmp	.+44     	; 0x12e0 <draw_settings_page+0x546>
			}
			else
			{
				cmd(COLOR_RGB(255, 255, 255)); //draw inner boundary
    12b4:	6f ef       	ldi	r22, 0xFF	; 255
    12b6:	7f ef       	ldi	r23, 0xFF	; 255
    12b8:	8f ef       	ldi	r24, 0xFF	; 255
    12ba:	94 e0       	ldi	r25, 0x04	; 4
    12bc:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
				cmd( VERTEX2F(16 * 15, 16 * (55)) );
    12c0:	60 e7       	ldi	r22, 0x70	; 112
    12c2:	73 e0       	ldi	r23, 0x03	; 3
    12c4:	88 e7       	ldi	r24, 0x78	; 120
    12c6:	90 e4       	ldi	r25, 0x40	; 64
    12c8:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
				cmd( VERTEX2F(16 * 305, 16 * (67)) );
    12cc:	60 e3       	ldi	r22, 0x30	; 48
    12ce:	74 e0       	ldi	r23, 0x04	; 4
    12d0:	88 e8       	ldi	r24, 0x88	; 136
    12d2:	99 e4       	ldi	r25, 0x49	; 73
    12d4:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
			
				cmd(COLOR_RGB(0, 0, 0));
    12d8:	60 e0       	ldi	r22, 0x00	; 0
    12da:	70 e0       	ldi	r23, 0x00	; 0
    12dc:	80 e0       	ldi	r24, 0x00	; 0
    12de:	94 e0       	ldi	r25, 0x04	; 4
    12e0:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
			}
			cmd_text(100, 55, 26, 0, "CLEAR ERROR LOGS");
    12e4:	04 e8       	ldi	r16, 0x84	; 132
    12e6:	10 e2       	ldi	r17, 0x20	; 32
    12e8:	20 e0       	ldi	r18, 0x00	; 0
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	4a e1       	ldi	r20, 0x1A	; 26
    12ee:	50 e0       	ldi	r21, 0x00	; 0
    12f0:	67 e3       	ldi	r22, 0x37	; 55
    12f2:	70 e0       	ldi	r23, 0x00	; 0
    12f4:	84 e6       	ldi	r24, 0x64	; 100
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	0e 94 6f 03 	call	0x6de	; 0x6de <cmd_text>
		
			cmd( BEGIN(RECTS) );
    12fc:	69 e0       	ldi	r22, 0x09	; 9
    12fe:	70 e0       	ldi	r23, 0x00	; 0
    1300:	80 e0       	ldi	r24, 0x00	; 0
    1302:	9f e1       	ldi	r25, 0x1F	; 31
    1304:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
			cmd(COLOR_RGB(0, 0, 255)); //draw outer boundary
    1308:	60 e0       	ldi	r22, 0x00	; 0
    130a:	70 e0       	ldi	r23, 0x00	; 0
    130c:	8f ef       	ldi	r24, 0xFF	; 255
    130e:	94 e0       	ldi	r25, 0x04	; 4
    1310:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
			cmd( LINE_WIDTH(200) );
    1314:	68 ec       	ldi	r22, 0xC8	; 200
    1316:	70 e0       	ldi	r23, 0x00	; 0
    1318:	80 e0       	ldi	r24, 0x00	; 0
    131a:	9e e0       	ldi	r25, 0x0E	; 14
    131c:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
			cmd( VERTEX2F(16 * 15, 16 * (95)) );
    1320:	60 ef       	ldi	r22, 0xF0	; 240
    1322:	75 e0       	ldi	r23, 0x05	; 5
    1324:	88 e7       	ldi	r24, 0x78	; 120
    1326:	90 e4       	ldi	r25, 0x40	; 64
    1328:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
			cmd( VERTEX2F(16 * 305, 16 * (107)) );
    132c:	60 eb       	ldi	r22, 0xB0	; 176
    132e:	76 e0       	ldi	r23, 0x06	; 6
    1330:	88 e8       	ldi	r24, 0x88	; 136
    1332:	99 e4       	ldi	r25, 0x49	; 73
    1334:	0e 94 01 03 	call	0x602	; 0x602 <cmd>

			if(program_state->settings_row_num == 2)
    1338:	d7 01       	movw	r26, r14
    133a:	5b 96       	adiw	r26, 0x1b	; 27
    133c:	8c 91       	ld	r24, X
    133e:	82 30       	cpi	r24, 0x02	; 2
    1340:	b9 f4       	brne	.+46     	; 0x1370 <draw_settings_page+0x5d6>
			{
				cmd(COLOR_RGB(255, 255, 255)); //draw inner boundary
    1342:	6f ef       	ldi	r22, 0xFF	; 255
    1344:	7f ef       	ldi	r23, 0xFF	; 255
    1346:	8f ef       	ldi	r24, 0xFF	; 255
    1348:	94 e0       	ldi	r25, 0x04	; 4
    134a:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
				cmd( VERTEX2F(16 * 17, 16 * (97)) );
    134e:	60 e1       	ldi	r22, 0x10	; 16
    1350:	76 e0       	ldi	r23, 0x06	; 6
    1352:	88 e8       	ldi	r24, 0x88	; 136
    1354:	90 e4       	ldi	r25, 0x40	; 64
    1356:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
				cmd( VERTEX2F(16 * 303, 16 * (105)) );
    135a:	60 e9       	ldi	r22, 0x90	; 144
    135c:	76 e0       	ldi	r23, 0x06	; 6
    135e:	88 e7       	ldi	r24, 0x78	; 120
    1360:	99 e4       	ldi	r25, 0x49	; 73
    1362:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
			
				cmd(COLOR_RGB(0, 0, 255));
    1366:	60 e0       	ldi	r22, 0x00	; 0
    1368:	70 e0       	ldi	r23, 0x00	; 0
    136a:	8f ef       	ldi	r24, 0xFF	; 255
    136c:	94 e0       	ldi	r25, 0x04	; 4
    136e:	16 c0       	rjmp	.+44     	; 0x139c <draw_settings_page+0x602>
			}
			else
			{
				cmd(COLOR_RGB(255, 255, 255)); //draw inner boundary
    1370:	6f ef       	ldi	r22, 0xFF	; 255
    1372:	7f ef       	ldi	r23, 0xFF	; 255
    1374:	8f ef       	ldi	r24, 0xFF	; 255
    1376:	94 e0       	ldi	r25, 0x04	; 4
    1378:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
				cmd( VERTEX2F(16 * 15, 16 * (95)) );
    137c:	60 ef       	ldi	r22, 0xF0	; 240
    137e:	75 e0       	ldi	r23, 0x05	; 5
    1380:	88 e7       	ldi	r24, 0x78	; 120
    1382:	90 e4       	ldi	r25, 0x40	; 64
    1384:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
				cmd( VERTEX2F(16 * 305, 16 * (107)) );
    1388:	60 eb       	ldi	r22, 0xB0	; 176
    138a:	76 e0       	ldi	r23, 0x06	; 6
    138c:	88 e8       	ldi	r24, 0x88	; 136
    138e:	99 e4       	ldi	r25, 0x49	; 73
    1390:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
			
				cmd(COLOR_RGB(0, 0, 0));
    1394:	60 e0       	ldi	r22, 0x00	; 0
    1396:	70 e0       	ldi	r23, 0x00	; 0
    1398:	80 e0       	ldi	r24, 0x00	; 0
    139a:	94 e0       	ldi	r25, 0x04	; 4
    139c:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
			}
			cmd_text(130, 95, 26, 0, "TEST MODE");
    13a0:	05 e9       	ldi	r16, 0x95	; 149
    13a2:	10 e2       	ldi	r17, 0x20	; 32
    13a4:	20 e0       	ldi	r18, 0x00	; 0
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	4a e1       	ldi	r20, 0x1A	; 26
    13aa:	50 e0       	ldi	r21, 0x00	; 0
    13ac:	6f e5       	ldi	r22, 0x5F	; 95
    13ae:	70 e0       	ldi	r23, 0x00	; 0
    13b0:	82 e8       	ldi	r24, 0x82	; 130
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	0e 94 6f 03 	call	0x6de	; 0x6de <cmd_text>
		
			char com_err1_amt[10] = "\0";
    13b8:	20 91 10 20 	lds	r18, 0x2010	; 0x802010 <CLKEXT.5246+0x8>
    13bc:	30 91 11 20 	lds	r19, 0x2011	; 0x802011 <CLKEXT.5246+0x9>
    13c0:	2b ab       	std	Y+51, r18	; 0x33
    13c2:	3c ab       	std	Y+52, r19	; 0x34
    13c4:	88 e0       	ldi	r24, 0x08	; 8
    13c6:	fe 01       	movw	r30, r28
    13c8:	f5 96       	adiw	r30, 0x35	; 53
    13ca:	df 01       	movw	r26, r30
    13cc:	98 2f       	mov	r25, r24
    13ce:	1d 92       	st	X+, r1
    13d0:	9a 95       	dec	r25
    13d2:	e9 f7       	brne	.-6      	; 0x13ce <draw_settings_page+0x634>
			char com_err2_amt[10] = "\0";
    13d4:	29 a7       	std	Y+41, r18	; 0x29
    13d6:	3a a7       	std	Y+42, r19	; 0x2a
    13d8:	3a 97       	sbiw	r30, 0x0a	; 10
    13da:	df 01       	movw	r26, r30
    13dc:	98 2f       	mov	r25, r24
    13de:	1d 92       	st	X+, r1
    13e0:	9a 95       	dec	r25
    13e2:	e9 f7       	brne	.-6      	; 0x13de <draw_settings_page+0x644>
			char com_err3_amt[10] = "\0";
    13e4:	2f 8f       	std	Y+31, r18	; 0x1f
    13e6:	38 a3       	std	Y+32, r19	; 0x20
    13e8:	3a 97       	sbiw	r30, 0x0a	; 10
    13ea:	df 01       	movw	r26, r30
    13ec:	98 2f       	mov	r25, r24
    13ee:	1d 92       	st	X+, r1
    13f0:	9a 95       	dec	r25
    13f2:	e9 f7       	brne	.-6      	; 0x13ee <draw_settings_page+0x654>
			char com_err4_amt[10] = "\0";
    13f4:	2d 8b       	std	Y+21, r18	; 0x15
    13f6:	3e 8b       	std	Y+22, r19	; 0x16
    13f8:	3a 97       	sbiw	r30, 0x0a	; 10
    13fa:	df 01       	movw	r26, r30
    13fc:	98 2f       	mov	r25, r24
    13fe:	1d 92       	st	X+, r1
    1400:	9a 95       	dec	r25
    1402:	e9 f7       	brne	.-6      	; 0x13fe <draw_settings_page+0x664>
			char com_err5_amt[10] = "\0";
    1404:	2b 87       	std	Y+11, r18	; 0x0b
    1406:	3c 87       	std	Y+12, r19	; 0x0c
    1408:	3a 97       	sbiw	r30, 0x0a	; 10
    140a:	df 01       	movw	r26, r30
    140c:	98 2f       	mov	r25, r24
    140e:	1d 92       	st	X+, r1
    1410:	9a 95       	dec	r25
    1412:	e9 f7       	brne	.-6      	; 0x140e <draw_settings_page+0x674>
			char com_err6_amt[10] = "\0";
    1414:	29 83       	std	Y+1, r18	; 0x01
    1416:	3a 83       	std	Y+2, r19	; 0x02
    1418:	3a 97       	sbiw	r30, 0x0a	; 10
    141a:	df 01       	movw	r26, r30
    141c:	1d 92       	st	X+, r1
    141e:	8a 95       	dec	r24
    1420:	e9 f7       	brne	.-6      	; 0x141c <draw_settings_page+0x682>
		
			sprintf(com_err1_amt, "%u", program_state->comm_error1);
    1422:	f7 01       	movw	r30, r14
    1424:	85 8d       	ldd	r24, Z+29	; 0x1d
    1426:	8f 93       	push	r24
    1428:	84 8d       	ldd	r24, Z+28	; 0x1c
    142a:	8f 93       	push	r24
    142c:	0f e9       	ldi	r16, 0x9F	; 159
    142e:	10 e2       	ldi	r17, 0x20	; 32
    1430:	1f 93       	push	r17
    1432:	0f 93       	push	r16
    1434:	4e 01       	movw	r8, r28
    1436:	f3 e3       	ldi	r31, 0x33	; 51
    1438:	8f 0e       	add	r8, r31
    143a:	91 1c       	adc	r9, r1
    143c:	9f 92       	push	r9
    143e:	8f 92       	push	r8
    1440:	0e 94 ef 39 	call	0x73de	; 0x73de <sprintf>
			sprintf(com_err2_amt, "%u", program_state->comm_error2);
    1444:	d7 01       	movw	r26, r14
    1446:	5f 96       	adiw	r26, 0x1f	; 31
    1448:	8c 91       	ld	r24, X
    144a:	5f 97       	sbiw	r26, 0x1f	; 31
    144c:	8f 93       	push	r24
    144e:	5e 96       	adiw	r26, 0x1e	; 30
    1450:	8c 91       	ld	r24, X
    1452:	8f 93       	push	r24
    1454:	1f 93       	push	r17
    1456:	0f 93       	push	r16
    1458:	5e 01       	movw	r10, r28
    145a:	b9 e2       	ldi	r27, 0x29	; 41
    145c:	ab 0e       	add	r10, r27
    145e:	b1 1c       	adc	r11, r1
    1460:	bf 92       	push	r11
    1462:	af 92       	push	r10
    1464:	0e 94 ef 39 	call	0x73de	; 0x73de <sprintf>
			sprintf(com_err3_amt, "%u", program_state->comm_error3);
    1468:	f7 01       	movw	r30, r14
    146a:	81 a1       	ldd	r24, Z+33	; 0x21
    146c:	8f 93       	push	r24
    146e:	80 a1       	ldd	r24, Z+32	; 0x20
    1470:	8f 93       	push	r24
    1472:	1f 93       	push	r17
    1474:	0f 93       	push	r16
    1476:	6e 01       	movw	r12, r28
    1478:	ff e1       	ldi	r31, 0x1F	; 31
    147a:	cf 0e       	add	r12, r31
    147c:	d1 1c       	adc	r13, r1
    147e:	df 92       	push	r13
    1480:	cf 92       	push	r12
    1482:	0e 94 ef 39 	call	0x73de	; 0x73de <sprintf>
			sprintf(com_err4_amt, "%u", program_state->comm_error4);
    1486:	d7 01       	movw	r26, r14
    1488:	93 96       	adiw	r26, 0x23	; 35
    148a:	8c 91       	ld	r24, X
    148c:	93 97       	sbiw	r26, 0x23	; 35
    148e:	8f 93       	push	r24
    1490:	92 96       	adiw	r26, 0x22	; 34
    1492:	8c 91       	ld	r24, X
    1494:	8f 93       	push	r24
    1496:	1f 93       	push	r17
    1498:	0f 93       	push	r16
    149a:	3e 01       	movw	r6, r28
    149c:	b5 e1       	ldi	r27, 0x15	; 21
    149e:	6b 0e       	add	r6, r27
    14a0:	71 1c       	adc	r7, r1
    14a2:	7f 92       	push	r7
    14a4:	6f 92       	push	r6
    14a6:	0e 94 ef 39 	call	0x73de	; 0x73de <sprintf>
			sprintf(com_err5_amt, "%u", program_state->comm_error5);
    14aa:	f7 01       	movw	r30, r14
    14ac:	85 a1       	ldd	r24, Z+37	; 0x25
    14ae:	8f 93       	push	r24
    14b0:	84 a1       	ldd	r24, Z+36	; 0x24
    14b2:	8f 93       	push	r24
    14b4:	1f 93       	push	r17
    14b6:	0f 93       	push	r16
    14b8:	2e 01       	movw	r4, r28
    14ba:	fb e0       	ldi	r31, 0x0B	; 11
    14bc:	4f 0e       	add	r4, r31
    14be:	51 1c       	adc	r5, r1
    14c0:	5f 92       	push	r5
    14c2:	4f 92       	push	r4
    14c4:	0e 94 ef 39 	call	0x73de	; 0x73de <sprintf>
			sprintf(com_err6_amt, "%u", program_state->comm_error6);
    14c8:	d7 01       	movw	r26, r14
    14ca:	97 96       	adiw	r26, 0x27	; 39
    14cc:	8c 91       	ld	r24, X
    14ce:	97 97       	sbiw	r26, 0x27	; 39
    14d0:	8f 93       	push	r24
    14d2:	96 96       	adiw	r26, 0x26	; 38
    14d4:	8c 91       	ld	r24, X
    14d6:	8f 93       	push	r24
    14d8:	1f 93       	push	r17
    14da:	0f 93       	push	r16
    14dc:	fe 01       	movw	r30, r28
    14de:	31 96       	adiw	r30, 0x01	; 1
    14e0:	7f 01       	movw	r14, r30
    14e2:	ff 93       	push	r31
    14e4:	ef 93       	push	r30
    14e6:	0e 94 ef 39 	call	0x73de	; 0x73de <sprintf>
		
			// Error logs
			cmd(COLOR_RGB(51, 255, 51));
    14ea:	cd bf       	out	0x3d, r28	; 61
    14ec:	de bf       	out	0x3e, r29	; 62
    14ee:	63 e3       	ldi	r22, 0x33	; 51
    14f0:	7f ef       	ldi	r23, 0xFF	; 255
    14f2:	83 e3       	ldi	r24, 0x33	; 51
    14f4:	94 e0       	ldi	r25, 0x04	; 4
    14f6:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
			cmd_text(10, 130, 16, 0, "0X41 :"); cmd_text(60, 130, 16, 0, com_err1_amt);
    14fa:	02 ea       	ldi	r16, 0xA2	; 162
    14fc:	10 e2       	ldi	r17, 0x20	; 32
    14fe:	20 e0       	ldi	r18, 0x00	; 0
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	40 e1       	ldi	r20, 0x10	; 16
    1504:	50 e0       	ldi	r21, 0x00	; 0
    1506:	62 e8       	ldi	r22, 0x82	; 130
    1508:	70 e0       	ldi	r23, 0x00	; 0
    150a:	8a e0       	ldi	r24, 0x0A	; 10
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	0e 94 6f 03 	call	0x6de	; 0x6de <cmd_text>
    1512:	84 01       	movw	r16, r8
    1514:	20 e0       	ldi	r18, 0x00	; 0
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	40 e1       	ldi	r20, 0x10	; 16
    151a:	50 e0       	ldi	r21, 0x00	; 0
    151c:	62 e8       	ldi	r22, 0x82	; 130
    151e:	70 e0       	ldi	r23, 0x00	; 0
    1520:	8c e3       	ldi	r24, 0x3C	; 60
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	0e 94 6f 03 	call	0x6de	; 0x6de <cmd_text>
			cmd_text(10, 150, 16, 0, "0X40 :"); cmd_text(60, 150, 16, 0, com_err2_amt);
    1528:	09 ea       	ldi	r16, 0xA9	; 169
    152a:	10 e2       	ldi	r17, 0x20	; 32
    152c:	20 e0       	ldi	r18, 0x00	; 0
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	40 e1       	ldi	r20, 0x10	; 16
    1532:	50 e0       	ldi	r21, 0x00	; 0
    1534:	66 e9       	ldi	r22, 0x96	; 150
    1536:	70 e0       	ldi	r23, 0x00	; 0
    1538:	8a e0       	ldi	r24, 0x0A	; 10
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	0e 94 6f 03 	call	0x6de	; 0x6de <cmd_text>
    1540:	85 01       	movw	r16, r10
    1542:	20 e0       	ldi	r18, 0x00	; 0
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	40 e1       	ldi	r20, 0x10	; 16
    1548:	50 e0       	ldi	r21, 0x00	; 0
    154a:	66 e9       	ldi	r22, 0x96	; 150
    154c:	70 e0       	ldi	r23, 0x00	; 0
    154e:	8c e3       	ldi	r24, 0x3C	; 60
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	0e 94 6f 03 	call	0x6de	; 0x6de <cmd_text>
			cmd_text(10, 170, 16, 0, "0X4D :"); cmd_text(60, 170, 16, 0, com_err3_amt);
    1556:	00 eb       	ldi	r16, 0xB0	; 176
    1558:	10 e2       	ldi	r17, 0x20	; 32
    155a:	20 e0       	ldi	r18, 0x00	; 0
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	40 e1       	ldi	r20, 0x10	; 16
    1560:	50 e0       	ldi	r21, 0x00	; 0
    1562:	6a ea       	ldi	r22, 0xAA	; 170
    1564:	70 e0       	ldi	r23, 0x00	; 0
    1566:	8a e0       	ldi	r24, 0x0A	; 10
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	0e 94 6f 03 	call	0x6de	; 0x6de <cmd_text>
    156e:	86 01       	movw	r16, r12
    1570:	20 e0       	ldi	r18, 0x00	; 0
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	40 e1       	ldi	r20, 0x10	; 16
    1576:	50 e0       	ldi	r21, 0x00	; 0
    1578:	6a ea       	ldi	r22, 0xAA	; 170
    157a:	70 e0       	ldi	r23, 0x00	; 0
    157c:	8c e3       	ldi	r24, 0x3C	; 60
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	0e 94 6f 03 	call	0x6de	; 0x6de <cmd_text>
			cmd_text(10, 190, 16, 0, "0X4E :"); cmd_text(60, 190, 16, 0, com_err4_amt);
    1584:	07 eb       	ldi	r16, 0xB7	; 183
    1586:	10 e2       	ldi	r17, 0x20	; 32
    1588:	20 e0       	ldi	r18, 0x00	; 0
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	40 e1       	ldi	r20, 0x10	; 16
    158e:	50 e0       	ldi	r21, 0x00	; 0
    1590:	6e eb       	ldi	r22, 0xBE	; 190
    1592:	70 e0       	ldi	r23, 0x00	; 0
    1594:	8a e0       	ldi	r24, 0x0A	; 10
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	0e 94 6f 03 	call	0x6de	; 0x6de <cmd_text>
    159c:	83 01       	movw	r16, r6
    159e:	20 e0       	ldi	r18, 0x00	; 0
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	40 e1       	ldi	r20, 0x10	; 16
    15a4:	50 e0       	ldi	r21, 0x00	; 0
    15a6:	6e eb       	ldi	r22, 0xBE	; 190
    15a8:	70 e0       	ldi	r23, 0x00	; 0
    15aa:	8c e3       	ldi	r24, 0x3C	; 60
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	0e 94 6f 03 	call	0x6de	; 0x6de <cmd_text>
			cmd_text(10, 210, 16, 0, "0X4C :"); cmd_text(60, 210, 16, 0, com_err5_amt);
    15b2:	0e eb       	ldi	r16, 0xBE	; 190
    15b4:	10 e2       	ldi	r17, 0x20	; 32
    15b6:	20 e0       	ldi	r18, 0x00	; 0
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	40 e1       	ldi	r20, 0x10	; 16
    15bc:	50 e0       	ldi	r21, 0x00	; 0
    15be:	62 ed       	ldi	r22, 0xD2	; 210
    15c0:	70 e0       	ldi	r23, 0x00	; 0
    15c2:	8a e0       	ldi	r24, 0x0A	; 10
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	0e 94 6f 03 	call	0x6de	; 0x6de <cmd_text>
    15ca:	82 01       	movw	r16, r4
    15cc:	20 e0       	ldi	r18, 0x00	; 0
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	40 e1       	ldi	r20, 0x10	; 16
    15d2:	50 e0       	ldi	r21, 0x00	; 0
    15d4:	62 ed       	ldi	r22, 0xD2	; 210
    15d6:	70 e0       	ldi	r23, 0x00	; 0
    15d8:	8c e3       	ldi	r24, 0x3C	; 60
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	0e 94 6f 03 	call	0x6de	; 0x6de <cmd_text>
			cmd_text(10, 230, 16, 0, "EEP  :"); cmd_text(60, 230, 16, 0, com_err6_amt);
    15e0:	05 ec       	ldi	r16, 0xC5	; 197
    15e2:	10 e2       	ldi	r17, 0x20	; 32
    15e4:	20 e0       	ldi	r18, 0x00	; 0
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	40 e1       	ldi	r20, 0x10	; 16
    15ea:	50 e0       	ldi	r21, 0x00	; 0
    15ec:	66 ee       	ldi	r22, 0xE6	; 230
    15ee:	70 e0       	ldi	r23, 0x00	; 0
    15f0:	8a e0       	ldi	r24, 0x0A	; 10
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	0e 94 6f 03 	call	0x6de	; 0x6de <cmd_text>
    15f8:	87 01       	movw	r16, r14
    15fa:	20 e0       	ldi	r18, 0x00	; 0
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	40 e1       	ldi	r20, 0x10	; 16
    1600:	50 e0       	ldi	r21, 0x00	; 0
    1602:	66 ee       	ldi	r22, 0xE6	; 230
    1604:	70 e0       	ldi	r23, 0x00	; 0
    1606:	8c e3       	ldi	r24, 0x3C	; 60
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	61 c0       	rjmp	.+194    	; 0x16ce <draw_settings_page+0x934>
		}
		else if (program_state->calibrating_mode)
    160c:	d7 01       	movw	r26, r14
    160e:	d0 96       	adiw	r26, 0x30	; 48
    1610:	8c 91       	ld	r24, X
    1612:	88 23       	and	r24, r24
    1614:	09 f4       	brne	.+2      	; 0x1618 <draw_settings_page+0x87e>
    1616:	5d c0       	rjmp	.+186    	; 0x16d2 <draw_settings_page+0x938>
		{
			cmd( BEGIN(RECTS) );
    1618:	69 e0       	ldi	r22, 0x09	; 9
    161a:	70 e0       	ldi	r23, 0x00	; 0
    161c:	80 e0       	ldi	r24, 0x00	; 0
    161e:	9f e1       	ldi	r25, 0x1F	; 31
    1620:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
			cmd(COLOR_RGB(0, 0, 255)); //draw outer boundary
    1624:	60 e0       	ldi	r22, 0x00	; 0
    1626:	70 e0       	ldi	r23, 0x00	; 0
    1628:	8f ef       	ldi	r24, 0xFF	; 255
    162a:	94 e0       	ldi	r25, 0x04	; 4
    162c:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
			cmd( LINE_WIDTH(200) );
    1630:	68 ec       	ldi	r22, 0xC8	; 200
    1632:	70 e0       	ldi	r23, 0x00	; 0
    1634:	80 e0       	ldi	r24, 0x00	; 0
    1636:	9e e0       	ldi	r25, 0x0E	; 14
    1638:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
			cmd( VERTEX2F(16 * 15, 16 * (55)) );
    163c:	60 e7       	ldi	r22, 0x70	; 112
    163e:	73 e0       	ldi	r23, 0x03	; 3
    1640:	88 e7       	ldi	r24, 0x78	; 120
    1642:	90 e4       	ldi	r25, 0x40	; 64
    1644:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
			cmd( VERTEX2F(16 * 305, 16 * (67)) );
    1648:	60 e3       	ldi	r22, 0x30	; 48
    164a:	74 e0       	ldi	r23, 0x04	; 4
    164c:	88 e8       	ldi	r24, 0x88	; 136
    164e:	99 e4       	ldi	r25, 0x49	; 73
    1650:	0e 94 01 03 	call	0x602	; 0x602 <cmd>

			if(program_state->settings_row_num == 1)
    1654:	f7 01       	movw	r30, r14
    1656:	83 8d       	ldd	r24, Z+27	; 0x1b
    1658:	81 30       	cpi	r24, 0x01	; 1
    165a:	b9 f4       	brne	.+46     	; 0x168a <draw_settings_page+0x8f0>
			{
				cmd(COLOR_RGB(255, 255, 255)); //draw inner boundary
    165c:	6f ef       	ldi	r22, 0xFF	; 255
    165e:	7f ef       	ldi	r23, 0xFF	; 255
    1660:	8f ef       	ldi	r24, 0xFF	; 255
    1662:	94 e0       	ldi	r25, 0x04	; 4
    1664:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
				cmd( VERTEX2F(16 * 17, 16 * (57)) );
    1668:	60 e9       	ldi	r22, 0x90	; 144
    166a:	73 e0       	ldi	r23, 0x03	; 3
    166c:	88 e8       	ldi	r24, 0x88	; 136
    166e:	90 e4       	ldi	r25, 0x40	; 64
    1670:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
				cmd( VERTEX2F(16 * 303, 16 * (65)) );
    1674:	60 e1       	ldi	r22, 0x10	; 16
    1676:	74 e0       	ldi	r23, 0x04	; 4
    1678:	88 e7       	ldi	r24, 0x78	; 120
    167a:	99 e4       	ldi	r25, 0x49	; 73
    167c:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
			
				cmd(COLOR_RGB(0, 0, 255));
    1680:	60 e0       	ldi	r22, 0x00	; 0
    1682:	70 e0       	ldi	r23, 0x00	; 0
    1684:	8f ef       	ldi	r24, 0xFF	; 255
    1686:	94 e0       	ldi	r25, 0x04	; 4
    1688:	16 c0       	rjmp	.+44     	; 0x16b6 <draw_settings_page+0x91c>
			}
			else
			{
				cmd(COLOR_RGB(255, 255, 255)); //draw inner boundary
    168a:	6f ef       	ldi	r22, 0xFF	; 255
    168c:	7f ef       	ldi	r23, 0xFF	; 255
    168e:	8f ef       	ldi	r24, 0xFF	; 255
    1690:	94 e0       	ldi	r25, 0x04	; 4
    1692:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
				cmd( VERTEX2F(16 * 15, 16 * (55)) );
    1696:	60 e7       	ldi	r22, 0x70	; 112
    1698:	73 e0       	ldi	r23, 0x03	; 3
    169a:	88 e7       	ldi	r24, 0x78	; 120
    169c:	90 e4       	ldi	r25, 0x40	; 64
    169e:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
				cmd( VERTEX2F(16 * 305, 16 * (67)) );
    16a2:	60 e3       	ldi	r22, 0x30	; 48
    16a4:	74 e0       	ldi	r23, 0x04	; 4
    16a6:	88 e8       	ldi	r24, 0x88	; 136
    16a8:	99 e4       	ldi	r25, 0x49	; 73
    16aa:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
			
				cmd(COLOR_RGB(0, 0, 0));
    16ae:	60 e0       	ldi	r22, 0x00	; 0
    16b0:	70 e0       	ldi	r23, 0x00	; 0
    16b2:	80 e0       	ldi	r24, 0x00	; 0
    16b4:	94 e0       	ldi	r25, 0x04	; 4
    16b6:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
			}
			cmd_text(100, 55, 26, 0, "CALIBRATE UNIT");
    16ba:	0c ec       	ldi	r16, 0xCC	; 204
    16bc:	10 e2       	ldi	r17, 0x20	; 32
    16be:	20 e0       	ldi	r18, 0x00	; 0
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	4a e1       	ldi	r20, 0x1A	; 26
    16c4:	50 e0       	ldi	r21, 0x00	; 0
    16c6:	67 e3       	ldi	r22, 0x37	; 55
    16c8:	70 e0       	ldi	r23, 0x00	; 0
    16ca:	84 e6       	ldi	r24, 0x64	; 100
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	0e 94 6f 03 	call	0x6de	; 0x6de <cmd_text>
		}
	}
}
    16d2:	ec 96       	adiw	r28, 0x3c	; 60
    16d4:	cd bf       	out	0x3d, r28	; 61
    16d6:	de bf       	out	0x3e, r29	; 62
    16d8:	df 91       	pop	r29
    16da:	cf 91       	pop	r28
    16dc:	1f 91       	pop	r17
    16de:	0f 91       	pop	r16
    16e0:	ff 90       	pop	r15
    16e2:	ef 90       	pop	r14
    16e4:	df 90       	pop	r13
    16e6:	cf 90       	pop	r12
    16e8:	bf 90       	pop	r11
    16ea:	af 90       	pop	r10
    16ec:	9f 90       	pop	r9
    16ee:	8f 90       	pop	r8
    16f0:	7f 90       	pop	r7
    16f2:	6f 90       	pop	r6
    16f4:	5f 90       	pop	r5
    16f6:	4f 90       	pop	r4
    16f8:	08 95       	ret

000016fa <draw_message_box>:
	draw_character('V', 27, gauge_x+5, gauge_y, 0, 0, 0); // draws 'V' next to voltage gauge
	draw_character('A', 27, gauge_x+5, gauge_y+36, 0, 0, 0); //draws 'A' next to current gauge
}

void draw_message_box(ProgramState *program_state, OutputState *output_one, OutputState *output_two, TimerCount *counters)
{
    16fa:	2f 92       	push	r2
    16fc:	3f 92       	push	r3
    16fe:	4f 92       	push	r4
    1700:	5f 92       	push	r5
    1702:	6f 92       	push	r6
    1704:	7f 92       	push	r7
    1706:	8f 92       	push	r8
    1708:	9f 92       	push	r9
    170a:	af 92       	push	r10
    170c:	bf 92       	push	r11
    170e:	cf 92       	push	r12
    1710:	df 92       	push	r13
    1712:	ef 92       	push	r14
    1714:	ff 92       	push	r15
    1716:	0f 93       	push	r16
    1718:	1f 93       	push	r17
    171a:	cf 93       	push	r28
    171c:	df 93       	push	r29
    171e:	cd b7       	in	r28, 0x3d	; 61
    1720:	de b7       	in	r29, 0x3e	; 62
    1722:	a7 97       	sbiw	r28, 0x27	; 39
    1724:	cd bf       	out	0x3d, r28	; 61
    1726:	de bf       	out	0x3e, r29	; 62
    1728:	4c 01       	movw	r8, r24
    172a:	3b 01       	movw	r6, r22
    172c:	1a 01       	movw	r2, r20
    172e:	29 01       	movw	r4, r18
	//**************************************************
	wdt_reset(); // WATCH DOG TIMER RESET
    1730:	a8 95       	wdr
	//**************************************************
	static int message_idx = -1;
	
	cmd( BEGIN(RECTS) ); //draws black outer circle for bottom rectangle
    1732:	69 e0       	ldi	r22, 0x09	; 9
    1734:	70 e0       	ldi	r23, 0x00	; 0
    1736:	80 e0       	ldi	r24, 0x00	; 0
    1738:	9f e1       	ldi	r25, 0x1F	; 31
    173a:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
	cmd(COLOR_RGB(0, 0, 0));
    173e:	60 e0       	ldi	r22, 0x00	; 0
    1740:	70 e0       	ldi	r23, 0x00	; 0
    1742:	80 e0       	ldi	r24, 0x00	; 0
    1744:	94 e0       	ldi	r25, 0x04	; 4
    1746:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
	cmd( LINE_WIDTH(200) );
    174a:	68 ec       	ldi	r22, 0xC8	; 200
    174c:	70 e0       	ldi	r23, 0x00	; 0
    174e:	80 e0       	ldi	r24, 0x00	; 0
    1750:	9e e0       	ldi	r25, 0x0E	; 14
    1752:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
	cmd( VERTEX2F(16 * 15, 16 * 114) );
    1756:	60 e2       	ldi	r22, 0x20	; 32
    1758:	77 e0       	ldi	r23, 0x07	; 7
    175a:	88 e7       	ldi	r24, 0x78	; 120
    175c:	90 e4       	ldi	r25, 0x40	; 64
    175e:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
	cmd( VERTEX2F(16 * 305, 16 * 125) );
    1762:	60 ed       	ldi	r22, 0xD0	; 208
    1764:	77 e0       	ldi	r23, 0x07	; 7
    1766:	88 e8       	ldi	r24, 0x88	; 136
    1768:	99 e4       	ldi	r25, 0x49	; 73
    176a:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
	
	cmd( BEGIN(RECTS) ); //draws white inner rectangle for bottom rectangle
    176e:	69 e0       	ldi	r22, 0x09	; 9
    1770:	70 e0       	ldi	r23, 0x00	; 0
    1772:	80 e0       	ldi	r24, 0x00	; 0
    1774:	9f e1       	ldi	r25, 0x1F	; 31
    1776:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
	cmd(COLOR_RGB(255, 255, 255));
    177a:	6f ef       	ldi	r22, 0xFF	; 255
    177c:	7f ef       	ldi	r23, 0xFF	; 255
    177e:	8f ef       	ldi	r24, 0xFF	; 255
    1780:	94 e0       	ldi	r25, 0x04	; 4
    1782:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
	cmd( LINE_WIDTH(200) );
    1786:	68 ec       	ldi	r22, 0xC8	; 200
    1788:	70 e0       	ldi	r23, 0x00	; 0
    178a:	80 e0       	ldi	r24, 0x00	; 0
    178c:	9e e0       	ldi	r25, 0x0E	; 14
    178e:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
	cmd( VERTEX2F(16 * 17, 16 * 116) );
    1792:	60 e4       	ldi	r22, 0x40	; 64
    1794:	77 e0       	ldi	r23, 0x07	; 7
    1796:	88 e8       	ldi	r24, 0x88	; 136
    1798:	90 e4       	ldi	r25, 0x40	; 64
    179a:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
	cmd( VERTEX2F(16 * 303, 16 * 123) );
    179e:	60 eb       	ldi	r22, 0xB0	; 176
    17a0:	77 e0       	ldi	r23, 0x07	; 7
    17a2:	88 e7       	ldi	r24, 0x78	; 120
    17a4:	99 e4       	ldi	r25, 0x49	; 73
    17a6:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
	
	cmd(COLOR_RGB(0,0,0));
    17aa:	60 e0       	ldi	r22, 0x00	; 0
    17ac:	70 e0       	ldi	r23, 0x00	; 0
    17ae:	80 e0       	ldi	r24, 0x00	; 0
    17b0:	94 e0       	ldi	r25, 0x04	; 4
    17b2:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
	
	volatile bool found = TRUE;
    17b6:	81 e0       	ldi	r24, 0x01	; 1
    17b8:	8f a3       	std	Y+39, r24	; 0x27
	
	if(output_one->current < 5)
	{
		output_one_zero_current = TRUE;
	}
	if(output_two->current < 5 && program_state->program == FOURTY_ONE_DUAL)
    17ba:	d1 01       	movw	r26, r2
    17bc:	56 96       	adiw	r26, 0x16	; 22
    17be:	8d 91       	ld	r24, X+
    17c0:	9c 91       	ld	r25, X
    17c2:	57 97       	sbiw	r26, 0x17	; 23
    17c4:	05 97       	sbiw	r24, 0x05	; 5
    17c6:	28 f4       	brcc	.+10     	; 0x17d2 <draw_message_box+0xd8>
    17c8:	61 e0       	ldi	r22, 0x01	; 1
    17ca:	f4 01       	movw	r30, r8
    17cc:	84 81       	ldd	r24, Z+4	; 0x04
    17ce:	82 30       	cpi	r24, 0x02	; 2
    17d0:	09 f0       	breq	.+2      	; 0x17d4 <draw_message_box+0xda>
	
	cmd(COLOR_RGB(0,0,0));
	
	volatile bool found = TRUE;
	bool output_one_zero_current = FALSE;
	bool output_two_zero_current = FALSE;
    17d2:	60 e0       	ldi	r22, 0x00	; 0
	{
		output_two_zero_current = TRUE;
	}
	
	//**************************************************
	wdt_reset(); // WATCH DOG TIMER RESET
    17d4:	a8 95       	wdr
	//**************************************************
	
	if(counters->update_message_box_counter >= 2000)
    17d6:	d2 01       	movw	r26, r4
    17d8:	5c 96       	adiw	r26, 0x1c	; 28
    17da:	8d 91       	ld	r24, X+
    17dc:	9c 91       	ld	r25, X
    17de:	5d 97       	sbiw	r26, 0x1d	; 29
    17e0:	80 3d       	cpi	r24, 0xD0	; 208
    17e2:	97 40       	sbci	r25, 0x07	; 7
    17e4:	08 f4       	brcc	.+2      	; 0x17e8 <draw_message_box+0xee>
    17e6:	a0 c0       	rjmp	.+320    	; 0x1928 <draw_message_box+0x22e>
	
	volatile bool found = TRUE;
	bool output_one_zero_current = FALSE;
	bool output_two_zero_current = FALSE;
	
	if(output_one->current < 5)
    17e8:	f3 01       	movw	r30, r6
    17ea:	46 89       	ldd	r20, Z+22	; 0x16
    17ec:	57 89       	ldd	r21, Z+23	; 0x17
	//**************************************************
	
	if(counters->update_message_box_counter >= 2000)
	{
		bool message_prompters[16] = {
			program_state->pson_low, output_one->over_temp_error_uncleared1, output_one->over_temp_error_uncleared2, 
    17ee:	d4 01       	movw	r26, r8
    17f0:	15 96       	adiw	r26, 0x05	; 5
    17f2:	8c 91       	ld	r24, X
	wdt_reset(); // WATCH DOG TIMER RESET
	//**************************************************
	
	if(counters->update_message_box_counter >= 2000)
	{
		bool message_prompters[16] = {
    17f4:	89 83       	std	Y+1, r24	; 0x01
    17f6:	93 85       	ldd	r25, Z+11	; 0x0b
    17f8:	9a 83       	std	Y+2, r25	; 0x02
    17fa:	94 85       	ldd	r25, Z+12	; 0x0c
    17fc:	9b 83       	std	Y+3, r25	; 0x03
    17fe:	f1 01       	movw	r30, r2
    1800:	93 85       	ldd	r25, Z+11	; 0x0b
    1802:	9c 83       	std	Y+4, r25	; 0x04
    1804:	94 85       	ldd	r25, Z+12	; 0x0c
    1806:	9d 83       	std	Y+5, r25	; 0x05
    1808:	d3 01       	movw	r26, r6
    180a:	18 96       	adiw	r26, 0x08	; 8
    180c:	9c 91       	ld	r25, X
    180e:	9e 83       	std	Y+6, r25	; 0x06
    1810:	90 85       	ldd	r25, Z+8	; 0x08
    1812:	9f 83       	std	Y+7, r25	; 0x07
    1814:	91 e0       	ldi	r25, 0x01	; 1
    1816:	45 30       	cpi	r20, 0x05	; 5
    1818:	51 05       	cpc	r21, r1
    181a:	08 f0       	brcs	.+2      	; 0x181e <draw_message_box+0x124>
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	98 87       	std	Y+8, r25	; 0x08
    1820:	69 87       	std	Y+9, r22	; 0x09
    1822:	f4 01       	movw	r30, r8
    1824:	91 a9       	ldd	r25, Z+49	; 0x31
    1826:	9a 87       	std	Y+10, r25	; 0x0a
			program_state->pson_low, output_one->over_temp_error_uncleared1, output_one->over_temp_error_uncleared2, 
			output_two->over_temp_error_uncleared1, output_two->over_temp_error_uncleared2, output_one->voltage_drift_error, 
			output_two->voltage_drift_error, output_one_zero_current, output_two_zero_current, program_state->calibrating_mode_clicked,
			output_one->hit_max_current && !program_state->pson_low, output_two->hit_max_current && !program_state->pson_low, 
    1828:	d3 01       	movw	r26, r6
    182a:	15 96       	adiw	r26, 0x05	; 5
    182c:	9c 91       	ld	r25, X
    182e:	99 23       	and	r25, r25
    1830:	19 f0       	breq	.+6      	; 0x1838 <draw_message_box+0x13e>
    1832:	21 e0       	ldi	r18, 0x01	; 1
    1834:	28 27       	eor	r18, r24
    1836:	02 c0       	rjmp	.+4      	; 0x183c <draw_message_box+0x142>
    1838:	20 e0       	ldi	r18, 0x00	; 0
    183a:	30 e0       	ldi	r19, 0x00	; 0
	wdt_reset(); // WATCH DOG TIMER RESET
	//**************************************************
	
	if(counters->update_message_box_counter >= 2000)
	{
		bool message_prompters[16] = {
    183c:	21 70       	andi	r18, 0x01	; 1
    183e:	2b 87       	std	Y+11, r18	; 0x0b
			program_state->pson_low, output_one->over_temp_error_uncleared1, output_one->over_temp_error_uncleared2, 
			output_two->over_temp_error_uncleared1, output_two->over_temp_error_uncleared2, output_one->voltage_drift_error, 
			output_two->voltage_drift_error, output_one_zero_current, output_two_zero_current, program_state->calibrating_mode_clicked,
			output_one->hit_max_current && !program_state->pson_low, output_two->hit_max_current && !program_state->pson_low, 
    1840:	f1 01       	movw	r30, r2
    1842:	95 81       	ldd	r25, Z+5	; 0x05
    1844:	99 23       	and	r25, r25
    1846:	19 f0       	breq	.+6      	; 0x184e <draw_message_box+0x154>
    1848:	21 e0       	ldi	r18, 0x01	; 1
    184a:	28 27       	eor	r18, r24
    184c:	02 c0       	rjmp	.+4      	; 0x1852 <draw_message_box+0x158>
    184e:	20 e0       	ldi	r18, 0x00	; 0
    1850:	30 e0       	ldi	r19, 0x00	; 0
	wdt_reset(); // WATCH DOG TIMER RESET
	//**************************************************
	
	if(counters->update_message_box_counter >= 2000)
	{
		bool message_prompters[16] = {
    1852:	21 70       	andi	r18, 0x01	; 1
    1854:	2c 87       	std	Y+12, r18	; 0x0c
			program_state->pson_low, output_one->over_temp_error_uncleared1, output_one->over_temp_error_uncleared2, 
			output_two->over_temp_error_uncleared1, output_two->over_temp_error_uncleared2, output_one->voltage_drift_error, 
			output_two->voltage_drift_error, output_one_zero_current, output_two_zero_current, program_state->calibrating_mode_clicked,
			output_one->hit_max_current && !program_state->pson_low, output_two->hit_max_current && !program_state->pson_low, 
			output_one->hit_max_voltage && !program_state->pson_low, output_two->hit_max_voltage && !program_state->pson_low,
    1856:	d3 01       	movw	r26, r6
    1858:	17 96       	adiw	r26, 0x07	; 7
    185a:	9c 91       	ld	r25, X
    185c:	99 23       	and	r25, r25
    185e:	19 f0       	breq	.+6      	; 0x1866 <draw_message_box+0x16c>
    1860:	21 e0       	ldi	r18, 0x01	; 1
    1862:	28 27       	eor	r18, r24
    1864:	02 c0       	rjmp	.+4      	; 0x186a <draw_message_box+0x170>
    1866:	20 e0       	ldi	r18, 0x00	; 0
    1868:	30 e0       	ldi	r19, 0x00	; 0
	wdt_reset(); // WATCH DOG TIMER RESET
	//**************************************************
	
	if(counters->update_message_box_counter >= 2000)
	{
		bool message_prompters[16] = {
    186a:	21 70       	andi	r18, 0x01	; 1
    186c:	2d 87       	std	Y+13, r18	; 0x0d
			program_state->pson_low, output_one->over_temp_error_uncleared1, output_one->over_temp_error_uncleared2, 
			output_two->over_temp_error_uncleared1, output_two->over_temp_error_uncleared2, output_one->voltage_drift_error, 
			output_two->voltage_drift_error, output_one_zero_current, output_two_zero_current, program_state->calibrating_mode_clicked,
			output_one->hit_max_current && !program_state->pson_low, output_two->hit_max_current && !program_state->pson_low, 
			output_one->hit_max_voltage && !program_state->pson_low, output_two->hit_max_voltage && !program_state->pson_low,
    186e:	f1 01       	movw	r30, r2
    1870:	97 81       	ldd	r25, Z+7	; 0x07
    1872:	99 23       	and	r25, r25
    1874:	19 f0       	breq	.+6      	; 0x187c <draw_message_box+0x182>
    1876:	21 e0       	ldi	r18, 0x01	; 1
    1878:	28 27       	eor	r18, r24
    187a:	02 c0       	rjmp	.+4      	; 0x1880 <draw_message_box+0x186>
    187c:	20 e0       	ldi	r18, 0x00	; 0
    187e:	30 e0       	ldi	r19, 0x00	; 0
	wdt_reset(); // WATCH DOG TIMER RESET
	//**************************************************
	
	if(counters->update_message_box_counter >= 2000)
	{
		bool message_prompters[16] = {
    1880:	21 70       	andi	r18, 0x01	; 1
    1882:	2e 87       	std	Y+14, r18	; 0x0e
			program_state->pson_low, output_one->over_temp_error_uncleared1, output_one->over_temp_error_uncleared2, 
			output_two->over_temp_error_uncleared1, output_two->over_temp_error_uncleared2, output_one->voltage_drift_error, 
			output_two->voltage_drift_error, output_one_zero_current, output_two_zero_current, program_state->calibrating_mode_clicked,
			output_one->hit_max_current && !program_state->pson_low, output_two->hit_max_current && !program_state->pson_low, 
			output_one->hit_max_voltage && !program_state->pson_low, output_two->hit_max_voltage && !program_state->pson_low,
			output_one->hit_min_current && !program_state->pson_low && !(output_one_zero_current), 
    1884:	d3 01       	movw	r26, r6
    1886:	16 96       	adiw	r26, 0x06	; 6
    1888:	9c 91       	ld	r25, X
    188a:	99 23       	and	r25, r25
    188c:	31 f0       	breq	.+12     	; 0x189a <draw_message_box+0x1a0>
    188e:	81 11       	cpse	r24, r1
    1890:	04 c0       	rjmp	.+8      	; 0x189a <draw_message_box+0x1a0>
    1892:	91 e0       	ldi	r25, 0x01	; 1
    1894:	45 30       	cpi	r20, 0x05	; 5
    1896:	51 05       	cpc	r21, r1
    1898:	08 f4       	brcc	.+2      	; 0x189c <draw_message_box+0x1a2>
    189a:	90 e0       	ldi	r25, 0x00	; 0
	wdt_reset(); // WATCH DOG TIMER RESET
	//**************************************************
	
	if(counters->update_message_box_counter >= 2000)
	{
		bool message_prompters[16] = {
    189c:	91 70       	andi	r25, 0x01	; 1
    189e:	9f 87       	std	Y+15, r25	; 0x0f
			output_two->over_temp_error_uncleared1, output_two->over_temp_error_uncleared2, output_one->voltage_drift_error, 
			output_two->voltage_drift_error, output_one_zero_current, output_two_zero_current, program_state->calibrating_mode_clicked,
			output_one->hit_max_current && !program_state->pson_low, output_two->hit_max_current && !program_state->pson_low, 
			output_one->hit_max_voltage && !program_state->pson_low, output_two->hit_max_voltage && !program_state->pson_low,
			output_one->hit_min_current && !program_state->pson_low && !(output_one_zero_current), 
			output_two->hit_min_current && !program_state->pson_low && !(output_two_zero_current),
    18a0:	f1 01       	movw	r30, r2
    18a2:	96 81       	ldd	r25, Z+6	; 0x06
    18a4:	99 23       	and	r25, r25
    18a6:	29 f0       	breq	.+10     	; 0x18b2 <draw_message_box+0x1b8>
    18a8:	81 11       	cpse	r24, r1
    18aa:	03 c0       	rjmp	.+6      	; 0x18b2 <draw_message_box+0x1b8>
    18ac:	81 e0       	ldi	r24, 0x01	; 1
    18ae:	86 27       	eor	r24, r22
    18b0:	02 c0       	rjmp	.+4      	; 0x18b6 <draw_message_box+0x1bc>
    18b2:	80 e0       	ldi	r24, 0x00	; 0
    18b4:	90 e0       	ldi	r25, 0x00	; 0
	wdt_reset(); // WATCH DOG TIMER RESET
	//**************************************************
	
	if(counters->update_message_box_counter >= 2000)
	{
		bool message_prompters[16] = {
    18b6:	81 70       	andi	r24, 0x01	; 1
    18b8:	88 8b       	std	Y+16, r24	; 0x10
			output_one->hit_max_current && !program_state->pson_low, output_two->hit_max_current && !program_state->pson_low, 
			output_one->hit_max_voltage && !program_state->pson_low, output_two->hit_max_voltage && !program_state->pson_low,
			output_one->hit_min_current && !program_state->pson_low && !(output_one_zero_current), 
			output_two->hit_min_current && !program_state->pson_low && !(output_two_zero_current),
			};
		found = FALSE;
    18ba:	1f a2       	std	Y+39, r1	; 0x27
		for(int i = message_idx + 1; i < 16; ++i) //looks for next active message from the idx towards the last idx
    18bc:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <message_idx.5517>
    18c0:	90 91 07 20 	lds	r25, 0x2007	; 0x802007 <message_idx.5517+0x1>
    18c4:	01 96       	adiw	r24, 0x01	; 1
    18c6:	80 31       	cpi	r24, 0x10	; 16
    18c8:	91 05       	cpc	r25, r1
    18ca:	7c f4       	brge	.+30     	; 0x18ea <draw_message_box+0x1f0>
		{ 
			if(message_prompters[i] > 0)
    18cc:	e1 e0       	ldi	r30, 0x01	; 1
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	ec 0f       	add	r30, r28
    18d2:	fd 1f       	adc	r31, r29
    18d4:	e8 0f       	add	r30, r24
    18d6:	f9 1f       	adc	r31, r25
    18d8:	20 81       	ld	r18, Z
    18da:	22 23       	and	r18, r18
    18dc:	99 f3       	breq	.-26     	; 0x18c4 <draw_message_box+0x1ca>
			{
				message_idx = i;
    18de:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <message_idx.5517>
    18e2:	90 93 07 20 	sts	0x2007, r25	; 0x802007 <message_idx.5517+0x1>
				found = TRUE;
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	8f a3       	std	Y+39, r24	; 0x27
				break;
			}
		}
		if(found == FALSE) //looks for next active message from the first idx towards the current idx
    18ea:	8f a1       	ldd	r24, Y+39	; 0x27
    18ec:	81 11       	cpse	r24, r1
    18ee:	17 c0       	rjmp	.+46     	; 0x191e <draw_message_box+0x224>
		{ 
			for(int i = 0; i <= message_idx; ++i)
    18f0:	20 91 06 20 	lds	r18, 0x2006	; 0x802006 <message_idx.5517>
    18f4:	30 91 07 20 	lds	r19, 0x2007	; 0x802007 <message_idx.5517+0x1>
    18f8:	fe 01       	movw	r30, r28
    18fa:	31 96       	adiw	r30, 0x01	; 1
    18fc:	80 e0       	ldi	r24, 0x00	; 0
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	28 17       	cp	r18, r24
    1902:	39 07       	cpc	r19, r25
    1904:	64 f0       	brlt	.+24     	; 0x191e <draw_message_box+0x224>
			{
				if(message_prompters[i] > 0) 
    1906:	41 91       	ld	r20, Z+
    1908:	44 23       	and	r20, r20
    190a:	39 f0       	breq	.+14     	; 0x191a <draw_message_box+0x220>
				{
					message_idx = i;
    190c:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <message_idx.5517>
    1910:	90 93 07 20 	sts	0x2007, r25	; 0x802007 <message_idx.5517+0x1>
					found = TRUE;
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	8f a3       	std	Y+39, r24	; 0x27
					break;
    1918:	02 c0       	rjmp	.+4      	; 0x191e <draw_message_box+0x224>
				break;
			}
		}
		if(found == FALSE) //looks for next active message from the first idx towards the current idx
		{ 
			for(int i = 0; i <= message_idx; ++i)
    191a:	01 96       	adiw	r24, 0x01	; 1
    191c:	f1 cf       	rjmp	.-30     	; 0x1900 <draw_message_box+0x206>
					break;
				}
			}
		}
		
		counters->update_message_box_counter = 0;
    191e:	d2 01       	movw	r26, r4
    1920:	5c 96       	adiw	r26, 0x1c	; 28
    1922:	1d 92       	st	X+, r1
    1924:	1c 92       	st	X, r1
    1926:	5d 97       	sbiw	r26, 0x1d	; 29
	}
	if (!found)
    1928:	8f a1       	ldd	r24, Y+39	; 0x27
    192a:	81 11       	cpse	r24, r1
    192c:	06 c0       	rjmp	.+12     	; 0x193a <draw_message_box+0x240>
	{
		message_idx = -1;
    192e:	8f ef       	ldi	r24, 0xFF	; 255
    1930:	9f ef       	ldi	r25, 0xFF	; 255
    1932:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <message_idx.5517>
    1936:	90 93 07 20 	sts	0x2007, r25	; 0x802007 <message_idx.5517+0x1>
	}

	char str_com_addres_failed1[3] = "41\0";
    193a:	80 91 db 20 	lds	r24, 0x20DB	; 0x8020db <CLKEXT.5246+0xd3>
    193e:	90 91 dc 20 	lds	r25, 0x20DC	; 0x8020dc <CLKEXT.5246+0xd4>
    1942:	a0 91 dd 20 	lds	r26, 0x20DD	; 0x8020dd <CLKEXT.5246+0xd5>
    1946:	8c a3       	std	Y+36, r24	; 0x24
    1948:	9d a3       	std	Y+37, r25	; 0x25
    194a:	ae a3       	std	Y+38, r26	; 0x26
	char str_com_addres_failed2[3] = "40\0";
    194c:	80 91 de 20 	lds	r24, 0x20DE	; 0x8020de <CLKEXT.5246+0xd6>
    1950:	90 91 df 20 	lds	r25, 0x20DF	; 0x8020df <CLKEXT.5246+0xd7>
    1954:	a0 91 e0 20 	lds	r26, 0x20E0	; 0x8020e0 <CLKEXT.5246+0xd8>
    1958:	89 a3       	std	Y+33, r24	; 0x21
    195a:	9a a3       	std	Y+34, r25	; 0x22
    195c:	ab a3       	std	Y+35, r26	; 0x23
	char str_com_addres_failed3[3] = "4D\0";
    195e:	80 91 e1 20 	lds	r24, 0x20E1	; 0x8020e1 <CLKEXT.5246+0xd9>
    1962:	90 91 e2 20 	lds	r25, 0x20E2	; 0x8020e2 <CLKEXT.5246+0xda>
    1966:	a0 91 e3 20 	lds	r26, 0x20E3	; 0x8020e3 <CLKEXT.5246+0xdb>
    196a:	8e 8f       	std	Y+30, r24	; 0x1e
    196c:	9f 8f       	std	Y+31, r25	; 0x1f
    196e:	a8 a3       	std	Y+32, r26	; 0x20
	char str_com_addres_failed4[3] = "4E\0";
    1970:	80 91 e4 20 	lds	r24, 0x20E4	; 0x8020e4 <CLKEXT.5246+0xdc>
    1974:	90 91 e5 20 	lds	r25, 0x20E5	; 0x8020e5 <CLKEXT.5246+0xdd>
    1978:	a0 91 e6 20 	lds	r26, 0x20E6	; 0x8020e6 <CLKEXT.5246+0xde>
    197c:	8b 8f       	std	Y+27, r24	; 0x1b
    197e:	9c 8f       	std	Y+28, r25	; 0x1c
    1980:	ad 8f       	std	Y+29, r26	; 0x1d
	char str_com_addres_failed5[3] = "4C\0";
    1982:	80 91 e7 20 	lds	r24, 0x20E7	; 0x8020e7 <CLKEXT.5246+0xdf>
    1986:	90 91 e8 20 	lds	r25, 0x20E8	; 0x8020e8 <CLKEXT.5246+0xe0>
    198a:	a0 91 e9 20 	lds	r26, 0x20E9	; 0x8020e9 <CLKEXT.5246+0xe1>
    198e:	88 8f       	std	Y+24, r24	; 0x18
    1990:	99 8f       	std	Y+25, r25	; 0x19
    1992:	aa 8f       	std	Y+26, r26	; 0x1a
	char str_com_addres_failed6[4] = "EEP\0";
    1994:	80 91 ea 20 	lds	r24, 0x20EA	; 0x8020ea <CLKEXT.5246+0xe2>
    1998:	90 91 eb 20 	lds	r25, 0x20EB	; 0x8020eb <CLKEXT.5246+0xe3>
    199c:	a0 91 ec 20 	lds	r26, 0x20EC	; 0x8020ec <CLKEXT.5246+0xe4>
    19a0:	b0 91 ed 20 	lds	r27, 0x20ED	; 0x8020ed <CLKEXT.5246+0xe5>
    19a4:	8c 8b       	std	Y+20, r24	; 0x14
    19a6:	9d 8b       	std	Y+21, r25	; 0x15
    19a8:	ae 8b       	std	Y+22, r26	; 0x16
    19aa:	bf 8b       	std	Y+23, r27	; 0x17
	
	
	if (counters->real_time_counter % 1000 < 500)
    19ac:	f2 01       	movw	r30, r4
    19ae:	24 89       	ldd	r18, Z+20	; 0x14
    19b0:	35 89       	ldd	r19, Z+21	; 0x15
    19b2:	46 89       	ldd	r20, Z+22	; 0x16
    19b4:	57 89       	ldd	r21, Z+23	; 0x17
    19b6:	60 8d       	ldd	r22, Z+24	; 0x18
    19b8:	71 8d       	ldd	r23, Z+25	; 0x19
    19ba:	88 ee       	ldi	r24, 0xE8	; 232
    19bc:	a8 2e       	mov	r10, r24
    19be:	93 e0       	ldi	r25, 0x03	; 3
    19c0:	b9 2e       	mov	r11, r25
    19c2:	c1 2c       	mov	r12, r1
    19c4:	d1 2c       	mov	r13, r1
    19c6:	e1 2c       	mov	r14, r1
    19c8:	f1 2c       	mov	r15, r1
    19ca:	00 e0       	ldi	r16, 0x00	; 0
    19cc:	10 e0       	ldi	r17, 0x00	; 0
    19ce:	82 8d       	ldd	r24, Z+26	; 0x1a
    19d0:	93 8d       	ldd	r25, Z+27	; 0x1b
    19d2:	0e 94 43 38 	call	0x7086	; 0x7086 <__umoddi3>
    19d6:	23 3f       	cpi	r18, 0xF3	; 243
    19d8:	31 40       	sbci	r19, 0x01	; 1
    19da:	41 05       	cpc	r20, r1
    19dc:	51 05       	cpc	r21, r1
    19de:	61 05       	cpc	r22, r1
    19e0:	71 05       	cpc	r23, r1
    19e2:	81 05       	cpc	r24, r1
    19e4:	91 05       	cpc	r25, r1
    19e6:	11 f0       	breq	.+4      	; 0x19ec <draw_message_box+0x2f2>
    19e8:	08 f0       	brcs	.+2      	; 0x19ec <draw_message_box+0x2f2>
    19ea:	32 c2       	rjmp	.+1124   	; 0x1e50 <draw_message_box+0x756>
	{
		if (program_state->comm_error1_to_display || program_state->comm_error2_to_display || program_state->comm_error3_to_display || 
    19ec:	d4 01       	movw	r26, r8
    19ee:	98 96       	adiw	r26, 0x28	; 40
    19f0:	8c 91       	ld	r24, X
    19f2:	98 97       	sbiw	r26, 0x28	; 40
    19f4:	81 11       	cpse	r24, r1
    19f6:	19 c0       	rjmp	.+50     	; 0x1a2a <draw_message_box+0x330>
    19f8:	99 96       	adiw	r26, 0x29	; 41
    19fa:	9c 91       	ld	r25, X
    19fc:	99 97       	sbiw	r26, 0x29	; 41
    19fe:	91 11       	cpse	r25, r1
    1a00:	14 c0       	rjmp	.+40     	; 0x1a2a <draw_message_box+0x330>
    1a02:	9a 96       	adiw	r26, 0x2a	; 42
    1a04:	9c 91       	ld	r25, X
    1a06:	9a 97       	sbiw	r26, 0x2a	; 42
    1a08:	91 11       	cpse	r25, r1
    1a0a:	0f c0       	rjmp	.+30     	; 0x1a2a <draw_message_box+0x330>
    1a0c:	9b 96       	adiw	r26, 0x2b	; 43
    1a0e:	9c 91       	ld	r25, X
    1a10:	9b 97       	sbiw	r26, 0x2b	; 43
    1a12:	91 11       	cpse	r25, r1
    1a14:	0a c0       	rjmp	.+20     	; 0x1a2a <draw_message_box+0x330>
		program_state->comm_error4_to_display || program_state->comm_error5_to_display || program_state->comm_error6_to_display)
    1a16:	9c 96       	adiw	r26, 0x2c	; 44
    1a18:	9c 91       	ld	r25, X
    1a1a:	9c 97       	sbiw	r26, 0x2c	; 44
    1a1c:	91 11       	cpse	r25, r1
    1a1e:	05 c0       	rjmp	.+10     	; 0x1a2a <draw_message_box+0x330>
    1a20:	9d 96       	adiw	r26, 0x2d	; 45
    1a22:	9c 91       	ld	r25, X
    1a24:	99 23       	and	r25, r25
    1a26:	09 f4       	brne	.+2      	; 0x1a2a <draw_message_box+0x330>
    1a28:	94 c0       	rjmp	.+296    	; 0x1b52 <draw_message_box+0x458>
		{
			//**************************************************
			wdt_reset(); // WATCH DOG TIMER RESET
    1a2a:	a8 95       	wdr
			//**************************************************
			
			char addresses_to_display[19] = "\0";
    1a2c:	20 91 10 20 	lds	r18, 0x2010	; 0x802010 <CLKEXT.5246+0x8>
    1a30:	30 91 11 20 	lds	r19, 0x2011	; 0x802011 <CLKEXT.5246+0x9>
    1a34:	29 83       	std	Y+1, r18	; 0x01
    1a36:	3a 83       	std	Y+2, r19	; 0x02
    1a38:	fe 01       	movw	r30, r28
    1a3a:	33 96       	adiw	r30, 0x03	; 3
    1a3c:	91 e1       	ldi	r25, 0x11	; 17
    1a3e:	df 01       	movw	r26, r30
    1a40:	1d 92       	st	X+, r1
    1a42:	9a 95       	dec	r25
    1a44:	e9 f7       	brne	.-6      	; 0x1a40 <draw_message_box+0x346>
			if (program_state->comm_error1_to_display)
    1a46:	88 23       	and	r24, r24
    1a48:	69 f0       	breq	.+26     	; 0x1a64 <draw_message_box+0x36a>
			{
				strcat(addresses_to_display, " ");
    1a4a:	66 e7       	ldi	r22, 0x76	; 118
    1a4c:	70 e2       	ldi	r23, 0x20	; 32
    1a4e:	ce 01       	movw	r24, r28
    1a50:	01 96       	adiw	r24, 0x01	; 1
    1a52:	0e 94 e4 39 	call	0x73c8	; 0x73c8 <strcat>
				strcat(addresses_to_display, str_com_addres_failed1);
    1a56:	be 01       	movw	r22, r28
    1a58:	6c 5d       	subi	r22, 0xDC	; 220
    1a5a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a5c:	ce 01       	movw	r24, r28
    1a5e:	01 96       	adiw	r24, 0x01	; 1
    1a60:	0e 94 e4 39 	call	0x73c8	; 0x73c8 <strcat>
			}
			if (program_state->comm_error2_to_display)
    1a64:	f4 01       	movw	r30, r8
    1a66:	81 a5       	ldd	r24, Z+41	; 0x29
    1a68:	88 23       	and	r24, r24
    1a6a:	69 f0       	breq	.+26     	; 0x1a86 <draw_message_box+0x38c>
			{
				strcat(addresses_to_display, " ");
    1a6c:	66 e7       	ldi	r22, 0x76	; 118
    1a6e:	70 e2       	ldi	r23, 0x20	; 32
    1a70:	ce 01       	movw	r24, r28
    1a72:	01 96       	adiw	r24, 0x01	; 1
    1a74:	0e 94 e4 39 	call	0x73c8	; 0x73c8 <strcat>
				strcat(addresses_to_display, str_com_addres_failed2);
    1a78:	be 01       	movw	r22, r28
    1a7a:	6f 5d       	subi	r22, 0xDF	; 223
    1a7c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a7e:	ce 01       	movw	r24, r28
    1a80:	01 96       	adiw	r24, 0x01	; 1
    1a82:	0e 94 e4 39 	call	0x73c8	; 0x73c8 <strcat>
			}
			if (program_state->comm_error3_to_display)
    1a86:	d4 01       	movw	r26, r8
    1a88:	9a 96       	adiw	r26, 0x2a	; 42
    1a8a:	8c 91       	ld	r24, X
    1a8c:	88 23       	and	r24, r24
    1a8e:	69 f0       	breq	.+26     	; 0x1aaa <draw_message_box+0x3b0>
			{
				strcat(addresses_to_display, " ");
    1a90:	66 e7       	ldi	r22, 0x76	; 118
    1a92:	70 e2       	ldi	r23, 0x20	; 32
    1a94:	ce 01       	movw	r24, r28
    1a96:	01 96       	adiw	r24, 0x01	; 1
    1a98:	0e 94 e4 39 	call	0x73c8	; 0x73c8 <strcat>
				strcat(addresses_to_display, str_com_addres_failed3);
    1a9c:	be 01       	movw	r22, r28
    1a9e:	62 5e       	subi	r22, 0xE2	; 226
    1aa0:	7f 4f       	sbci	r23, 0xFF	; 255
    1aa2:	ce 01       	movw	r24, r28
    1aa4:	01 96       	adiw	r24, 0x01	; 1
    1aa6:	0e 94 e4 39 	call	0x73c8	; 0x73c8 <strcat>
			}
			if (program_state->comm_error4_to_display)
    1aaa:	f4 01       	movw	r30, r8
    1aac:	83 a5       	ldd	r24, Z+43	; 0x2b
    1aae:	88 23       	and	r24, r24
    1ab0:	69 f0       	breq	.+26     	; 0x1acc <draw_message_box+0x3d2>
			{
				strcat(addresses_to_display, " ");
    1ab2:	66 e7       	ldi	r22, 0x76	; 118
    1ab4:	70 e2       	ldi	r23, 0x20	; 32
    1ab6:	ce 01       	movw	r24, r28
    1ab8:	01 96       	adiw	r24, 0x01	; 1
    1aba:	0e 94 e4 39 	call	0x73c8	; 0x73c8 <strcat>
				strcat(addresses_to_display, str_com_addres_failed4);
    1abe:	be 01       	movw	r22, r28
    1ac0:	65 5e       	subi	r22, 0xE5	; 229
    1ac2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ac4:	ce 01       	movw	r24, r28
    1ac6:	01 96       	adiw	r24, 0x01	; 1
    1ac8:	0e 94 e4 39 	call	0x73c8	; 0x73c8 <strcat>
			}
			if (program_state->comm_error5_to_display)
    1acc:	d4 01       	movw	r26, r8
    1ace:	9c 96       	adiw	r26, 0x2c	; 44
    1ad0:	8c 91       	ld	r24, X
    1ad2:	88 23       	and	r24, r24
    1ad4:	69 f0       	breq	.+26     	; 0x1af0 <draw_message_box+0x3f6>
			{
				strcat(addresses_to_display, " ");
    1ad6:	66 e7       	ldi	r22, 0x76	; 118
    1ad8:	70 e2       	ldi	r23, 0x20	; 32
    1ada:	ce 01       	movw	r24, r28
    1adc:	01 96       	adiw	r24, 0x01	; 1
    1ade:	0e 94 e4 39 	call	0x73c8	; 0x73c8 <strcat>
				strcat(addresses_to_display, str_com_addres_failed5);
    1ae2:	be 01       	movw	r22, r28
    1ae4:	68 5e       	subi	r22, 0xE8	; 232
    1ae6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ae8:	ce 01       	movw	r24, r28
    1aea:	01 96       	adiw	r24, 0x01	; 1
    1aec:	0e 94 e4 39 	call	0x73c8	; 0x73c8 <strcat>
			}
			if (program_state->comm_error6_to_display)
    1af0:	f4 01       	movw	r30, r8
    1af2:	85 a5       	ldd	r24, Z+45	; 0x2d
    1af4:	88 23       	and	r24, r24
    1af6:	69 f0       	breq	.+26     	; 0x1b12 <draw_message_box+0x418>
			{
				strcat(addresses_to_display, " ");
    1af8:	66 e7       	ldi	r22, 0x76	; 118
    1afa:	70 e2       	ldi	r23, 0x20	; 32
    1afc:	ce 01       	movw	r24, r28
    1afe:	01 96       	adiw	r24, 0x01	; 1
    1b00:	0e 94 e4 39 	call	0x73c8	; 0x73c8 <strcat>
				strcat(addresses_to_display, str_com_addres_failed6);
    1b04:	be 01       	movw	r22, r28
    1b06:	6c 5e       	subi	r22, 0xEC	; 236
    1b08:	7f 4f       	sbci	r23, 0xFF	; 255
    1b0a:	ce 01       	movw	r24, r28
    1b0c:	01 96       	adiw	r24, 0x01	; 1
    1b0e:	0e 94 e4 39 	call	0x73c8	; 0x73c8 <strcat>
			}
			
			
			cmd(COLOR_RGB(255, 0, 0));
    1b12:	6f ef       	ldi	r22, 0xFF	; 255
    1b14:	70 e0       	ldi	r23, 0x00	; 0
    1b16:	80 e0       	ldi	r24, 0x00	; 0
    1b18:	94 e0       	ldi	r25, 0x04	; 4
    1b1a:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
			cmd_text(90, 112, 26, 0, messages.communication_error);
    1b1e:	00 91 4e 25 	lds	r16, 0x254E	; 0x80254e <messages+0x32>
    1b22:	10 91 4f 25 	lds	r17, 0x254F	; 0x80254f <messages+0x33>
    1b26:	20 e0       	ldi	r18, 0x00	; 0
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	4a e1       	ldi	r20, 0x1A	; 26
    1b2c:	50 e0       	ldi	r21, 0x00	; 0
    1b2e:	60 e7       	ldi	r22, 0x70	; 112
    1b30:	70 e0       	ldi	r23, 0x00	; 0
    1b32:	8a e5       	ldi	r24, 0x5A	; 90
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	0e 94 6f 03 	call	0x6de	; 0x6de <cmd_text>
			cmd_text(190, 112, 26, 0, addresses_to_display);
    1b3a:	8e 01       	movw	r16, r28
    1b3c:	0f 5f       	subi	r16, 0xFF	; 255
    1b3e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b40:	20 e0       	ldi	r18, 0x00	; 0
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	4a e1       	ldi	r20, 0x1A	; 26
    1b46:	50 e0       	ldi	r21, 0x00	; 0
    1b48:	60 e7       	ldi	r22, 0x70	; 112
    1b4a:	70 e0       	ldi	r23, 0x00	; 0
    1b4c:	8e eb       	ldi	r24, 0xBE	; 190
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	97 c1       	rjmp	.+814    	; 0x1e80 <draw_message_box+0x786>
			
		}
		else
		{
			cmd(COLOR_RGB(255,0,0));
    1b52:	6f ef       	ldi	r22, 0xFF	; 255
    1b54:	70 e0       	ldi	r23, 0x00	; 0
    1b56:	80 e0       	ldi	r24, 0x00	; 0
    1b58:	94 e0       	ldi	r25, 0x04	; 4
    1b5a:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
			switch(message_idx)
    1b5e:	e0 91 06 20 	lds	r30, 0x2006	; 0x802006 <message_idx.5517>
    1b62:	f0 91 07 20 	lds	r31, 0x2007	; 0x802007 <message_idx.5517+0x1>
    1b66:	31 96       	adiw	r30, 0x01	; 1
    1b68:	e1 31       	cpi	r30, 0x11	; 17
    1b6a:	f1 05       	cpc	r31, r1
    1b6c:	08 f0       	brcs	.+2      	; 0x1b70 <draw_message_box+0x476>
    1b6e:	8a c1       	rjmp	.+788    	; 0x1e84 <draw_message_box+0x78a>
    1b70:	e2 50       	subi	r30, 0x02	; 2
    1b72:	ff 4f       	sbci	r31, 0xFF	; 255
    1b74:	0c 94 3d 38 	jmp	0x707a	; 0x707a <__tablejump2__>
					break;
				}
				
				case 1:
				{
					if(output_one->over_temp_error1 || output_one->over_temp_half_second_count)
    1b78:	d3 01       	movw	r26, r6
    1b7a:	19 96       	adiw	r26, 0x09	; 9
    1b7c:	8c 91       	ld	r24, X
    1b7e:	19 97       	sbiw	r26, 0x09	; 9
    1b80:	81 11       	cpse	r24, r1
    1b82:	06 c0       	rjmp	.+12     	; 0x1b90 <draw_message_box+0x496>
    1b84:	da 96       	adiw	r26, 0x3a	; 58
    1b86:	8d 91       	ld	r24, X+
    1b88:	9c 91       	ld	r25, X
    1b8a:	db 97       	sbiw	r26, 0x3b	; 59
    1b8c:	89 2b       	or	r24, r25
    1b8e:	29 f0       	breq	.+10     	; 0x1b9a <draw_message_box+0x4a0>
					{
						cmd_text(50, 112, 26, 0, messages.over_temperature_output_one1);
    1b90:	00 91 2a 25 	lds	r16, 0x252A	; 0x80252a <messages+0xe>
    1b94:	10 91 2b 25 	lds	r17, 0x252B	; 0x80252b <messages+0xf>
    1b98:	11 c0       	rjmp	.+34     	; 0x1bbc <draw_message_box+0x4c2>
					}
					else
					{
						cmd_text(5, 112, 26, 0, messages.over_temperature_normal_now_output_one1);
    1b9a:	00 91 2c 25 	lds	r16, 0x252C	; 0x80252c <messages+0x10>
    1b9e:	10 91 2d 25 	lds	r17, 0x252D	; 0x80252d <messages+0x11>
    1ba2:	19 c0       	rjmp	.+50     	; 0x1bd6 <draw_message_box+0x4dc>
					break;
				}
				
				case 2:
				{
					if(output_one->over_temp_error2 || output_one->over_temp_half_second_count)
    1ba4:	f3 01       	movw	r30, r6
    1ba6:	82 85       	ldd	r24, Z+10	; 0x0a
    1ba8:	81 11       	cpse	r24, r1
    1baa:	04 c0       	rjmp	.+8      	; 0x1bb4 <draw_message_box+0x4ba>
    1bac:	82 ad       	ldd	r24, Z+58	; 0x3a
    1bae:	93 ad       	ldd	r25, Z+59	; 0x3b
    1bb0:	89 2b       	or	r24, r25
    1bb2:	69 f0       	breq	.+26     	; 0x1bce <draw_message_box+0x4d4>
					{
						cmd_text(50, 112, 26, 0, messages.over_temperature_output_one2);
    1bb4:	00 91 2e 25 	lds	r16, 0x252E	; 0x80252e <messages+0x12>
    1bb8:	10 91 2f 25 	lds	r17, 0x252F	; 0x80252f <messages+0x13>
    1bbc:	20 e0       	ldi	r18, 0x00	; 0
    1bbe:	30 e0       	ldi	r19, 0x00	; 0
    1bc0:	4a e1       	ldi	r20, 0x1A	; 26
    1bc2:	50 e0       	ldi	r21, 0x00	; 0
    1bc4:	60 e7       	ldi	r22, 0x70	; 112
    1bc6:	70 e0       	ldi	r23, 0x00	; 0
    1bc8:	82 e3       	ldi	r24, 0x32	; 50
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	59 c1       	rjmp	.+690    	; 0x1e80 <draw_message_box+0x786>
					}
					else
					{
						cmd_text(5, 112, 26, 0, messages.over_temperature_normal_now_output_one2);
    1bce:	00 91 30 25 	lds	r16, 0x2530	; 0x802530 <messages+0x14>
    1bd2:	10 91 31 25 	lds	r17, 0x2531	; 0x802531 <messages+0x15>
    1bd6:	20 e0       	ldi	r18, 0x00	; 0
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	4a e1       	ldi	r20, 0x1A	; 26
    1bdc:	50 e0       	ldi	r21, 0x00	; 0
    1bde:	60 e7       	ldi	r22, 0x70	; 112
    1be0:	70 e0       	ldi	r23, 0x00	; 0
    1be2:	85 e0       	ldi	r24, 0x05	; 5
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	4c c1       	rjmp	.+664    	; 0x1e80 <draw_message_box+0x786>
					break;
				}
				
				case 3:
				{
					if(output_two->over_temp_error1 || output_two->over_temp_half_second_count)
    1be8:	d1 01       	movw	r26, r2
    1bea:	19 96       	adiw	r26, 0x09	; 9
    1bec:	8c 91       	ld	r24, X
    1bee:	19 97       	sbiw	r26, 0x09	; 9
    1bf0:	81 11       	cpse	r24, r1
    1bf2:	06 c0       	rjmp	.+12     	; 0x1c00 <draw_message_box+0x506>
    1bf4:	da 96       	adiw	r26, 0x3a	; 58
    1bf6:	8d 91       	ld	r24, X+
    1bf8:	9c 91       	ld	r25, X
    1bfa:	db 97       	sbiw	r26, 0x3b	; 59
    1bfc:	89 2b       	or	r24, r25
    1bfe:	29 f0       	breq	.+10     	; 0x1c0a <draw_message_box+0x510>
					{
						cmd_text(20, 112, 26, 0, messages.over_temperature_output_two1);
    1c00:	00 91 3c 25 	lds	r16, 0x253C	; 0x80253c <messages+0x20>
    1c04:	10 91 3d 25 	lds	r17, 0x253D	; 0x80253d <messages+0x21>
    1c08:	11 c0       	rjmp	.+34     	; 0x1c2c <draw_message_box+0x532>
					}
					else
					{
						cmd_text(6, 112, 26, 0, messages.over_temperature_normal_now_output_two1);
    1c0a:	00 91 3e 25 	lds	r16, 0x253E	; 0x80253e <messages+0x22>
    1c0e:	10 91 3f 25 	lds	r17, 0x253F	; 0x80253f <messages+0x23>
    1c12:	19 c0       	rjmp	.+50     	; 0x1c46 <draw_message_box+0x54c>
					break;
				}
				
				case 4:
				{
					if(output_two->over_temp_error2 || output_two->over_temp_half_second_count)
    1c14:	f1 01       	movw	r30, r2
    1c16:	82 85       	ldd	r24, Z+10	; 0x0a
    1c18:	81 11       	cpse	r24, r1
    1c1a:	04 c0       	rjmp	.+8      	; 0x1c24 <draw_message_box+0x52a>
    1c1c:	82 ad       	ldd	r24, Z+58	; 0x3a
    1c1e:	93 ad       	ldd	r25, Z+59	; 0x3b
    1c20:	89 2b       	or	r24, r25
    1c22:	69 f0       	breq	.+26     	; 0x1c3e <draw_message_box+0x544>
					{
						cmd_text(20, 112, 26, 0, messages.over_temperature_output_two2);
    1c24:	00 91 40 25 	lds	r16, 0x2540	; 0x802540 <messages+0x24>
    1c28:	10 91 41 25 	lds	r17, 0x2541	; 0x802541 <messages+0x25>
    1c2c:	20 e0       	ldi	r18, 0x00	; 0
    1c2e:	30 e0       	ldi	r19, 0x00	; 0
    1c30:	4a e1       	ldi	r20, 0x1A	; 26
    1c32:	50 e0       	ldi	r21, 0x00	; 0
    1c34:	60 e7       	ldi	r22, 0x70	; 112
    1c36:	70 e0       	ldi	r23, 0x00	; 0
    1c38:	84 e1       	ldi	r24, 0x14	; 20
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	21 c1       	rjmp	.+578    	; 0x1e80 <draw_message_box+0x786>
					}
					else
					{
						cmd_text(6, 112, 26, 0, messages.over_temperature_normal_now_output_two2);
    1c3e:	00 91 42 25 	lds	r16, 0x2542	; 0x802542 <messages+0x26>
    1c42:	10 91 43 25 	lds	r17, 0x2543	; 0x802543 <messages+0x27>
    1c46:	20 e0       	ldi	r18, 0x00	; 0
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	4a e1       	ldi	r20, 0x1A	; 26
    1c4c:	50 e0       	ldi	r21, 0x00	; 0
    1c4e:	60 e7       	ldi	r22, 0x70	; 112
    1c50:	70 e0       	ldi	r23, 0x00	; 0
    1c52:	86 e0       	ldi	r24, 0x06	; 6
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	14 c1       	rjmp	.+552    	; 0x1e80 <draw_message_box+0x786>
					break;
				}
				
				case 5:
				{
					if(program_state->num_outputs == SINGLE)
    1c58:	d4 01       	movw	r26, r8
    1c5a:	8d 91       	ld	r24, X+
    1c5c:	9c 91       	ld	r25, X
    1c5e:	89 2b       	or	r24, r25
    1c60:	29 f4       	brne	.+10     	; 0x1c6c <draw_message_box+0x572>
					{
						cmd_text(85, 112, 26, 0, messages.voltage_drift);
    1c62:	00 91 20 25 	lds	r16, 0x2520	; 0x802520 <messages+0x4>
    1c66:	10 91 21 25 	lds	r17, 0x2521	; 0x802521 <messages+0x5>
    1c6a:	e9 c0       	rjmp	.+466    	; 0x1e3e <draw_message_box+0x744>
					}
					else
					{
						cmd_text(68, 112, 26, 0, messages.voltage_drift_output_one);
    1c6c:	00 91 32 25 	lds	r16, 0x2532	; 0x802532 <messages+0x16>
    1c70:	10 91 33 25 	lds	r17, 0x2533	; 0x802533 <messages+0x17>
    1c74:	20 e0       	ldi	r18, 0x00	; 0
    1c76:	30 e0       	ldi	r19, 0x00	; 0
    1c78:	4a e1       	ldi	r20, 0x1A	; 26
    1c7a:	50 e0       	ldi	r21, 0x00	; 0
    1c7c:	60 e7       	ldi	r22, 0x70	; 112
    1c7e:	70 e0       	ldi	r23, 0x00	; 0
    1c80:	84 e4       	ldi	r24, 0x44	; 68
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	fd c0       	rjmp	.+506    	; 0x1e80 <draw_message_box+0x786>
					break;
				}
				
				case 6:
				{
					cmd_text(69, 112, 26, 0, messages.voltage_drift_output_two);
    1c86:	00 91 44 25 	lds	r16, 0x2544	; 0x802544 <messages+0x28>
    1c8a:	10 91 45 25 	lds	r17, 0x2545	; 0x802545 <messages+0x29>
    1c8e:	20 e0       	ldi	r18, 0x00	; 0
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	4a e1       	ldi	r20, 0x1A	; 26
    1c94:	50 e0       	ldi	r21, 0x00	; 0
    1c96:	60 e7       	ldi	r22, 0x70	; 112
    1c98:	70 e0       	ldi	r23, 0x00	; 0
    1c9a:	85 e4       	ldi	r24, 0x45	; 69
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	f0 c0       	rjmp	.+480    	; 0x1e80 <draw_message_box+0x786>
					break;
				}
				
				case 7:
				{
					if (!program_state->pson_low)
    1ca0:	f4 01       	movw	r30, r8
    1ca2:	85 81       	ldd	r24, Z+5	; 0x05
    1ca4:	81 11       	cpse	r24, r1
    1ca6:	1e c0       	rjmp	.+60     	; 0x1ce4 <draw_message_box+0x5ea>
					{
						if(program_state->num_outputs == SINGLE)
    1ca8:	80 81       	ld	r24, Z
    1caa:	91 81       	ldd	r25, Z+1	; 0x01
    1cac:	89 2b       	or	r24, r25
    1cae:	69 f4       	brne	.+26     	; 0x1cca <draw_message_box+0x5d0>
						{
							cmd_text(90, 112, 26, 0, messages.zero_current);
    1cb0:	00 91 22 25 	lds	r16, 0x2522	; 0x802522 <messages+0x6>
    1cb4:	10 91 23 25 	lds	r17, 0x2523	; 0x802523 <messages+0x7>
    1cb8:	20 e0       	ldi	r18, 0x00	; 0
    1cba:	30 e0       	ldi	r19, 0x00	; 0
    1cbc:	4a e1       	ldi	r20, 0x1A	; 26
    1cbe:	50 e0       	ldi	r21, 0x00	; 0
    1cc0:	60 e7       	ldi	r22, 0x70	; 112
    1cc2:	70 e0       	ldi	r23, 0x00	; 0
    1cc4:	8a e5       	ldi	r24, 0x5A	; 90
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	db c0       	rjmp	.+438    	; 0x1e80 <draw_message_box+0x786>
						}
						else
						{
							cmd_text(61, 112, 26, 0, messages.zero_current_output_one);
    1cca:	00 91 34 25 	lds	r16, 0x2534	; 0x802534 <messages+0x18>
    1cce:	10 91 35 25 	lds	r17, 0x2535	; 0x802535 <messages+0x19>
    1cd2:	20 e0       	ldi	r18, 0x00	; 0
    1cd4:	30 e0       	ldi	r19, 0x00	; 0
    1cd6:	4a e1       	ldi	r20, 0x1A	; 26
    1cd8:	50 e0       	ldi	r21, 0x00	; 0
    1cda:	60 e7       	ldi	r22, 0x70	; 112
    1cdc:	70 e0       	ldi	r23, 0x00	; 0
    1cde:	8d e3       	ldi	r24, 0x3D	; 61
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	ce c0       	rjmp	.+412    	; 0x1e80 <draw_message_box+0x786>
						}
					}
					else
					{
						cmd_text(105, 112, 26, 0, messages.dc_interrupted);
    1ce4:	00 91 1e 25 	lds	r16, 0x251E	; 0x80251e <messages+0x2>
    1ce8:	10 91 1f 25 	lds	r17, 0x251F	; 0x80251f <messages+0x3>
    1cec:	20 e0       	ldi	r18, 0x00	; 0
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	4a e1       	ldi	r20, 0x1A	; 26
    1cf2:	50 e0       	ldi	r21, 0x00	; 0
    1cf4:	60 e7       	ldi	r22, 0x70	; 112
    1cf6:	70 e0       	ldi	r23, 0x00	; 0
    1cf8:	89 e6       	ldi	r24, 0x69	; 105
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	c1 c0       	rjmp	.+386    	; 0x1e80 <draw_message_box+0x786>
					break;
				}
				
				case 8:
				{
					if (!program_state->pson_low)
    1cfe:	d4 01       	movw	r26, r8
    1d00:	15 96       	adiw	r26, 0x05	; 5
    1d02:	8c 91       	ld	r24, X
    1d04:	81 11       	cpse	r24, r1
    1d06:	ee cf       	rjmp	.-36     	; 0x1ce4 <draw_message_box+0x5ea>
					{
						cmd_text(62, 112, 26, 0, messages.zero_current_output_two);
    1d08:	00 91 46 25 	lds	r16, 0x2546	; 0x802546 <messages+0x2a>
    1d0c:	10 91 47 25 	lds	r17, 0x2547	; 0x802547 <messages+0x2b>
    1d10:	20 e0       	ldi	r18, 0x00	; 0
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	4a e1       	ldi	r20, 0x1A	; 26
    1d16:	50 e0       	ldi	r21, 0x00	; 0
    1d18:	60 e7       	ldi	r22, 0x70	; 112
    1d1a:	70 e0       	ldi	r23, 0x00	; 0
    1d1c:	8e e3       	ldi	r24, 0x3E	; 62
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	af c0       	rjmp	.+350    	; 0x1e80 <draw_message_box+0x786>
					break;
				}
				
				case 9:
				{
					cmd(COLOR_RGB(0, 155, 0));
    1d22:	60 e0       	ldi	r22, 0x00	; 0
    1d24:	7b e9       	ldi	r23, 0x9B	; 155
    1d26:	80 e0       	ldi	r24, 0x00	; 0
    1d28:	94 e0       	ldi	r25, 0x04	; 4
    1d2a:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
					cmd_text(120, 112, 26, 0, messages.calibrating_notification);
    1d2e:	00 91 50 25 	lds	r16, 0x2550	; 0x802550 <messages+0x34>
    1d32:	10 91 51 25 	lds	r17, 0x2551	; 0x802551 <messages+0x35>
    1d36:	20 e0       	ldi	r18, 0x00	; 0
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	4a e1       	ldi	r20, 0x1A	; 26
    1d3c:	50 e0       	ldi	r21, 0x00	; 0
    1d3e:	60 e7       	ldi	r22, 0x70	; 112
    1d40:	70 e0       	ldi	r23, 0x00	; 0
    1d42:	88 e7       	ldi	r24, 0x78	; 120
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	9c c0       	rjmp	.+312    	; 0x1e80 <draw_message_box+0x786>
					break;
				}
				
				case 10:
				{
					cmd(COLOR_RGB(255,0,0));
    1d48:	6f ef       	ldi	r22, 0xFF	; 255
    1d4a:	70 e0       	ldi	r23, 0x00	; 0
    1d4c:	80 e0       	ldi	r24, 0x00	; 0
    1d4e:	94 e0       	ldi	r25, 0x04	; 4
    1d50:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
					if(program_state->num_outputs == SINGLE)
    1d54:	f4 01       	movw	r30, r8
    1d56:	80 81       	ld	r24, Z
    1d58:	91 81       	ldd	r25, Z+1	; 0x01
    1d5a:	89 2b       	or	r24, r25
    1d5c:	81 f0       	breq	.+32     	; 0x1d7e <draw_message_box+0x684>
					{
						cmd_text(115, 112, 26, 0, messages.max_current);
					}
					else
					{
						cmd_text(85, 112, 26, 0, messages.max_current_output_one);
    1d5e:	00 91 36 25 	lds	r16, 0x2536	; 0x802536 <messages+0x1a>
    1d62:	10 91 37 25 	lds	r17, 0x2537	; 0x802537 <messages+0x1b>
    1d66:	6b c0       	rjmp	.+214    	; 0x1e3e <draw_message_box+0x744>
					break;
				}
				
				case 11:
				{
					cmd(COLOR_RGB(255,0,0));
    1d68:	6f ef       	ldi	r22, 0xFF	; 255
    1d6a:	70 e0       	ldi	r23, 0x00	; 0
    1d6c:	80 e0       	ldi	r24, 0x00	; 0
    1d6e:	94 e0       	ldi	r25, 0x04	; 4
    1d70:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
					if(program_state->num_outputs == SINGLE)
    1d74:	d4 01       	movw	r26, r8
    1d76:	8d 91       	ld	r24, X+
    1d78:	9c 91       	ld	r25, X
    1d7a:	89 2b       	or	r24, r25
    1d7c:	29 f4       	brne	.+10     	; 0x1d88 <draw_message_box+0x68e>
					{
						cmd_text(115, 112, 26, 0, messages.max_current);
    1d7e:	00 91 24 25 	lds	r16, 0x2524	; 0x802524 <messages+0x8>
    1d82:	10 91 25 25 	lds	r17, 0x2525	; 0x802525 <messages+0x9>
    1d86:	39 c0       	rjmp	.+114    	; 0x1dfa <draw_message_box+0x700>
					}
					else
					{
						cmd_text(85, 112, 26, 0, messages.max_current_output_two);
    1d88:	00 91 48 25 	lds	r16, 0x2548	; 0x802548 <messages+0x2c>
    1d8c:	10 91 49 25 	lds	r17, 0x2549	; 0x802549 <messages+0x2d>
    1d90:	56 c0       	rjmp	.+172    	; 0x1e3e <draw_message_box+0x744>
					break;
				}
				
				case 12:
				{
					cmd(COLOR_RGB(255,0,0));
    1d92:	6f ef       	ldi	r22, 0xFF	; 255
    1d94:	70 e0       	ldi	r23, 0x00	; 0
    1d96:	80 e0       	ldi	r24, 0x00	; 0
    1d98:	94 e0       	ldi	r25, 0x04	; 4
    1d9a:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
					if(program_state->num_outputs == SINGLE)
    1d9e:	f4 01       	movw	r30, r8
    1da0:	80 81       	ld	r24, Z
    1da2:	91 81       	ldd	r25, Z+1	; 0x01
    1da4:	89 2b       	or	r24, r25
    1da6:	81 f0       	breq	.+32     	; 0x1dc8 <draw_message_box+0x6ce>
					{
						cmd_text(115, 112, 26, 0, messages.max_voltage);
					}
					else
					{
						cmd_text(85, 112, 26, 0, messages.max_voltage_output_one);
    1da8:	00 91 3a 25 	lds	r16, 0x253A	; 0x80253a <messages+0x1e>
    1dac:	10 91 3b 25 	lds	r17, 0x253B	; 0x80253b <messages+0x1f>
    1db0:	46 c0       	rjmp	.+140    	; 0x1e3e <draw_message_box+0x744>
					break;
				}
				
				case 13:
				{
					cmd(COLOR_RGB(255,0,0));
    1db2:	6f ef       	ldi	r22, 0xFF	; 255
    1db4:	70 e0       	ldi	r23, 0x00	; 0
    1db6:	80 e0       	ldi	r24, 0x00	; 0
    1db8:	94 e0       	ldi	r25, 0x04	; 4
    1dba:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
					if(program_state->num_outputs == SINGLE)
    1dbe:	d4 01       	movw	r26, r8
    1dc0:	8d 91       	ld	r24, X+
    1dc2:	9c 91       	ld	r25, X
    1dc4:	89 2b       	or	r24, r25
    1dc6:	29 f4       	brne	.+10     	; 0x1dd2 <draw_message_box+0x6d8>
					{
						cmd_text(115, 112, 26, 0, messages.max_voltage);
    1dc8:	00 91 28 25 	lds	r16, 0x2528	; 0x802528 <messages+0xc>
    1dcc:	10 91 29 25 	lds	r17, 0x2529	; 0x802529 <messages+0xd>
    1dd0:	14 c0       	rjmp	.+40     	; 0x1dfa <draw_message_box+0x700>
					}
					else
					{
						cmd_text(85, 112, 26, 0, messages.max_voltage_output_two);
    1dd2:	00 91 4c 25 	lds	r16, 0x254C	; 0x80254c <messages+0x30>
    1dd6:	10 91 4d 25 	lds	r17, 0x254D	; 0x80254d <messages+0x31>
    1dda:	31 c0       	rjmp	.+98     	; 0x1e3e <draw_message_box+0x744>
					break;
				}
				
				case 14:
				{
					cmd(COLOR_RGB(255,0,0));
    1ddc:	6f ef       	ldi	r22, 0xFF	; 255
    1dde:	70 e0       	ldi	r23, 0x00	; 0
    1de0:	80 e0       	ldi	r24, 0x00	; 0
    1de2:	94 e0       	ldi	r25, 0x04	; 4
    1de4:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
					if(program_state->num_outputs == SINGLE)
    1de8:	f4 01       	movw	r30, r8
    1dea:	80 81       	ld	r24, Z
    1dec:	91 81       	ldd	r25, Z+1	; 0x01
    1dee:	89 2b       	or	r24, r25
    1df0:	69 f4       	brne	.+26     	; 0x1e0c <draw_message_box+0x712>
					{
						cmd_text(115, 112, 26, 0, messages.min_current);
    1df2:	00 91 26 25 	lds	r16, 0x2526	; 0x802526 <messages+0xa>
    1df6:	10 91 27 25 	lds	r17, 0x2527	; 0x802527 <messages+0xb>
    1dfa:	20 e0       	ldi	r18, 0x00	; 0
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
    1dfe:	4a e1       	ldi	r20, 0x1A	; 26
    1e00:	50 e0       	ldi	r21, 0x00	; 0
    1e02:	60 e7       	ldi	r22, 0x70	; 112
    1e04:	70 e0       	ldi	r23, 0x00	; 0
    1e06:	83 e7       	ldi	r24, 0x73	; 115
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	3a c0       	rjmp	.+116    	; 0x1e80 <draw_message_box+0x786>
					}
					else
					{
						cmd_text(85, 112, 26, 0, messages.min_current_output_one);
    1e0c:	00 91 38 25 	lds	r16, 0x2538	; 0x802538 <messages+0x1c>
    1e10:	10 91 39 25 	lds	r17, 0x2539	; 0x802539 <messages+0x1d>
    1e14:	14 c0       	rjmp	.+40     	; 0x1e3e <draw_message_box+0x744>
					break;
				}
				
				case 15:
				{
					cmd(COLOR_RGB(255,0,0));
    1e16:	6f ef       	ldi	r22, 0xFF	; 255
    1e18:	70 e0       	ldi	r23, 0x00	; 0
    1e1a:	80 e0       	ldi	r24, 0x00	; 0
    1e1c:	94 e0       	ldi	r25, 0x04	; 4
    1e1e:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
					if(program_state->num_outputs == SINGLE)
    1e22:	d4 01       	movw	r26, r8
    1e24:	8d 91       	ld	r24, X+
    1e26:	9c 91       	ld	r25, X
    1e28:	89 2b       	or	r24, r25
    1e2a:	29 f4       	brne	.+10     	; 0x1e36 <draw_message_box+0x73c>
					{
						cmd_text(85, 112, 26, 0, messages.min_current);
    1e2c:	00 91 26 25 	lds	r16, 0x2526	; 0x802526 <messages+0xa>
    1e30:	10 91 27 25 	lds	r17, 0x2527	; 0x802527 <messages+0xb>
    1e34:	04 c0       	rjmp	.+8      	; 0x1e3e <draw_message_box+0x744>
					}
					else
					{
						cmd_text(85, 112, 26, 0, messages.min_current_output_two);
    1e36:	00 91 4a 25 	lds	r16, 0x254A	; 0x80254a <messages+0x2e>
    1e3a:	10 91 4b 25 	lds	r17, 0x254B	; 0x80254b <messages+0x2f>
    1e3e:	20 e0       	ldi	r18, 0x00	; 0
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	4a e1       	ldi	r20, 0x1A	; 26
    1e44:	50 e0       	ldi	r21, 0x00	; 0
    1e46:	60 e7       	ldi	r22, 0x70	; 112
    1e48:	70 e0       	ldi	r23, 0x00	; 0
    1e4a:	85 e5       	ldi	r24, 0x55	; 85
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	18 c0       	rjmp	.+48     	; 0x1e80 <draw_message_box+0x786>
					break;
				}
			}
		}
	}
	else if (message_idx == -1)
    1e50:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <message_idx.5517>
    1e54:	90 91 07 20 	lds	r25, 0x2007	; 0x802007 <message_idx.5517+0x1>
    1e58:	01 96       	adiw	r24, 0x01	; 1
    1e5a:	a1 f4       	brne	.+40     	; 0x1e84 <draw_message_box+0x78a>
	{
		cmd(COLOR_RGB(0,0,0));
    1e5c:	60 e0       	ldi	r22, 0x00	; 0
    1e5e:	70 e0       	ldi	r23, 0x00	; 0
    1e60:	80 e0       	ldi	r24, 0x00	; 0
    1e62:	94 e0       	ldi	r25, 0x04	; 4
    1e64:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
		cmd_text(107, 112, 26, 0, messages.system_normal);
    1e68:	00 91 1c 25 	lds	r16, 0x251C	; 0x80251c <messages>
    1e6c:	10 91 1d 25 	lds	r17, 0x251D	; 0x80251d <messages+0x1>
    1e70:	20 e0       	ldi	r18, 0x00	; 0
    1e72:	30 e0       	ldi	r19, 0x00	; 0
    1e74:	4a e1       	ldi	r20, 0x1A	; 26
    1e76:	50 e0       	ldi	r21, 0x00	; 0
    1e78:	60 e7       	ldi	r22, 0x70	; 112
    1e7a:	70 e0       	ldi	r23, 0x00	; 0
    1e7c:	8b e6       	ldi	r24, 0x6B	; 107
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	0e 94 6f 03 	call	0x6de	; 0x6de <cmd_text>
	}
}
    1e84:	a7 96       	adiw	r28, 0x27	; 39
    1e86:	cd bf       	out	0x3d, r28	; 61
    1e88:	de bf       	out	0x3e, r29	; 62
    1e8a:	df 91       	pop	r29
    1e8c:	cf 91       	pop	r28
    1e8e:	1f 91       	pop	r17
    1e90:	0f 91       	pop	r16
    1e92:	ff 90       	pop	r15
    1e94:	ef 90       	pop	r14
    1e96:	df 90       	pop	r13
    1e98:	cf 90       	pop	r12
    1e9a:	bf 90       	pop	r11
    1e9c:	af 90       	pop	r10
    1e9e:	9f 90       	pop	r9
    1ea0:	8f 90       	pop	r8
    1ea2:	7f 90       	pop	r7
    1ea4:	6f 90       	pop	r6
    1ea6:	5f 90       	pop	r5
    1ea8:	4f 90       	pop	r4
    1eaa:	3f 90       	pop	r3
    1eac:	2f 90       	pop	r2
    1eae:	08 95       	ret

00001eb0 <draw_startup_screen>:

void draw_startup_screen(){
    1eb0:	0f 93       	push	r16
    1eb2:	1f 93       	push	r17
	//**************************************************
	wdt_reset(); // WATCH DOG TIMER RESET
    1eb4:	a8 95       	wdr
	//**************************************************
	
	cmd( BEGIN(RECTS) );
    1eb6:	69 e0       	ldi	r22, 0x09	; 9
    1eb8:	70 e0       	ldi	r23, 0x00	; 0
    1eba:	80 e0       	ldi	r24, 0x00	; 0
    1ebc:	9f e1       	ldi	r25, 0x1F	; 31
    1ebe:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
	cmd( LINE_WIDTH(200) );
    1ec2:	68 ec       	ldi	r22, 0xC8	; 200
    1ec4:	70 e0       	ldi	r23, 0x00	; 0
    1ec6:	80 e0       	ldi	r24, 0x00	; 0
    1ec8:	9e e0       	ldi	r25, 0x0E	; 14
    1eca:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
	
	/* draws outer rectangle (black) */
	cmd(COLOR_RGB(0, 0, 0));
    1ece:	60 e0       	ldi	r22, 0x00	; 0
    1ed0:	70 e0       	ldi	r23, 0x00	; 0
    1ed2:	80 e0       	ldi	r24, 0x00	; 0
    1ed4:	94 e0       	ldi	r25, 0x04	; 4
    1ed6:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
	cmd( LINE_WIDTH(200) );
    1eda:	68 ec       	ldi	r22, 0xC8	; 200
    1edc:	70 e0       	ldi	r23, 0x00	; 0
    1ede:	80 e0       	ldi	r24, 0x00	; 0
    1ee0:	9e e0       	ldi	r25, 0x0E	; 14
    1ee2:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
	cmd( VERTEX2F(16 * 15, 16 * (gauge_y+10)) );
    1ee6:	60 91 1b 24 	lds	r22, 0x241B	; 0x80241b <gauge_y>
    1eea:	70 91 1c 24 	lds	r23, 0x241C	; 0x80241c <gauge_y+0x1>
    1eee:	66 5f       	subi	r22, 0xF6	; 246
    1ef0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ef2:	84 e0       	ldi	r24, 0x04	; 4
    1ef4:	66 0f       	add	r22, r22
    1ef6:	77 1f       	adc	r23, r23
    1ef8:	8a 95       	dec	r24
    1efa:	e1 f7       	brne	.-8      	; 0x1ef4 <draw_startup_screen+0x44>
    1efc:	7f 77       	andi	r23, 0x7F	; 127
    1efe:	cb 01       	movw	r24, r22
    1f00:	a0 e0       	ldi	r26, 0x00	; 0
    1f02:	b0 e0       	ldi	r27, 0x00	; 0
    1f04:	bc 01       	movw	r22, r24
    1f06:	cd 01       	movw	r24, r26
    1f08:	88 67       	ori	r24, 0x78	; 120
    1f0a:	90 64       	ori	r25, 0x40	; 64
    1f0c:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
	cmd( VERTEX2F(16 * 305, 16 * (gauge_y+82)) );
    1f10:	60 91 1b 24 	lds	r22, 0x241B	; 0x80241b <gauge_y>
    1f14:	70 91 1c 24 	lds	r23, 0x241C	; 0x80241c <gauge_y+0x1>
    1f18:	6e 5a       	subi	r22, 0xAE	; 174
    1f1a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f1c:	94 e0       	ldi	r25, 0x04	; 4
    1f1e:	66 0f       	add	r22, r22
    1f20:	77 1f       	adc	r23, r23
    1f22:	9a 95       	dec	r25
    1f24:	e1 f7       	brne	.-8      	; 0x1f1e <draw_startup_screen+0x6e>
    1f26:	7f 77       	andi	r23, 0x7F	; 127
    1f28:	cb 01       	movw	r24, r22
    1f2a:	a0 e0       	ldi	r26, 0x00	; 0
    1f2c:	b0 e0       	ldi	r27, 0x00	; 0
    1f2e:	bc 01       	movw	r22, r24
    1f30:	cd 01       	movw	r24, r26
    1f32:	88 68       	ori	r24, 0x88	; 136
    1f34:	99 64       	ori	r25, 0x49	; 73
    1f36:	0e 94 01 03 	call	0x602	; 0x602 <cmd>

	/*draws inner rectangle (white) */
	cmd(COLOR_RGB(255, 255, 255));
    1f3a:	6f ef       	ldi	r22, 0xFF	; 255
    1f3c:	7f ef       	ldi	r23, 0xFF	; 255
    1f3e:	8f ef       	ldi	r24, 0xFF	; 255
    1f40:	94 e0       	ldi	r25, 0x04	; 4
    1f42:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
	cmd( VERTEX2F(16 * 17, 16 * (gauge_y+12)) );
    1f46:	60 91 1b 24 	lds	r22, 0x241B	; 0x80241b <gauge_y>
    1f4a:	70 91 1c 24 	lds	r23, 0x241C	; 0x80241c <gauge_y+0x1>
    1f4e:	64 5f       	subi	r22, 0xF4	; 244
    1f50:	7f 4f       	sbci	r23, 0xFF	; 255
    1f52:	24 e0       	ldi	r18, 0x04	; 4
    1f54:	66 0f       	add	r22, r22
    1f56:	77 1f       	adc	r23, r23
    1f58:	2a 95       	dec	r18
    1f5a:	e1 f7       	brne	.-8      	; 0x1f54 <draw_startup_screen+0xa4>
    1f5c:	7f 77       	andi	r23, 0x7F	; 127
    1f5e:	cb 01       	movw	r24, r22
    1f60:	a0 e0       	ldi	r26, 0x00	; 0
    1f62:	b0 e0       	ldi	r27, 0x00	; 0
    1f64:	bc 01       	movw	r22, r24
    1f66:	cd 01       	movw	r24, r26
    1f68:	88 68       	ori	r24, 0x88	; 136
    1f6a:	90 64       	ori	r25, 0x40	; 64
    1f6c:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
	cmd( VERTEX2F(16 * 303, 16 * (gauge_y+80)) );
    1f70:	60 91 1b 24 	lds	r22, 0x241B	; 0x80241b <gauge_y>
    1f74:	70 91 1c 24 	lds	r23, 0x241C	; 0x80241c <gauge_y+0x1>
    1f78:	60 5b       	subi	r22, 0xB0	; 176
    1f7a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f7c:	34 e0       	ldi	r19, 0x04	; 4
    1f7e:	66 0f       	add	r22, r22
    1f80:	77 1f       	adc	r23, r23
    1f82:	3a 95       	dec	r19
    1f84:	e1 f7       	brne	.-8      	; 0x1f7e <draw_startup_screen+0xce>
    1f86:	7f 77       	andi	r23, 0x7F	; 127
    1f88:	cb 01       	movw	r24, r22
    1f8a:	a0 e0       	ldi	r26, 0x00	; 0
    1f8c:	b0 e0       	ldi	r27, 0x00	; 0
    1f8e:	bc 01       	movw	r22, r24
    1f90:	cd 01       	movw	r24, r26
    1f92:	88 67       	ori	r24, 0x78	; 120
    1f94:	99 64       	ori	r25, 0x49	; 73
    1f96:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
	
	//---------------------------------------------------------------------------
	
	/* draws outer rectangle (black) */
	cmd(COLOR_RGB(0, 0, 0));
    1f9a:	60 e0       	ldi	r22, 0x00	; 0
    1f9c:	70 e0       	ldi	r23, 0x00	; 0
    1f9e:	80 e0       	ldi	r24, 0x00	; 0
    1fa0:	94 e0       	ldi	r25, 0x04	; 4
    1fa2:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
	cmd( LINE_WIDTH(200) );
    1fa6:	68 ec       	ldi	r22, 0xC8	; 200
    1fa8:	70 e0       	ldi	r23, 0x00	; 0
    1faa:	80 e0       	ldi	r24, 0x00	; 0
    1fac:	9e e0       	ldi	r25, 0x0E	; 14
    1fae:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
	cmd( VERTEX2F(16 * 15, 16 * (gauge_y+149)) );
    1fb2:	60 91 1b 24 	lds	r22, 0x241B	; 0x80241b <gauge_y>
    1fb6:	70 91 1c 24 	lds	r23, 0x241C	; 0x80241c <gauge_y+0x1>
    1fba:	6b 56       	subi	r22, 0x6B	; 107
    1fbc:	7f 4f       	sbci	r23, 0xFF	; 255
    1fbe:	44 e0       	ldi	r20, 0x04	; 4
    1fc0:	66 0f       	add	r22, r22
    1fc2:	77 1f       	adc	r23, r23
    1fc4:	4a 95       	dec	r20
    1fc6:	e1 f7       	brne	.-8      	; 0x1fc0 <draw_startup_screen+0x110>
    1fc8:	7f 77       	andi	r23, 0x7F	; 127
    1fca:	cb 01       	movw	r24, r22
    1fcc:	a0 e0       	ldi	r26, 0x00	; 0
    1fce:	b0 e0       	ldi	r27, 0x00	; 0
    1fd0:	bc 01       	movw	r22, r24
    1fd2:	cd 01       	movw	r24, r26
    1fd4:	88 67       	ori	r24, 0x78	; 120
    1fd6:	90 64       	ori	r25, 0x40	; 64
    1fd8:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
	cmd( VERTEX2F(16 * 305, 16 * (gauge_y+222)) );
    1fdc:	60 91 1b 24 	lds	r22, 0x241B	; 0x80241b <gauge_y>
    1fe0:	70 91 1c 24 	lds	r23, 0x241C	; 0x80241c <gauge_y+0x1>
    1fe4:	62 52       	subi	r22, 0x22	; 34
    1fe6:	7f 4f       	sbci	r23, 0xFF	; 255
    1fe8:	54 e0       	ldi	r21, 0x04	; 4
    1fea:	66 0f       	add	r22, r22
    1fec:	77 1f       	adc	r23, r23
    1fee:	5a 95       	dec	r21
    1ff0:	e1 f7       	brne	.-8      	; 0x1fea <draw_startup_screen+0x13a>
    1ff2:	7f 77       	andi	r23, 0x7F	; 127
    1ff4:	cb 01       	movw	r24, r22
    1ff6:	a0 e0       	ldi	r26, 0x00	; 0
    1ff8:	b0 e0       	ldi	r27, 0x00	; 0
    1ffa:	bc 01       	movw	r22, r24
    1ffc:	cd 01       	movw	r24, r26
    1ffe:	88 68       	ori	r24, 0x88	; 136
    2000:	99 64       	ori	r25, 0x49	; 73
    2002:	0e 94 01 03 	call	0x602	; 0x602 <cmd>

	/*draws inner rectangle (white) */
	cmd(COLOR_RGB(255, 255, 255));
    2006:	6f ef       	ldi	r22, 0xFF	; 255
    2008:	7f ef       	ldi	r23, 0xFF	; 255
    200a:	8f ef       	ldi	r24, 0xFF	; 255
    200c:	94 e0       	ldi	r25, 0x04	; 4
    200e:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
	cmd( VERTEX2F(16 * 17, 16 * (gauge_y+151)) );
    2012:	60 91 1b 24 	lds	r22, 0x241B	; 0x80241b <gauge_y>
    2016:	70 91 1c 24 	lds	r23, 0x241C	; 0x80241c <gauge_y+0x1>
    201a:	69 56       	subi	r22, 0x69	; 105
    201c:	7f 4f       	sbci	r23, 0xFF	; 255
    201e:	e4 e0       	ldi	r30, 0x04	; 4
    2020:	66 0f       	add	r22, r22
    2022:	77 1f       	adc	r23, r23
    2024:	ea 95       	dec	r30
    2026:	e1 f7       	brne	.-8      	; 0x2020 <draw_startup_screen+0x170>
    2028:	7f 77       	andi	r23, 0x7F	; 127
    202a:	cb 01       	movw	r24, r22
    202c:	a0 e0       	ldi	r26, 0x00	; 0
    202e:	b0 e0       	ldi	r27, 0x00	; 0
    2030:	bc 01       	movw	r22, r24
    2032:	cd 01       	movw	r24, r26
    2034:	88 68       	ori	r24, 0x88	; 136
    2036:	90 64       	ori	r25, 0x40	; 64
    2038:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
	cmd( VERTEX2F(16 * 303, 16 * (gauge_y+219)) );
    203c:	60 91 1b 24 	lds	r22, 0x241B	; 0x80241b <gauge_y>
    2040:	70 91 1c 24 	lds	r23, 0x241C	; 0x80241c <gauge_y+0x1>
    2044:	65 52       	subi	r22, 0x25	; 37
    2046:	7f 4f       	sbci	r23, 0xFF	; 255
    2048:	f4 e0       	ldi	r31, 0x04	; 4
    204a:	66 0f       	add	r22, r22
    204c:	77 1f       	adc	r23, r23
    204e:	fa 95       	dec	r31
    2050:	e1 f7       	brne	.-8      	; 0x204a <draw_startup_screen+0x19a>
    2052:	7f 77       	andi	r23, 0x7F	; 127
    2054:	cb 01       	movw	r24, r22
    2056:	a0 e0       	ldi	r26, 0x00	; 0
    2058:	b0 e0       	ldi	r27, 0x00	; 0
    205a:	bc 01       	movw	r22, r24
    205c:	cd 01       	movw	r24, r26
    205e:	88 67       	ori	r24, 0x78	; 120
    2060:	99 64       	ori	r25, 0x49	; 73
    2062:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
	
	//---------------------------------------------------------------------------
	
	cmd( BEGIN(RECTS) ); //draws black outer circle for bottom rectangle
    2066:	69 e0       	ldi	r22, 0x09	; 9
    2068:	70 e0       	ldi	r23, 0x00	; 0
    206a:	80 e0       	ldi	r24, 0x00	; 0
    206c:	9f e1       	ldi	r25, 0x1F	; 31
    206e:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
	cmd(COLOR_RGB(0, 0, 0));
    2072:	60 e0       	ldi	r22, 0x00	; 0
    2074:	70 e0       	ldi	r23, 0x00	; 0
    2076:	80 e0       	ldi	r24, 0x00	; 0
    2078:	94 e0       	ldi	r25, 0x04	; 4
    207a:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
	cmd( LINE_WIDTH(200) );
    207e:	68 ec       	ldi	r22, 0xC8	; 200
    2080:	70 e0       	ldi	r23, 0x00	; 0
    2082:	80 e0       	ldi	r24, 0x00	; 0
    2084:	9e e0       	ldi	r25, 0x0E	; 14
    2086:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
	cmd( VERTEX2F(16 * 15, 16 * 114) );
    208a:	60 e2       	ldi	r22, 0x20	; 32
    208c:	77 e0       	ldi	r23, 0x07	; 7
    208e:	88 e7       	ldi	r24, 0x78	; 120
    2090:	90 e4       	ldi	r25, 0x40	; 64
    2092:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
	cmd( VERTEX2F(16 * 305, 16 * 125) );
    2096:	60 ed       	ldi	r22, 0xD0	; 208
    2098:	77 e0       	ldi	r23, 0x07	; 7
    209a:	88 e8       	ldi	r24, 0x88	; 136
    209c:	99 e4       	ldi	r25, 0x49	; 73
    209e:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
	
	cmd( BEGIN(RECTS) ); //draws white inner rectangle for bottom rectangle
    20a2:	69 e0       	ldi	r22, 0x09	; 9
    20a4:	70 e0       	ldi	r23, 0x00	; 0
    20a6:	80 e0       	ldi	r24, 0x00	; 0
    20a8:	9f e1       	ldi	r25, 0x1F	; 31
    20aa:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
	cmd(COLOR_RGB(255, 255, 255));
    20ae:	6f ef       	ldi	r22, 0xFF	; 255
    20b0:	7f ef       	ldi	r23, 0xFF	; 255
    20b2:	8f ef       	ldi	r24, 0xFF	; 255
    20b4:	94 e0       	ldi	r25, 0x04	; 4
    20b6:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
	cmd( LINE_WIDTH(200) );
    20ba:	68 ec       	ldi	r22, 0xC8	; 200
    20bc:	70 e0       	ldi	r23, 0x00	; 0
    20be:	80 e0       	ldi	r24, 0x00	; 0
    20c0:	9e e0       	ldi	r25, 0x0E	; 14
    20c2:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
	cmd( VERTEX2F(16 * 17, 16 * 116) );
    20c6:	60 e4       	ldi	r22, 0x40	; 64
    20c8:	77 e0       	ldi	r23, 0x07	; 7
    20ca:	88 e8       	ldi	r24, 0x88	; 136
    20cc:	90 e4       	ldi	r25, 0x40	; 64
    20ce:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
	cmd( VERTEX2F(16 * 303, 16 * 123) );
    20d2:	60 eb       	ldi	r22, 0xB0	; 176
    20d4:	77 e0       	ldi	r23, 0x07	; 7
    20d6:	88 e7       	ldi	r24, 0x78	; 120
    20d8:	99 e4       	ldi	r25, 0x49	; 73
    20da:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
	
	cmd(COLOR_RGB(49,74,137));
    20de:	61 e3       	ldi	r22, 0x31	; 49
    20e0:	7a e4       	ldi	r23, 0x4A	; 74
    20e2:	89 e8       	ldi	r24, 0x89	; 137
    20e4:	94 e0       	ldi	r25, 0x04	; 4
    20e6:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
	
	cmd_text(40, 25, 29, 0, "FARWEST");
    20ea:	0e ee       	ldi	r16, 0xEE	; 238
    20ec:	10 e2       	ldi	r17, 0x20	; 32
    20ee:	20 e0       	ldi	r18, 0x00	; 0
    20f0:	30 e0       	ldi	r19, 0x00	; 0
    20f2:	4d e1       	ldi	r20, 0x1D	; 29
    20f4:	50 e0       	ldi	r21, 0x00	; 0
    20f6:	69 e1       	ldi	r22, 0x19	; 25
    20f8:	70 e0       	ldi	r23, 0x00	; 0
    20fa:	88 e2       	ldi	r24, 0x28	; 40
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	0e 94 6f 03 	call	0x6de	; 0x6de <cmd_text>
	cmd_text(157, 25, 29, 0, "CORROSION");
    2102:	06 ef       	ldi	r16, 0xF6	; 246
    2104:	10 e2       	ldi	r17, 0x20	; 32
    2106:	20 e0       	ldi	r18, 0x00	; 0
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	4d e1       	ldi	r20, 0x1D	; 29
    210c:	50 e0       	ldi	r21, 0x00	; 0
    210e:	69 e1       	ldi	r22, 0x19	; 25
    2110:	70 e0       	ldi	r23, 0x00	; 0
    2112:	8d e9       	ldi	r24, 0x9D	; 157
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	0e 94 6f 03 	call	0x6de	; 0x6de <cmd_text>
	cmd_text(50, 50, 29, 0, "CONTROL");
    211a:	00 e0       	ldi	r16, 0x00	; 0
    211c:	11 e2       	ldi	r17, 0x21	; 33
    211e:	20 e0       	ldi	r18, 0x00	; 0
    2120:	30 e0       	ldi	r19, 0x00	; 0
    2122:	4d e1       	ldi	r20, 0x1D	; 29
    2124:	50 e0       	ldi	r21, 0x00	; 0
    2126:	62 e3       	ldi	r22, 0x32	; 50
    2128:	70 e0       	ldi	r23, 0x00	; 0
    212a:	82 e3       	ldi	r24, 0x32	; 50
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	0e 94 6f 03 	call	0x6de	; 0x6de <cmd_text>
	cmd_text(167, 50, 29, 0, "COMPANY");
    2132:	08 e0       	ldi	r16, 0x08	; 8
    2134:	11 e2       	ldi	r17, 0x21	; 33
    2136:	20 e0       	ldi	r18, 0x00	; 0
    2138:	30 e0       	ldi	r19, 0x00	; 0
    213a:	4d e1       	ldi	r20, 0x1D	; 29
    213c:	50 e0       	ldi	r21, 0x00	; 0
    213e:	62 e3       	ldi	r22, 0x32	; 50
    2140:	70 e0       	ldi	r23, 0x00	; 0
    2142:	87 ea       	ldi	r24, 0xA7	; 167
    2144:	90 e0       	ldi	r25, 0x00	; 0
    2146:	0e 94 6f 03 	call	0x6de	; 0x6de <cmd_text>
	
	// draw same text shifted one pixel to the left and down to make text bolder
	cmd_text(41, 25, 29, 0, "FARWEST");
    214a:	0e ee       	ldi	r16, 0xEE	; 238
    214c:	10 e2       	ldi	r17, 0x20	; 32
    214e:	20 e0       	ldi	r18, 0x00	; 0
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	4d e1       	ldi	r20, 0x1D	; 29
    2154:	50 e0       	ldi	r21, 0x00	; 0
    2156:	69 e1       	ldi	r22, 0x19	; 25
    2158:	70 e0       	ldi	r23, 0x00	; 0
    215a:	89 e2       	ldi	r24, 0x29	; 41
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	0e 94 6f 03 	call	0x6de	; 0x6de <cmd_text>
	cmd_text(158, 25, 29, 0, "CORROSION");
    2162:	06 ef       	ldi	r16, 0xF6	; 246
    2164:	10 e2       	ldi	r17, 0x20	; 32
    2166:	20 e0       	ldi	r18, 0x00	; 0
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	4d e1       	ldi	r20, 0x1D	; 29
    216c:	50 e0       	ldi	r21, 0x00	; 0
    216e:	69 e1       	ldi	r22, 0x19	; 25
    2170:	70 e0       	ldi	r23, 0x00	; 0
    2172:	8e e9       	ldi	r24, 0x9E	; 158
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	0e 94 6f 03 	call	0x6de	; 0x6de <cmd_text>
	cmd_text(51, 50, 29, 0, "CONTROL");
    217a:	00 e0       	ldi	r16, 0x00	; 0
    217c:	11 e2       	ldi	r17, 0x21	; 33
    217e:	20 e0       	ldi	r18, 0x00	; 0
    2180:	30 e0       	ldi	r19, 0x00	; 0
    2182:	4d e1       	ldi	r20, 0x1D	; 29
    2184:	50 e0       	ldi	r21, 0x00	; 0
    2186:	62 e3       	ldi	r22, 0x32	; 50
    2188:	70 e0       	ldi	r23, 0x00	; 0
    218a:	83 e3       	ldi	r24, 0x33	; 51
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	0e 94 6f 03 	call	0x6de	; 0x6de <cmd_text>
	cmd_text(168, 50, 29, 0, "COMPANY");
    2192:	08 e0       	ldi	r16, 0x08	; 8
    2194:	11 e2       	ldi	r17, 0x21	; 33
    2196:	20 e0       	ldi	r18, 0x00	; 0
    2198:	30 e0       	ldi	r19, 0x00	; 0
    219a:	4d e1       	ldi	r20, 0x1D	; 29
    219c:	50 e0       	ldi	r21, 0x00	; 0
    219e:	62 e3       	ldi	r22, 0x32	; 50
    21a0:	70 e0       	ldi	r23, 0x00	; 0
    21a2:	88 ea       	ldi	r24, 0xA8	; 168
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	0e 94 6f 03 	call	0x6de	; 0x6de <cmd_text>
	
	cmd_text(40, 26, 29, 0, "FARWEST");
    21aa:	0e ee       	ldi	r16, 0xEE	; 238
    21ac:	10 e2       	ldi	r17, 0x20	; 32
    21ae:	20 e0       	ldi	r18, 0x00	; 0
    21b0:	30 e0       	ldi	r19, 0x00	; 0
    21b2:	4d e1       	ldi	r20, 0x1D	; 29
    21b4:	50 e0       	ldi	r21, 0x00	; 0
    21b6:	6a e1       	ldi	r22, 0x1A	; 26
    21b8:	70 e0       	ldi	r23, 0x00	; 0
    21ba:	88 e2       	ldi	r24, 0x28	; 40
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	0e 94 6f 03 	call	0x6de	; 0x6de <cmd_text>
	cmd_text(157, 26, 29, 0, "CORROSION");
    21c2:	06 ef       	ldi	r16, 0xF6	; 246
    21c4:	10 e2       	ldi	r17, 0x20	; 32
    21c6:	20 e0       	ldi	r18, 0x00	; 0
    21c8:	30 e0       	ldi	r19, 0x00	; 0
    21ca:	4d e1       	ldi	r20, 0x1D	; 29
    21cc:	50 e0       	ldi	r21, 0x00	; 0
    21ce:	6a e1       	ldi	r22, 0x1A	; 26
    21d0:	70 e0       	ldi	r23, 0x00	; 0
    21d2:	8d e9       	ldi	r24, 0x9D	; 157
    21d4:	90 e0       	ldi	r25, 0x00	; 0
    21d6:	0e 94 6f 03 	call	0x6de	; 0x6de <cmd_text>
	cmd_text(50, 51, 29, 0, "CONTROL");
    21da:	00 e0       	ldi	r16, 0x00	; 0
    21dc:	11 e2       	ldi	r17, 0x21	; 33
    21de:	20 e0       	ldi	r18, 0x00	; 0
    21e0:	30 e0       	ldi	r19, 0x00	; 0
    21e2:	4d e1       	ldi	r20, 0x1D	; 29
    21e4:	50 e0       	ldi	r21, 0x00	; 0
    21e6:	63 e3       	ldi	r22, 0x33	; 51
    21e8:	70 e0       	ldi	r23, 0x00	; 0
    21ea:	82 e3       	ldi	r24, 0x32	; 50
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	0e 94 6f 03 	call	0x6de	; 0x6de <cmd_text>
	cmd_text(167, 51, 29, 0, "COMPANY");
    21f2:	08 e0       	ldi	r16, 0x08	; 8
    21f4:	11 e2       	ldi	r17, 0x21	; 33
    21f6:	20 e0       	ldi	r18, 0x00	; 0
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	4d e1       	ldi	r20, 0x1D	; 29
    21fc:	50 e0       	ldi	r21, 0x00	; 0
    21fe:	63 e3       	ldi	r22, 0x33	; 51
    2200:	70 e0       	ldi	r23, 0x00	; 0
    2202:	87 ea       	ldi	r24, 0xA7	; 167
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	0e 94 6f 03 	call	0x6de	; 0x6de <cmd_text>
	
	cmd_text(15, 110, 27, 0, "HW Rev A");
    220a:	00 e1       	ldi	r16, 0x10	; 16
    220c:	11 e2       	ldi	r17, 0x21	; 33
    220e:	20 e0       	ldi	r18, 0x00	; 0
    2210:	30 e0       	ldi	r19, 0x00	; 0
    2212:	4b e1       	ldi	r20, 0x1B	; 27
    2214:	50 e0       	ldi	r21, 0x00	; 0
    2216:	6e e6       	ldi	r22, 0x6E	; 110
    2218:	70 e0       	ldi	r23, 0x00	; 0
    221a:	8f e0       	ldi	r24, 0x0F	; 15
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	0e 94 6f 03 	call	0x6de	; 0x6de <cmd_text>
	cmd_text(220, 110, 27, 0, "SW Rev 1.0");
    2222:	09 e1       	ldi	r16, 0x19	; 25
    2224:	11 e2       	ldi	r17, 0x21	; 33
    2226:	20 e0       	ldi	r18, 0x00	; 0
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	4b e1       	ldi	r20, 0x1B	; 27
    222c:	50 e0       	ldi	r21, 0x00	; 0
    222e:	6e e6       	ldi	r22, 0x6E	; 110
    2230:	70 e0       	ldi	r23, 0x00	; 0
    2232:	8c ed       	ldi	r24, 0xDC	; 220
    2234:	90 e0       	ldi	r25, 0x00	; 0
    2236:	0e 94 6f 03 	call	0x6de	; 0x6de <cmd_text>
	
	cmd(COLOR_RGB(0,0,0));
    223a:	60 e0       	ldi	r22, 0x00	; 0
    223c:	70 e0       	ldi	r23, 0x00	; 0
    223e:	80 e0       	ldi	r24, 0x00	; 0
    2240:	94 e0       	ldi	r25, 0x04	; 4
    2242:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
	if (program_state.program == THIRTY_EIGHT)
    2246:	80 91 e8 23 	lds	r24, 0x23E8	; 0x8023e8 <program_state+0x4>
    224a:	81 11       	cpse	r24, r1
    224c:	03 c0       	rjmp	.+6      	; 0x2254 <draw_startup_screen+0x3a4>
	{
		cmd_text(50, 170, 29, 0, "D     ro   FSMA 30-20");
    224e:	04 e2       	ldi	r16, 0x24	; 36
    2250:	11 e2       	ldi	r17, 0x21	; 33
    2252:	02 c0       	rjmp	.+4      	; 0x2258 <draw_startup_screen+0x3a8>
	}
	else
	{
		cmd_text(50, 170, 29, 0, "D     ro   FSMA 50-50");
    2254:	0a e3       	ldi	r16, 0x3A	; 58
    2256:	11 e2       	ldi	r17, 0x21	; 33
    2258:	20 e0       	ldi	r18, 0x00	; 0
    225a:	30 e0       	ldi	r19, 0x00	; 0
    225c:	4d e1       	ldi	r20, 0x1D	; 29
    225e:	50 e0       	ldi	r21, 0x00	; 0
    2260:	6a ea       	ldi	r22, 0xAA	; 170
    2262:	70 e0       	ldi	r23, 0x00	; 0
    2264:	82 e3       	ldi	r24, 0x32	; 50
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	0e 94 6f 03 	call	0x6de	; 0x6de <cmd_text>
	}
	cmd(COLOR_RGB(49,74,137));
    226c:	61 e3       	ldi	r22, 0x31	; 49
    226e:	7a e4       	ldi	r23, 0x4A	; 74
    2270:	89 e8       	ldi	r24, 0x89	; 137
    2272:	94 e0       	ldi	r25, 0x04	; 4
    2274:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
	cmd_text(49, 170, 29, 0, "   CP");
    2278:	00 e5       	ldi	r16, 0x50	; 80
    227a:	11 e2       	ldi	r17, 0x21	; 33
    227c:	20 e0       	ldi	r18, 0x00	; 0
    227e:	30 e0       	ldi	r19, 0x00	; 0
    2280:	4d e1       	ldi	r20, 0x1D	; 29
    2282:	50 e0       	ldi	r21, 0x00	; 0
    2284:	6a ea       	ldi	r22, 0xAA	; 170
    2286:	70 e0       	ldi	r23, 0x00	; 0
    2288:	81 e3       	ldi	r24, 0x31	; 49
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	0e 94 6f 03 	call	0x6de	; 0x6de <cmd_text>
}
    2290:	1f 91       	pop	r17
    2292:	0f 91       	pop	r16
    2294:	08 95       	ret

00002296 <round_to_tens>:
Rounds any 16-bit number to the closest tens place.
So 1564 -> 1560, 1785 -> 1790, etc.
**************************************************/
uint16_t round_to_tens(uint16_t number)
{
	return (uint16_t)((number / 10) + 0.5) * 10;
    2296:	6a e0       	ldi	r22, 0x0A	; 10
    2298:	70 e0       	ldi	r23, 0x00	; 0
    229a:	0e 94 d4 37 	call	0x6fa8	; 0x6fa8 <__udivmodhi4>
    229e:	80 e0       	ldi	r24, 0x00	; 0
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	0e 94 e4 35 	call	0x6bc8	; 0x6bc8 <__floatunsisf>
    22a6:	20 e0       	ldi	r18, 0x00	; 0
    22a8:	30 e0       	ldi	r19, 0x00	; 0
    22aa:	40 e0       	ldi	r20, 0x00	; 0
    22ac:	5f e3       	ldi	r21, 0x3F	; 63
    22ae:	0e 94 cb 34 	call	0x6996	; 0x6996 <__addsf3>
    22b2:	0e 94 b5 35 	call	0x6b6a	; 0x6b6a <__fixunssfsi>
    22b6:	2a e0       	ldi	r18, 0x0A	; 10
    22b8:	26 9f       	mul	r18, r22
    22ba:	a0 01       	movw	r20, r0
    22bc:	27 9f       	mul	r18, r23
    22be:	50 0d       	add	r21, r0
    22c0:	11 24       	eor	r1, r1
    22c2:	ca 01       	movw	r24, r20
    22c4:	08 95       	ret

000022c6 <draw_current_and_voltage>:
		}
	}
}

void draw_current_and_voltage(ProgramState *program_state, OutputState *output, int gauge_x, int gauge_y, int width, uint16_t max_voltage, uint16_t max_current)
{
    22c6:	2f 92       	push	r2
    22c8:	3f 92       	push	r3
    22ca:	4f 92       	push	r4
    22cc:	5f 92       	push	r5
    22ce:	6f 92       	push	r6
    22d0:	7f 92       	push	r7
    22d2:	8f 92       	push	r8
    22d4:	9f 92       	push	r9
    22d6:	af 92       	push	r10
    22d8:	bf 92       	push	r11
    22da:	cf 92       	push	r12
    22dc:	df 92       	push	r13
    22de:	ef 92       	push	r14
    22e0:	ff 92       	push	r15
    22e2:	0f 93       	push	r16
    22e4:	1f 93       	push	r17
    22e6:	cf 93       	push	r28
    22e8:	df 93       	push	r29
    22ea:	cd b7       	in	r28, 0x3d	; 61
    22ec:	de b7       	in	r29, 0x3e	; 62
    22ee:	28 97       	sbiw	r28, 0x08	; 8
    22f0:	cd bf       	out	0x3d, r28	; 61
    22f2:	de bf       	out	0x3e, r29	; 62
    22f4:	1c 01       	movw	r2, r24
    22f6:	7b 01       	movw	r14, r22
    22f8:	6a 01       	movw	r12, r20
    22fa:	59 01       	movw	r10, r18
	//**************************************************
	wdt_reset(); // WATCH DOG TIMER RESET
    22fc:	a8 95       	wdr
	//**************************************************
	cmd( BEGIN(RECTS) );
    22fe:	69 e0       	ldi	r22, 0x09	; 9
    2300:	70 e0       	ldi	r23, 0x00	; 0
    2302:	80 e0       	ldi	r24, 0x00	; 0
    2304:	9f e1       	ldi	r25, 0x1F	; 31
    2306:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
	
	/* draws outer rectangle (black) */
	cmd(COLOR_RGB(0, 0, 0));
    230a:	60 e0       	ldi	r22, 0x00	; 0
    230c:	70 e0       	ldi	r23, 0x00	; 0
    230e:	80 e0       	ldi	r24, 0x00	; 0
    2310:	94 e0       	ldi	r25, 0x04	; 4
    2312:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
	cmd( LINE_WIDTH(200) );
    2316:	68 ec       	ldi	r22, 0xC8	; 200
    2318:	70 e0       	ldi	r23, 0x00	; 0
    231a:	80 e0       	ldi	r24, 0x00	; 0
    231c:	9e e0       	ldi	r25, 0x0E	; 14
    231e:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
	cmd( VERTEX2F(16 * 15, 16 * (gauge_y+10)) );
    2322:	85 01       	movw	r16, r10
    2324:	06 5f       	subi	r16, 0xF6	; 246
    2326:	1f 4f       	sbci	r17, 0xFF	; 255
    2328:	64 e0       	ldi	r22, 0x04	; 4
    232a:	00 0f       	add	r16, r16
    232c:	11 1f       	adc	r17, r17
    232e:	6a 95       	dec	r22
    2330:	e1 f7       	brne	.-8      	; 0x232a <draw_current_and_voltage+0x64>
    2332:	0b 83       	std	Y+3, r16	; 0x03
    2334:	1c 83       	std	Y+4, r17	; 0x04

uint32_t VERTEX2F(uint16_t x, uint16_t y)
{
	x &= 0x7FFF;
	y &= 0x7FFF;
	uint32_t command = (((uint32_t) 0x01 << 30) | (uint32_t) x << 15 | (uint32_t) y);
    2336:	28 01       	movw	r4, r16
    2338:	e8 94       	clt
    233a:	57 f8       	bld	r5, 7
    233c:	61 2c       	mov	r6, r1
    233e:	71 2c       	mov	r7, r1
	cmd( BEGIN(RECTS) );
	
	/* draws outer rectangle (black) */
	cmd(COLOR_RGB(0, 0, 0));
	cmd( LINE_WIDTH(200) );
	cmd( VERTEX2F(16 * 15, 16 * (gauge_y+10)) );
    2340:	c3 01       	movw	r24, r6
    2342:	b2 01       	movw	r22, r4
    2344:	88 67       	ori	r24, 0x78	; 120
    2346:	90 64       	ori	r25, 0x40	; 64
    2348:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
	cmd( VERTEX2F(16 * 305, 16 * (gauge_y+82)) );
    234c:	b8 01       	movw	r22, r16
    234e:	60 58       	subi	r22, 0x80	; 128
    2350:	7b 4f       	sbci	r23, 0xFB	; 251
    2352:	7f 77       	andi	r23, 0x7F	; 127
    2354:	cb 01       	movw	r24, r22
    2356:	a0 e0       	ldi	r26, 0x00	; 0
    2358:	b0 e0       	ldi	r27, 0x00	; 0
    235a:	bc 01       	movw	r22, r24
    235c:	cd 01       	movw	r24, r26
    235e:	88 68       	ori	r24, 0x88	; 136
    2360:	99 64       	ori	r25, 0x49	; 73
    2362:	0e 94 01 03 	call	0x602	; 0x602 <cmd>

	/*draws inner rectangle (white) */
	cmd(COLOR_RGB(255, 255, 255));
    2366:	6f ef       	ldi	r22, 0xFF	; 255
    2368:	7f ef       	ldi	r23, 0xFF	; 255
    236a:	8f ef       	ldi	r24, 0xFF	; 255
    236c:	94 e0       	ldi	r25, 0x04	; 4
    236e:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
	cmd( VERTEX2F(16 * 17, 16 * (gauge_y+12)) );
    2372:	b8 01       	movw	r22, r16
    2374:	60 5e       	subi	r22, 0xE0	; 224
    2376:	7f 4f       	sbci	r23, 0xFF	; 255
    2378:	7f 77       	andi	r23, 0x7F	; 127
    237a:	cb 01       	movw	r24, r22
    237c:	a0 e0       	ldi	r26, 0x00	; 0
    237e:	b0 e0       	ldi	r27, 0x00	; 0
    2380:	bc 01       	movw	r22, r24
    2382:	cd 01       	movw	r24, r26
    2384:	88 68       	ori	r24, 0x88	; 136
    2386:	90 64       	ori	r25, 0x40	; 64
    2388:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
	cmd( VERTEX2F(16 * 303, 16 * (gauge_y+80)) );
    238c:	b8 01       	movw	r22, r16
    238e:	60 5a       	subi	r22, 0xA0	; 160
    2390:	7b 4f       	sbci	r23, 0xFB	; 251
    2392:	7f 77       	andi	r23, 0x7F	; 127
    2394:	cb 01       	movw	r24, r22
    2396:	a0 e0       	ldi	r26, 0x00	; 0
    2398:	b0 e0       	ldi	r27, 0x00	; 0
    239a:	bc 01       	movw	r22, r24
    239c:	cd 01       	movw	r24, r26
    239e:	88 67       	ori	r24, 0x78	; 120
    23a0:	99 64       	ori	r25, 0x49	; 73
    23a2:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
	

	/* draws red bar for voltage */
	cmd( LINE_WIDTH(16) );
    23a6:	60 e1       	ldi	r22, 0x10	; 16
    23a8:	70 e0       	ldi	r23, 0x00	; 0
    23aa:	80 e0       	ldi	r24, 0x00	; 0
    23ac:	9e e0       	ldi	r25, 0x0E	; 14
    23ae:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
	cmd(COLOR_RGB(255, 0, 0));
    23b2:	6f ef       	ldi	r22, 0xFF	; 255
    23b4:	70 e0       	ldi	r23, 0x00	; 0
    23b6:	80 e0       	ldi	r24, 0x00	; 0
    23b8:	94 e0       	ldi	r25, 0x04	; 4
    23ba:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
    23be:	f7 01       	movw	r30, r14
    23c0:	64 89       	ldd	r22, Z+20	; 0x14
    23c2:	75 89       	ldd	r23, Z+21	; 0x15
    23c4:	0b 81       	ldd	r16, Y+3	; 0x03
    23c6:	1c 81       	ldd	r17, Y+4	; 0x04
    23c8:	00 57       	subi	r16, 0x70	; 112
    23ca:	11 09       	sbc	r17, r1
    23cc:	2b 81       	ldd	r18, Y+3	; 0x03
    23ce:	3c 81       	ldd	r19, Y+4	; 0x04
    23d0:	20 52       	subi	r18, 0x20	; 32
    23d2:	31 09       	sbc	r19, r1
    23d4:	49 01       	movw	r8, r18
		cmd( VERTEX2F(endMaxVoltage + (16*16), 16 * (gauge_y+8)) );
	}
	else
	{
		double startMaxVoltage = (((float) ((float)output->max_voltage/100)) + 3.677326)/0.0119958;
		cmd( VERTEX2F(startMaxVoltage + (16*16), 16 * (gauge_y+3)) );
    23d6:	80 e0       	ldi	r24, 0x00	; 0
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	0e 94 e4 35 	call	0x6bc8	; 0x6bc8 <__floatunsisf>
    23de:	20 e0       	ldi	r18, 0x00	; 0
    23e0:	30 e0       	ldi	r19, 0x00	; 0
    23e2:	48 ec       	ldi	r20, 0xC8	; 200
    23e4:	52 e4       	ldi	r21, 0x42	; 66
    23e6:	0e 94 3c 35 	call	0x6a78	; 0x6a78 <__divsf3>
    23ea:	2f e4       	ldi	r18, 0x4F	; 79
    23ec:	39 e5       	ldi	r19, 0x59	; 89
    23ee:	4b e6       	ldi	r20, 0x6B	; 107
    23f0:	50 e4       	ldi	r21, 0x40	; 64
    23f2:	0e 94 cb 34 	call	0x6996	; 0x6996 <__addsf3>
    23f6:	28 e0       	ldi	r18, 0x08	; 8
    23f8:	3a e8       	ldi	r19, 0x8A	; 138
    23fa:	44 e4       	ldi	r20, 0x44	; 68
    23fc:	5c e3       	ldi	r21, 0x3C	; 60
    23fe:	0e 94 3c 35 	call	0x6a78	; 0x6a78 <__divsf3>
    2402:	20 e0       	ldi	r18, 0x00	; 0
    2404:	30 e0       	ldi	r19, 0x00	; 0
    2406:	40 e8       	ldi	r20, 0x80	; 128
    2408:	53 e4       	ldi	r21, 0x43	; 67
    240a:	0e 94 cb 34 	call	0x6996	; 0x6996 <__addsf3>
    240e:	0e 94 b5 35 	call	0x6b6a	; 0x6b6a <__fixunssfsi>
    2412:	7f 77       	andi	r23, 0x7F	; 127
    2414:	ab 01       	movw	r20, r22
    2416:	60 e0       	ldi	r22, 0x00	; 0
    2418:	70 e0       	ldi	r23, 0x00	; 0
    241a:	ef e0       	ldi	r30, 0x0F	; 15
    241c:	44 0f       	add	r20, r20
    241e:	55 1f       	adc	r21, r21
    2420:	66 1f       	adc	r22, r22
    2422:	77 1f       	adc	r23, r23
    2424:	ea 95       	dec	r30
    2426:	d1 f7       	brne	.-12     	; 0x241c <draw_current_and_voltage+0x156>
    2428:	db 01       	movw	r26, r22
    242a:	ca 01       	movw	r24, r20
    242c:	b0 64       	ori	r27, 0x40	; 64
    242e:	8d 83       	std	Y+5, r24	; 0x05
    2430:	9e 83       	std	Y+6, r25	; 0x06
    2432:	af 83       	std	Y+7, r26	; 0x07
    2434:	b8 87       	std	Y+8, r27	; 0x08
    2436:	c8 01       	movw	r24, r16
    2438:	9f 77       	andi	r25, 0x7F	; 127
    243a:	a0 e0       	ldi	r26, 0x00	; 0
    243c:	b0 e0       	ldi	r27, 0x00	; 0
    243e:	2d 81       	ldd	r18, Y+5	; 0x05
    2440:	3e 81       	ldd	r19, Y+6	; 0x06
    2442:	4f 81       	ldd	r20, Y+7	; 0x07
    2444:	58 85       	ldd	r21, Y+8	; 0x08
    2446:	28 2b       	or	r18, r24
    2448:	39 2b       	or	r19, r25
    244a:	4a 2b       	or	r20, r26
    244c:	5b 2b       	or	r21, r27
    244e:	ca 01       	movw	r24, r20
    2450:	b9 01       	movw	r22, r18
    2452:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
		double endMaxVoltage = (((float) ((float)5100/100)) + 3.677326)/0.0119958;
		cmd( VERTEX2F(endMaxVoltage + (16*16), 16 * (gauge_y+8)) );
    2456:	b4 01       	movw	r22, r8
    2458:	7f 77       	andi	r23, 0x7F	; 127
    245a:	cb 01       	movw	r24, r22
    245c:	a0 e0       	ldi	r26, 0x00	; 0
    245e:	b0 e0       	ldi	r27, 0x00	; 0
    2460:	bc 01       	movw	r22, r24
    2462:	cd 01       	movw	r24, r26
    2464:	87 66       	ori	r24, 0x67	; 103
    2466:	99 64       	ori	r25, 0x49	; 73
    2468:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
	}
	
	//**************************************************
	wdt_reset(); // WATCH DOG TIMER RESET
    246c:	a8 95       	wdr
	//**************************************************
	
	/* draws red bar for current */
	cmd( LINE_WIDTH(16) );
    246e:	60 e1       	ldi	r22, 0x10	; 16
    2470:	70 e0       	ldi	r23, 0x00	; 0
    2472:	80 e0       	ldi	r24, 0x00	; 0
    2474:	9e e0       	ldi	r25, 0x0E	; 14
    2476:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
	cmd(COLOR_RGB(255, 0, 0));
    247a:	6f ef       	ldi	r22, 0xFF	; 255
    247c:	70 e0       	ldi	r23, 0x00	; 0
    247e:	80 e0       	ldi	r24, 0x00	; 0
    2480:	94 e0       	ldi	r25, 0x04	; 4
    2482:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
    2486:	f7 01       	movw	r30, r14
    2488:	62 89       	ldd	r22, Z+18	; 0x12
    248a:	73 89       	ldd	r23, Z+19	; 0x13
    248c:	2b 81       	ldd	r18, Y+3	; 0x03
    248e:	3c 81       	ldd	r19, Y+4	; 0x04
    2490:	20 5d       	subi	r18, 0xD0	; 208
    2492:	3d 4f       	sbci	r19, 0xFD	; 253
    2494:	29 83       	std	Y+1, r18	; 0x01
    2496:	3a 83       	std	Y+2, r19	; 0x02
    2498:	4b 81       	ldd	r20, Y+3	; 0x03
    249a:	5c 81       	ldd	r21, Y+4	; 0x04
    249c:	40 58       	subi	r20, 0x80	; 128
    249e:	5d 4f       	sbci	r21, 0xFD	; 253
    24a0:	4a 01       	movw	r8, r20
		cmd( VERTEX2F(endMaxCurrent + (16*16), 16 * (gauge_y+50)) );
	}
	else
	{
		double startMaxCurrent = (((float) ((float)output->max_current/100)) + 3.677326)/0.0119958;
		cmd( VERTEX2F(startMaxCurrent + (16*16), 16 * (gauge_y+45)) );
    24a2:	80 e0       	ldi	r24, 0x00	; 0
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	0e 94 e4 35 	call	0x6bc8	; 0x6bc8 <__floatunsisf>
    24aa:	20 e0       	ldi	r18, 0x00	; 0
    24ac:	30 e0       	ldi	r19, 0x00	; 0
    24ae:	48 ec       	ldi	r20, 0xC8	; 200
    24b0:	52 e4       	ldi	r21, 0x42	; 66
    24b2:	0e 94 3c 35 	call	0x6a78	; 0x6a78 <__divsf3>
    24b6:	2f e4       	ldi	r18, 0x4F	; 79
    24b8:	39 e5       	ldi	r19, 0x59	; 89
    24ba:	4b e6       	ldi	r20, 0x6B	; 107
    24bc:	50 e4       	ldi	r21, 0x40	; 64
    24be:	0e 94 cb 34 	call	0x6996	; 0x6996 <__addsf3>
    24c2:	28 e0       	ldi	r18, 0x08	; 8
    24c4:	3a e8       	ldi	r19, 0x8A	; 138
    24c6:	44 e4       	ldi	r20, 0x44	; 68
    24c8:	5c e3       	ldi	r21, 0x3C	; 60
    24ca:	0e 94 3c 35 	call	0x6a78	; 0x6a78 <__divsf3>
    24ce:	20 e0       	ldi	r18, 0x00	; 0
    24d0:	30 e0       	ldi	r19, 0x00	; 0
    24d2:	40 e8       	ldi	r20, 0x80	; 128
    24d4:	53 e4       	ldi	r21, 0x43	; 67
    24d6:	0e 94 cb 34 	call	0x6996	; 0x6996 <__addsf3>
    24da:	0e 94 b5 35 	call	0x6b6a	; 0x6b6a <__fixunssfsi>
    24de:	7f 77       	andi	r23, 0x7F	; 127
    24e0:	ab 01       	movw	r20, r22
    24e2:	60 e0       	ldi	r22, 0x00	; 0
    24e4:	70 e0       	ldi	r23, 0x00	; 0
    24e6:	ff e0       	ldi	r31, 0x0F	; 15
    24e8:	44 0f       	add	r20, r20
    24ea:	55 1f       	adc	r21, r21
    24ec:	66 1f       	adc	r22, r22
    24ee:	77 1f       	adc	r23, r23
    24f0:	fa 95       	dec	r31
    24f2:	d1 f7       	brne	.-12     	; 0x24e8 <draw_current_and_voltage+0x222>
    24f4:	db 01       	movw	r26, r22
    24f6:	ca 01       	movw	r24, r20
    24f8:	b0 64       	ori	r27, 0x40	; 64
    24fa:	8d 83       	std	Y+5, r24	; 0x05
    24fc:	9e 83       	std	Y+6, r25	; 0x06
    24fe:	af 83       	std	Y+7, r26	; 0x07
    2500:	b8 87       	std	Y+8, r27	; 0x08
    2502:	89 81       	ldd	r24, Y+1	; 0x01
    2504:	9a 81       	ldd	r25, Y+2	; 0x02
    2506:	9f 77       	andi	r25, 0x7F	; 127
    2508:	a0 e0       	ldi	r26, 0x00	; 0
    250a:	b0 e0       	ldi	r27, 0x00	; 0
    250c:	2d 81       	ldd	r18, Y+5	; 0x05
    250e:	3e 81       	ldd	r19, Y+6	; 0x06
    2510:	4f 81       	ldd	r20, Y+7	; 0x07
    2512:	58 85       	ldd	r21, Y+8	; 0x08
    2514:	28 2b       	or	r18, r24
    2516:	39 2b       	or	r19, r25
    2518:	4a 2b       	or	r20, r26
    251a:	5b 2b       	or	r21, r27
    251c:	ca 01       	movw	r24, r20
    251e:	b9 01       	movw	r22, r18
    2520:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
		double endMaxCurrent = (((float) ((float)5100/100)) + 3.677326)/0.0119958;
		cmd( VERTEX2F(endMaxCurrent + (16*16), 16 * (gauge_y+50)) );
    2524:	b4 01       	movw	r22, r8
    2526:	7f 77       	andi	r23, 0x7F	; 127
    2528:	cb 01       	movw	r24, r22
    252a:	a0 e0       	ldi	r26, 0x00	; 0
    252c:	b0 e0       	ldi	r27, 0x00	; 0
    252e:	bc 01       	movw	r22, r24
    2530:	cd 01       	movw	r24, r26
    2532:	87 66       	ori	r24, 0x67	; 103
    2534:	99 64       	ori	r25, 0x49	; 73
    2536:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
	}
	
	/* selects color of voltage bar */
	if((uint16_t)(round(output->voltage * VOLTAGE_DROP_COEFICIENT)) >= 5000)
    253a:	d7 01       	movw	r26, r14
    253c:	58 96       	adiw	r26, 0x18	; 24
    253e:	6d 91       	ld	r22, X+
    2540:	7c 91       	ld	r23, X
    2542:	59 97       	sbiw	r26, 0x19	; 25
    2544:	80 e0       	ldi	r24, 0x00	; 0
    2546:	90 e0       	ldi	r25, 0x00	; 0
    2548:	0e 94 e4 35 	call	0x6bc8	; 0x6bc8 <__floatunsisf>
    254c:	22 e5       	ldi	r18, 0x52	; 82
    254e:	3c e5       	ldi	r19, 0x5C	; 92
    2550:	4d e7       	ldi	r20, 0x7D	; 125
    2552:	5f e3       	ldi	r21, 0x3F	; 63
    2554:	0e 94 f3 36 	call	0x6de6	; 0x6de6 <__mulsf3>
    2558:	0e 94 60 37 	call	0x6ec0	; 0x6ec0 <round>
    255c:	0e 94 b5 35 	call	0x6b6a	; 0x6b6a <__fixunssfsi>
    2560:	68 38       	cpi	r22, 0x88	; 136
    2562:	73 41       	sbci	r23, 0x13	; 19
    2564:	28 f0       	brcs	.+10     	; 0x2570 <draw_current_and_voltage+0x2aa>
	{
		cmd(COLOR_RGB(255, 10, 15)); //choose reddish color
    2566:	6f ef       	ldi	r22, 0xFF	; 255
    2568:	7a e0       	ldi	r23, 0x0A	; 10
    256a:	8f e0       	ldi	r24, 0x0F	; 15
    256c:	94 e0       	ldi	r25, 0x04	; 4
    256e:	04 c0       	rjmp	.+8      	; 0x2578 <draw_current_and_voltage+0x2b2>
	}
	else
	{
		cmd(COLOR_RGB(0, 100, 200)); //choose blueish color
    2570:	60 e0       	ldi	r22, 0x00	; 0
    2572:	74 e6       	ldi	r23, 0x64	; 100
    2574:	88 ec       	ldi	r24, 0xC8	; 200
    2576:	94 e0       	ldi	r25, 0x04	; 4
    2578:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
	}
	
	/* draws voltage bar */
	cmd( LINE_WIDTH(16) );
    257c:	60 e1       	ldi	r22, 0x10	; 16
    257e:	70 e0       	ldi	r23, 0x00	; 0
    2580:	80 e0       	ldi	r24, 0x00	; 0
    2582:	9e e0       	ldi	r25, 0x0E	; 14
    2584:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
	if((uint16_t)(round(output->voltage * VOLTAGE_DROP_COEFICIENT)) > 5)
    2588:	f7 01       	movw	r30, r14
    258a:	60 8d       	ldd	r22, Z+24	; 0x18
    258c:	71 8d       	ldd	r23, Z+25	; 0x19
    258e:	80 e0       	ldi	r24, 0x00	; 0
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	0e 94 e4 35 	call	0x6bc8	; 0x6bc8 <__floatunsisf>
    2596:	22 e5       	ldi	r18, 0x52	; 82
    2598:	3c e5       	ldi	r19, 0x5C	; 92
    259a:	4d e7       	ldi	r20, 0x7D	; 125
    259c:	5f e3       	ldi	r21, 0x3F	; 63
    259e:	0e 94 f3 36 	call	0x6de6	; 0x6de6 <__mulsf3>
    25a2:	0e 94 60 37 	call	0x6ec0	; 0x6ec0 <round>
    25a6:	0e 94 b5 35 	call	0x6b6a	; 0x6b6a <__fixunssfsi>
    25aa:	66 30       	cpi	r22, 0x06	; 6
    25ac:	71 05       	cpc	r23, r1
    25ae:	08 f4       	brcc	.+2      	; 0x25b2 <draw_current_and_voltage+0x2ec>
    25b0:	71 c0       	rjmp	.+226    	; 0x2694 <draw_current_and_voltage+0x3ce>
	{
		cmd( VERTEX2F(16 * (gauge_x+22), 16 * (gauge_y+3)) );
    25b2:	b6 01       	movw	r22, r12
    25b4:	6a 5e       	subi	r22, 0xEA	; 234
    25b6:	7f 4f       	sbci	r23, 0xFF	; 255
    25b8:	44 e0       	ldi	r20, 0x04	; 4
    25ba:	66 0f       	add	r22, r22
    25bc:	77 1f       	adc	r23, r23
    25be:	4a 95       	dec	r20
    25c0:	e1 f7       	brne	.-8      	; 0x25ba <draw_current_and_voltage+0x2f4>
    25c2:	7f 77       	andi	r23, 0x7F	; 127
    25c4:	cb 01       	movw	r24, r22
    25c6:	a0 e0       	ldi	r26, 0x00	; 0
    25c8:	b0 e0       	ldi	r27, 0x00	; 0
    25ca:	5f e0       	ldi	r21, 0x0F	; 15
    25cc:	88 0f       	add	r24, r24
    25ce:	99 1f       	adc	r25, r25
    25d0:	aa 1f       	adc	r26, r26
    25d2:	bb 1f       	adc	r27, r27
    25d4:	5a 95       	dec	r21
    25d6:	d1 f7       	brne	.-12     	; 0x25cc <draw_current_and_voltage+0x306>
    25d8:	b0 64       	ori	r27, 0x40	; 64
    25da:	1f 77       	andi	r17, 0x7F	; 127
    25dc:	20 e0       	ldi	r18, 0x00	; 0
    25de:	30 e0       	ldi	r19, 0x00	; 0
    25e0:	bc 01       	movw	r22, r24
    25e2:	cd 01       	movw	r24, r26
    25e4:	60 2b       	or	r22, r16
    25e6:	71 2b       	or	r23, r17
    25e8:	82 2b       	or	r24, r18
    25ea:	93 2b       	or	r25, r19
    25ec:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
		double shouldBeValVoltage = (((float) ((float) MAX(round_to_tens((uint16_t)(round(output->voltage * VOLTAGE_DROP_COEFICIENT))), 15)/100)) + 3.677326)/0.0119958;
    25f0:	d7 01       	movw	r26, r14
    25f2:	58 96       	adiw	r26, 0x18	; 24
    25f4:	6d 91       	ld	r22, X+
    25f6:	7c 91       	ld	r23, X
    25f8:	59 97       	sbiw	r26, 0x19	; 25
    25fa:	80 e0       	ldi	r24, 0x00	; 0
    25fc:	90 e0       	ldi	r25, 0x00	; 0
    25fe:	0e 94 e4 35 	call	0x6bc8	; 0x6bc8 <__floatunsisf>
    2602:	22 e5       	ldi	r18, 0x52	; 82
    2604:	3c e5       	ldi	r19, 0x5C	; 92
    2606:	4d e7       	ldi	r20, 0x7D	; 125
    2608:	5f e3       	ldi	r21, 0x3F	; 63
    260a:	0e 94 f3 36 	call	0x6de6	; 0x6de6 <__mulsf3>
    260e:	0e 94 60 37 	call	0x6ec0	; 0x6ec0 <round>
    2612:	0e 94 b5 35 	call	0x6b6a	; 0x6b6a <__fixunssfsi>
    2616:	cb 01       	movw	r24, r22
    2618:	0e 94 4b 11 	call	0x2296	; 0x2296 <round_to_tens>
    261c:	80 31       	cpi	r24, 0x10	; 16
    261e:	91 05       	cpc	r25, r1
    2620:	c0 f0       	brcs	.+48     	; 0x2652 <draw_current_and_voltage+0x38c>
    2622:	bc 01       	movw	r22, r24
    2624:	80 e0       	ldi	r24, 0x00	; 0
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	0e 94 e4 35 	call	0x6bc8	; 0x6bc8 <__floatunsisf>
    262c:	20 e0       	ldi	r18, 0x00	; 0
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	48 ec       	ldi	r20, 0xC8	; 200
    2632:	52 e4       	ldi	r21, 0x42	; 66
    2634:	0e 94 3c 35 	call	0x6a78	; 0x6a78 <__divsf3>
    2638:	2f e4       	ldi	r18, 0x4F	; 79
    263a:	39 e5       	ldi	r19, 0x59	; 89
    263c:	4b e6       	ldi	r20, 0x6B	; 107
    263e:	50 e4       	ldi	r21, 0x40	; 64
    2640:	0e 94 cb 34 	call	0x6996	; 0x6996 <__addsf3>
    2644:	28 e0       	ldi	r18, 0x08	; 8
    2646:	3a e8       	ldi	r19, 0x8A	; 138
    2648:	44 e4       	ldi	r20, 0x44	; 68
    264a:	5c e3       	ldi	r21, 0x3C	; 60
    264c:	0e 94 3c 35 	call	0x6a78	; 0x6a78 <__divsf3>
    2650:	04 c0       	rjmp	.+8      	; 0x265a <draw_current_and_voltage+0x394>
    2652:	6b e1       	ldi	r22, 0x1B	; 27
    2654:	77 e8       	ldi	r23, 0x87	; 135
    2656:	8f e9       	ldi	r24, 0x9F	; 159
    2658:	93 e4       	ldi	r25, 0x43	; 67
		cmd( VERTEX2F(shouldBeValVoltage + (16*16), 16 * (gauge_y+10)) );
    265a:	20 e0       	ldi	r18, 0x00	; 0
    265c:	30 e0       	ldi	r19, 0x00	; 0
    265e:	40 e8       	ldi	r20, 0x80	; 128
    2660:	53 e4       	ldi	r21, 0x43	; 67
    2662:	0e 94 cb 34 	call	0x6996	; 0x6996 <__addsf3>
    2666:	0e 94 b5 35 	call	0x6b6a	; 0x6b6a <__fixunssfsi>
    266a:	7f 77       	andi	r23, 0x7F	; 127
    266c:	cb 01       	movw	r24, r22
    266e:	a0 e0       	ldi	r26, 0x00	; 0
    2670:	b0 e0       	ldi	r27, 0x00	; 0
    2672:	3f e0       	ldi	r19, 0x0F	; 15
    2674:	88 0f       	add	r24, r24
    2676:	99 1f       	adc	r25, r25
    2678:	aa 1f       	adc	r26, r26
    267a:	bb 1f       	adc	r27, r27
    267c:	3a 95       	dec	r19
    267e:	d1 f7       	brne	.-12     	; 0x2674 <draw_current_and_voltage+0x3ae>
    2680:	68 94       	set
    2682:	76 f8       	bld	r7, 6
    2684:	bc 01       	movw	r22, r24
    2686:	cd 01       	movw	r24, r26
    2688:	64 29       	or	r22, r4
    268a:	75 29       	or	r23, r5
    268c:	86 29       	or	r24, r6
    268e:	97 29       	or	r25, r7
    2690:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
	}
	
	/* selects color of current bar */
	if(output->current > 5050)
    2694:	f7 01       	movw	r30, r14
    2696:	86 89       	ldd	r24, Z+22	; 0x16
    2698:	97 89       	ldd	r25, Z+23	; 0x17
    269a:	8b 3b       	cpi	r24, 0xBB	; 187
    269c:	93 41       	sbci	r25, 0x13	; 19
    269e:	28 f0       	brcs	.+10     	; 0x26aa <draw_current_and_voltage+0x3e4>
	{
		cmd(COLOR_RGB(255, 10, 15));
    26a0:	6f ef       	ldi	r22, 0xFF	; 255
    26a2:	7a e0       	ldi	r23, 0x0A	; 10
    26a4:	8f e0       	ldi	r24, 0x0F	; 15
    26a6:	94 e0       	ldi	r25, 0x04	; 4
    26a8:	04 c0       	rjmp	.+8      	; 0x26b2 <draw_current_and_voltage+0x3ec>
	}
	else
	{
		cmd(COLOR_RGB(40, 190, 40));
    26aa:	68 e2       	ldi	r22, 0x28	; 40
    26ac:	7e eb       	ldi	r23, 0xBE	; 190
    26ae:	88 e2       	ldi	r24, 0x28	; 40
    26b0:	94 e0       	ldi	r25, 0x04	; 4
    26b2:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
	}
	
	/* draws current bar */
	if(output->current > 5)
    26b6:	d7 01       	movw	r26, r14
    26b8:	56 96       	adiw	r26, 0x16	; 22
    26ba:	8d 91       	ld	r24, X+
    26bc:	9c 91       	ld	r25, X
    26be:	57 97       	sbiw	r26, 0x17	; 23
    26c0:	06 97       	sbiw	r24, 0x06	; 6
    26c2:	08 f4       	brcc	.+2      	; 0x26c6 <draw_current_and_voltage+0x400>
    26c4:	79 c0       	rjmp	.+242    	; 0x27b8 <draw_current_and_voltage+0x4f2>
	{
		cmd( LINE_WIDTH(16) );
    26c6:	60 e1       	ldi	r22, 0x10	; 16
    26c8:	70 e0       	ldi	r23, 0x00	; 0
    26ca:	80 e0       	ldi	r24, 0x00	; 0
    26cc:	9e e0       	ldi	r25, 0x0E	; 14
    26ce:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
		cmd( VERTEX2F(16 * (gauge_x+22), 16 * (gauge_y+43)) );
    26d2:	b6 01       	movw	r22, r12
    26d4:	6a 5e       	subi	r22, 0xEA	; 234
    26d6:	7f 4f       	sbci	r23, 0xFF	; 255
    26d8:	94 e0       	ldi	r25, 0x04	; 4
    26da:	66 0f       	add	r22, r22
    26dc:	77 1f       	adc	r23, r23
    26de:	9a 95       	dec	r25
    26e0:	e1 f7       	brne	.-8      	; 0x26da <draw_current_and_voltage+0x414>
    26e2:	7f 77       	andi	r23, 0x7F	; 127
    26e4:	cb 01       	movw	r24, r22
    26e6:	a0 e0       	ldi	r26, 0x00	; 0
    26e8:	b0 e0       	ldi	r27, 0x00	; 0
    26ea:	2f e0       	ldi	r18, 0x0F	; 15
    26ec:	88 0f       	add	r24, r24
    26ee:	99 1f       	adc	r25, r25
    26f0:	aa 1f       	adc	r26, r26
    26f2:	bb 1f       	adc	r27, r27
    26f4:	2a 95       	dec	r18
    26f6:	d1 f7       	brne	.-12     	; 0x26ec <draw_current_and_voltage+0x426>
    26f8:	ac 01       	movw	r20, r24
    26fa:	bd 01       	movw	r22, r26
    26fc:	70 64       	ori	r23, 0x40	; 64
    26fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2700:	9c 81       	ldd	r25, Y+4	; 0x04
    2702:	80 5f       	subi	r24, 0xF0	; 240
    2704:	9d 4f       	sbci	r25, 0xFD	; 253
    2706:	fc 01       	movw	r30, r24
    2708:	ff 77       	andi	r31, 0x7F	; 127
    270a:	cf 01       	movw	r24, r30
    270c:	a0 e0       	ldi	r26, 0x00	; 0
    270e:	b0 e0       	ldi	r27, 0x00	; 0
    2710:	8a 01       	movw	r16, r20
    2712:	9b 01       	movw	r18, r22
    2714:	08 2b       	or	r16, r24
    2716:	19 2b       	or	r17, r25
    2718:	2a 2b       	or	r18, r26
    271a:	3b 2b       	or	r19, r27
    271c:	c9 01       	movw	r24, r18
    271e:	b8 01       	movw	r22, r16
    2720:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
		double shouldBeValCurrent = (((float) ((float) MAX(round_to_tens(output->current), 15)/100)) + 3.677326)/0.0119958;
    2724:	d7 01       	movw	r26, r14
    2726:	56 96       	adiw	r26, 0x16	; 22
    2728:	8d 91       	ld	r24, X+
    272a:	9c 91       	ld	r25, X
    272c:	57 97       	sbiw	r26, 0x17	; 23
    272e:	0e 94 4b 11 	call	0x2296	; 0x2296 <round_to_tens>
    2732:	80 31       	cpi	r24, 0x10	; 16
    2734:	91 05       	cpc	r25, r1
    2736:	c0 f0       	brcs	.+48     	; 0x2768 <draw_current_and_voltage+0x4a2>
    2738:	bc 01       	movw	r22, r24
    273a:	80 e0       	ldi	r24, 0x00	; 0
    273c:	90 e0       	ldi	r25, 0x00	; 0
    273e:	0e 94 e4 35 	call	0x6bc8	; 0x6bc8 <__floatunsisf>
    2742:	20 e0       	ldi	r18, 0x00	; 0
    2744:	30 e0       	ldi	r19, 0x00	; 0
    2746:	48 ec       	ldi	r20, 0xC8	; 200
    2748:	52 e4       	ldi	r21, 0x42	; 66
    274a:	0e 94 3c 35 	call	0x6a78	; 0x6a78 <__divsf3>
    274e:	2f e4       	ldi	r18, 0x4F	; 79
    2750:	39 e5       	ldi	r19, 0x59	; 89
    2752:	4b e6       	ldi	r20, 0x6B	; 107
    2754:	50 e4       	ldi	r21, 0x40	; 64
    2756:	0e 94 cb 34 	call	0x6996	; 0x6996 <__addsf3>
    275a:	28 e0       	ldi	r18, 0x08	; 8
    275c:	3a e8       	ldi	r19, 0x8A	; 138
    275e:	44 e4       	ldi	r20, 0x44	; 68
    2760:	5c e3       	ldi	r21, 0x3C	; 60
    2762:	0e 94 3c 35 	call	0x6a78	; 0x6a78 <__divsf3>
    2766:	04 c0       	rjmp	.+8      	; 0x2770 <draw_current_and_voltage+0x4aa>
    2768:	6b e1       	ldi	r22, 0x1B	; 27
    276a:	77 e8       	ldi	r23, 0x87	; 135
    276c:	8f e9       	ldi	r24, 0x9F	; 159
    276e:	93 e4       	ldi	r25, 0x43	; 67
		cmd( VERTEX2F(shouldBeValCurrent + (16*16), 16 * (gauge_y+50)) );
    2770:	20 e0       	ldi	r18, 0x00	; 0
    2772:	30 e0       	ldi	r19, 0x00	; 0
    2774:	40 e8       	ldi	r20, 0x80	; 128
    2776:	53 e4       	ldi	r21, 0x43	; 67
    2778:	0e 94 cb 34 	call	0x6996	; 0x6996 <__addsf3>
    277c:	0e 94 b5 35 	call	0x6b6a	; 0x6b6a <__fixunssfsi>
    2780:	7f 77       	andi	r23, 0x7F	; 127
    2782:	cb 01       	movw	r24, r22
    2784:	a0 e0       	ldi	r26, 0x00	; 0
    2786:	b0 e0       	ldi	r27, 0x00	; 0
    2788:	ac 01       	movw	r20, r24
    278a:	bd 01       	movw	r22, r26
    278c:	8f e0       	ldi	r24, 0x0F	; 15
    278e:	44 0f       	add	r20, r20
    2790:	55 1f       	adc	r21, r21
    2792:	66 1f       	adc	r22, r22
    2794:	77 1f       	adc	r23, r23
    2796:	8a 95       	dec	r24
    2798:	d1 f7       	brne	.-12     	; 0x278e <draw_current_and_voltage+0x4c8>
    279a:	c4 01       	movw	r24, r8
    279c:	9f 77       	andi	r25, 0x7F	; 127
    279e:	a0 e0       	ldi	r26, 0x00	; 0
    27a0:	b0 e0       	ldi	r27, 0x00	; 0
    27a2:	b0 64       	ori	r27, 0x40	; 64
    27a4:	8a 01       	movw	r16, r20
    27a6:	9b 01       	movw	r18, r22
    27a8:	08 2b       	or	r16, r24
    27aa:	19 2b       	or	r17, r25
    27ac:	2a 2b       	or	r18, r26
    27ae:	3b 2b       	or	r19, r27
    27b0:	c9 01       	movw	r24, r18
    27b2:	b8 01       	movw	r22, r16
    27b4:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
	}

	cmd(END());
    27b8:	60 e0       	ldi	r22, 0x00	; 0
    27ba:	70 e0       	ldi	r23, 0x00	; 0
    27bc:	80 e0       	ldi	r24, 0x00	; 0
    27be:	91 e2       	ldi	r25, 0x21	; 33
    27c0:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
	
	//**************************************************
	wdt_reset(); // WATCH DOG TIMER RESET
    27c4:	a8 95       	wdr
	//**************************************************
	
	/* gets gauge screenshot from memory and pastes it on screen at desired location */
	cmd(BITMAP_SOURCE(0));
    27c6:	60 e0       	ldi	r22, 0x00	; 0
    27c8:	70 e0       	ldi	r23, 0x00	; 0
    27ca:	80 e0       	ldi	r24, 0x00	; 0
    27cc:	91 e0       	ldi	r25, 0x01	; 1
    27ce:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
	cmd(BITMAP_LAYOUT(6, 2*280, 80));
    27d2:	60 e5       	ldi	r22, 0x50	; 80
    27d4:	70 e6       	ldi	r23, 0x60	; 96
    27d6:	84 e3       	ldi	r24, 0x34	; 52
    27d8:	97 e0       	ldi	r25, 0x07	; 7
    27da:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
	cmd(BITMAP_SIZE(0, 0, 0, 280, 80));
    27de:	60 e5       	ldi	r22, 0x50	; 80
    27e0:	70 e3       	ldi	r23, 0x30	; 48
    27e2:	82 e0       	ldi	r24, 0x02	; 2
    27e4:	98 e0       	ldi	r25, 0x08	; 8
    27e6:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
	cmd(BEGIN(BITMAPS));
    27ea:	61 e0       	ldi	r22, 0x01	; 1
    27ec:	70 e0       	ldi	r23, 0x00	; 0
    27ee:	80 e0       	ldi	r24, 0x00	; 0
    27f0:	9f e1       	ldi	r25, 0x1F	; 31
    27f2:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
	cmd(VERTEX2II(gauge_x+15, gauge_y, 0, 0));
    27f6:	96 01       	movw	r18, r12
    27f8:	21 5f       	subi	r18, 0xF1	; 241
    27fa:	3f 4f       	sbci	r19, 0xFF	; 255
    27fc:	29 83       	std	Y+1, r18	; 0x01
    27fe:	3a 83       	std	Y+2, r19	; 0x02
    2800:	20 e0       	ldi	r18, 0x00	; 0
    2802:	40 e0       	ldi	r20, 0x00	; 0
    2804:	b5 01       	movw	r22, r10
    2806:	89 81       	ldd	r24, Y+1	; 0x01
    2808:	9a 81       	ldd	r25, Y+2	; 0x02
    280a:	0e 94 b0 03 	call	0x760	; 0x760 <VERTEX2II>
    280e:	0e 94 01 03 	call	0x602	; 0x602 <cmd>

	
	
	cmd( LINE_WIDTH(16) );
    2812:	60 e1       	ldi	r22, 0x10	; 16
    2814:	70 e0       	ldi	r23, 0x00	; 0
    2816:	80 e0       	ldi	r24, 0x00	; 0
    2818:	9e e0       	ldi	r25, 0x0E	; 14
    281a:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
	cmd(COLOR_RGB(0, 0, 0)); // chooses black color
    281e:	60 e0       	ldi	r22, 0x00	; 0
    2820:	70 e0       	ldi	r23, 0x00	; 0
    2822:	80 e0       	ldi	r24, 0x00	; 0
    2824:	94 e0       	ldi	r25, 0x04	; 4
    2826:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
	
	if(program_state->program == FOURTY_ONE_DUAL)
    282a:	d1 01       	movw	r26, r2
    282c:	14 96       	adiw	r26, 0x04	; 4
    282e:	8c 91       	ld	r24, X
    2830:	82 30       	cpi	r24, 0x02	; 2
    2832:	d1 f4       	brne	.+52     	; 0x2868 <draw_current_and_voltage+0x5a2>
	{
		if(output->id == output_one.id)
    2834:	f7 01       	movw	r30, r14
    2836:	80 81       	ld	r24, Z
    2838:	90 91 a3 24 	lds	r25, 0x24A3	; 0x8024a3 <output_one>
    283c:	89 13       	cpse	r24, r25
    283e:	03 c0       	rjmp	.+6      	; 0x2846 <draw_current_and_voltage+0x580>
		{
			cmd_text(gauge_x+15, gauge_y+73, 27, 0, "STR. #1");
    2840:	06 e5       	ldi	r16, 0x56	; 86
    2842:	11 e2       	ldi	r17, 0x21	; 33
    2844:	06 c0       	rjmp	.+12     	; 0x2852 <draw_current_and_voltage+0x58c>
		}
		else if(output->id == output_two.id)
    2846:	90 91 21 24 	lds	r25, 0x2421	; 0x802421 <output_two>
    284a:	89 13       	cpse	r24, r25
    284c:	0d c0       	rjmp	.+26     	; 0x2868 <draw_current_and_voltage+0x5a2>
		{
			cmd_text(gauge_x+15, gauge_y+73, 27, 0, "STR. #2");
    284e:	0e e5       	ldi	r16, 0x5E	; 94
    2850:	11 e2       	ldi	r17, 0x21	; 33
    2852:	20 e0       	ldi	r18, 0x00	; 0
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	4b e1       	ldi	r20, 0x1B	; 27
    2858:	50 e0       	ldi	r21, 0x00	; 0
    285a:	b5 01       	movw	r22, r10
    285c:	67 5b       	subi	r22, 0xB7	; 183
    285e:	7f 4f       	sbci	r23, 0xFF	; 255
    2860:	89 81       	ldd	r24, Y+1	; 0x01
    2862:	9a 81       	ldd	r25, Y+2	; 0x02
    2864:	0e 94 6f 03 	call	0x6de	; 0x6de <cmd_text>
		}
	}
	cmd_text(gauge_x+40, gauge_y+55, 27, 0, "OUTPUT: "); // writes "OUTPUT: "
    2868:	06 e6       	ldi	r16, 0x66	; 102
    286a:	11 e2       	ldi	r17, 0x21	; 33
    286c:	20 e0       	ldi	r18, 0x00	; 0
    286e:	30 e0       	ldi	r19, 0x00	; 0
    2870:	4b e1       	ldi	r20, 0x1B	; 27
    2872:	50 e0       	ldi	r21, 0x00	; 0
    2874:	c5 01       	movw	r24, r10
    2876:	c7 96       	adiw	r24, 0x37	; 55
    2878:	89 83       	std	Y+1, r24	; 0x01
    287a:	9a 83       	std	Y+2, r25	; 0x02
    287c:	bc 01       	movw	r22, r24
    287e:	c6 01       	movw	r24, r12
    2880:	88 96       	adiw	r24, 0x28	; 40
    2882:	0e 94 6f 03 	call	0x6de	; 0x6de <cmd_text>
	display_digital_reading((uint16_t)(round(output->voltage * VOLTAGE_DROP_COEFICIENT)), gauge_x+140, gauge_y+55, 27, TRUE); //writes voltage reading
    2886:	d7 01       	movw	r26, r14
    2888:	58 96       	adiw	r26, 0x18	; 24
    288a:	6d 91       	ld	r22, X+
    288c:	7c 91       	ld	r23, X
    288e:	59 97       	sbiw	r26, 0x19	; 25
    2890:	80 e0       	ldi	r24, 0x00	; 0
    2892:	90 e0       	ldi	r25, 0x00	; 0
    2894:	0e 94 e4 35 	call	0x6bc8	; 0x6bc8 <__floatunsisf>
    2898:	22 e5       	ldi	r18, 0x52	; 82
    289a:	3c e5       	ldi	r19, 0x5C	; 92
    289c:	4d e7       	ldi	r20, 0x7D	; 125
    289e:	5f e3       	ldi	r21, 0x3F	; 63
    28a0:	0e 94 f3 36 	call	0x6de6	; 0x6de6 <__mulsf3>
    28a4:	0e 94 60 37 	call	0x6ec0	; 0x6ec0 <round>
    28a8:	0e 94 b5 35 	call	0x6b6a	; 0x6b6a <__fixunssfsi>
    28ac:	dc 01       	movw	r26, r24
    28ae:	cb 01       	movw	r24, r22
    28b0:	01 e0       	ldi	r16, 0x01	; 1
    28b2:	2b e1       	ldi	r18, 0x1B	; 27
    28b4:	30 e0       	ldi	r19, 0x00	; 0
    28b6:	49 81       	ldd	r20, Y+1	; 0x01
    28b8:	5a 81       	ldd	r21, Y+2	; 0x02
    28ba:	b6 01       	movw	r22, r12
    28bc:	64 57       	subi	r22, 0x74	; 116
    28be:	7f 4f       	sbci	r23, 0xFF	; 255
    28c0:	0e 94 22 05 	call	0xa44	; 0xa44 <display_digital_reading>
	display_digital_reading(output->current, gauge_x+225, gauge_y+55, 27, FALSE); //writes current reading
    28c4:	46 01       	movw	r8, r12
    28c6:	b1 ee       	ldi	r27, 0xE1	; 225
    28c8:	8b 0e       	add	r8, r27
    28ca:	91 1c       	adc	r9, r1
    28cc:	00 e0       	ldi	r16, 0x00	; 0
    28ce:	2b e1       	ldi	r18, 0x1B	; 27
    28d0:	30 e0       	ldi	r19, 0x00	; 0
    28d2:	49 81       	ldd	r20, Y+1	; 0x01
    28d4:	5a 81       	ldd	r21, Y+2	; 0x02
    28d6:	b4 01       	movw	r22, r8
    28d8:	f7 01       	movw	r30, r14
    28da:	86 89       	ldd	r24, Z+22	; 0x16
    28dc:	97 89       	ldd	r25, Z+23	; 0x17
    28de:	0e 94 22 05 	call	0xa44	; 0xa44 <display_digital_reading>
	
	if(output->set_current_state >= 1)
    28e2:	d7 01       	movw	r26, r14
    28e4:	1f 96       	adiw	r26, 0x0f	; 15
    28e6:	8c 91       	ld	r24, X
    28e8:	f5 01       	movw	r30, r10
    28ea:	e6 5b       	subi	r30, 0xB6	; 182
    28ec:	ff 4f       	sbci	r31, 0xFF	; 255
    28ee:	e9 83       	std	Y+1, r30	; 0x01
    28f0:	fa 83       	std	Y+2, r31	; 0x02
    28f2:	88 23       	and	r24, r24
    28f4:	61 f0       	breq	.+24     	; 0x290e <draw_current_and_voltage+0x648>
	{
		cmd_text(gauge_x+98, gauge_y+74, 27, 0, "SET CURRENT:");
    28f6:	0f e6       	ldi	r16, 0x6F	; 111
    28f8:	11 e2       	ldi	r17, 0x21	; 33
    28fa:	20 e0       	ldi	r18, 0x00	; 0
    28fc:	30 e0       	ldi	r19, 0x00	; 0
    28fe:	4b e1       	ldi	r20, 0x1B	; 27
    2900:	50 e0       	ldi	r21, 0x00	; 0
    2902:	bf 01       	movw	r22, r30
    2904:	c6 01       	movw	r24, r12
    2906:	8e 59       	subi	r24, 0x9E	; 158
    2908:	9f 4f       	sbci	r25, 0xFF	; 255
    290a:	0e 94 6f 03 	call	0x6de	; 0x6de <cmd_text>
	}
	
	display_digital_reading(output->target_current, gauge_x+225, gauge_y+74, 27, FALSE); // writes target current
    290e:	00 e0       	ldi	r16, 0x00	; 0
    2910:	2b e1       	ldi	r18, 0x1B	; 27
    2912:	30 e0       	ldi	r19, 0x00	; 0
    2914:	49 81       	ldd	r20, Y+1	; 0x01
    2916:	5a 81       	ldd	r21, Y+2	; 0x02
    2918:	b4 01       	movw	r22, r8
    291a:	d7 01       	movw	r26, r14
    291c:	50 96       	adiw	r26, 0x10	; 16
    291e:	8d 91       	ld	r24, X+
    2920:	9c 91       	ld	r25, X
    2922:	51 97       	sbiw	r26, 0x11	; 17
    2924:	0e 94 22 05 	call	0xa44	; 0xa44 <display_digital_reading>
	
	
	draw_character('V', 27, gauge_x+5, gauge_y, 0, 0, 0); // draws 'V' next to voltage gauge
    2928:	f6 01       	movw	r30, r12
    292a:	35 96       	adiw	r30, 0x05	; 5
    292c:	e9 83       	std	Y+1, r30	; 0x01
    292e:	fa 83       	std	Y+2, r31	; 0x02
    2930:	c1 2c       	mov	r12, r1
    2932:	e1 2c       	mov	r14, r1
    2934:	95 01       	movw	r18, r10
    2936:	af 01       	movw	r20, r30
    2938:	6b e1       	ldi	r22, 0x1B	; 27
    293a:	86 e5       	ldi	r24, 0x56	; 86
    293c:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <draw_character>
	draw_character('A', 27, gauge_x+5, gauge_y+36, 0, 0, 0); //draws 'A' next to current gauge
    2940:	95 01       	movw	r18, r10
    2942:	2c 5d       	subi	r18, 0xDC	; 220
    2944:	3f 4f       	sbci	r19, 0xFF	; 255
    2946:	49 81       	ldd	r20, Y+1	; 0x01
    2948:	5a 81       	ldd	r21, Y+2	; 0x02
    294a:	6b e1       	ldi	r22, 0x1B	; 27
    294c:	81 e4       	ldi	r24, 0x41	; 65
    294e:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <draw_character>
}
    2952:	28 96       	adiw	r28, 0x08	; 8
    2954:	cd bf       	out	0x3d, r28	; 61
    2956:	de bf       	out	0x3e, r29	; 62
    2958:	df 91       	pop	r29
    295a:	cf 91       	pop	r28
    295c:	1f 91       	pop	r17
    295e:	0f 91       	pop	r16
    2960:	ff 90       	pop	r15
    2962:	ef 90       	pop	r14
    2964:	df 90       	pop	r13
    2966:	cf 90       	pop	r12
    2968:	bf 90       	pop	r11
    296a:	af 90       	pop	r10
    296c:	9f 90       	pop	r9
    296e:	8f 90       	pop	r8
    2970:	7f 90       	pop	r7
    2972:	6f 90       	pop	r6
    2974:	5f 90       	pop	r5
    2976:	4f 90       	pop	r4
    2978:	3f 90       	pop	r3
    297a:	2f 90       	pop	r2
    297c:	08 95       	ret

0000297e <write_screen>:
	}
	cmd(COLOR_RGB(49,74,137));
	cmd_text(49, 170, 29, 0, "   CP");
}

void write_screen(){
    297e:	cf 92       	push	r12
    2980:	df 92       	push	r13
    2982:	ef 92       	push	r14
    2984:	ff 92       	push	r15
    2986:	0f 93       	push	r16
    2988:	1f 93       	push	r17
	
	//**************************************************
	wdt_reset(); // WATCH DOG TIMER RESET
    298a:	a8 95       	wdr
	//**************************************************
	cmd(CMD_DLSTART);
    298c:	60 e0       	ldi	r22, 0x00	; 0
    298e:	7f ef       	ldi	r23, 0xFF	; 255
    2990:	8f ef       	ldi	r24, 0xFF	; 255
    2992:	9f ef       	ldi	r25, 0xFF	; 255
    2994:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
	
	if (program_state.mode == NORMAL_MODE) 
    2998:	80 91 e7 23 	lds	r24, 0x23E7	; 0x8023e7 <program_state+0x3>
    299c:	81 11       	cpse	r24, r1
    299e:	61 c0       	rjmp	.+194    	; 0x2a62 <write_screen+0xe4>
	{
		//**************************************************
		wdt_reset(); // WATCH DOG TIMER RESET
    29a0:	a8 95       	wdr
		//**************************************************
		program_state.debug_mode = FALSE;
    29a2:	10 92 13 24 	sts	0x2413, r1	; 0x802413 <program_state+0x2f>
		counters.debug_clicks_counter = 0;
    29a6:	10 92 14 25 	sts	0x2514, r1	; 0x802514 <counters+0x30>
    29aa:	10 92 15 25 	sts	0x2515, r1	; 0x802515 <counters+0x31>
		program_state.calibrating_mode = FALSE;
    29ae:	10 92 14 24 	sts	0x2414, r1	; 0x802414 <program_state+0x30>
		counters.calibrate_clicks_counter = 0;
    29b2:	10 92 16 25 	sts	0x2516, r1	; 0x802516 <counters+0x32>
    29b6:	10 92 17 25 	sts	0x2517, r1	; 0x802517 <counters+0x33>
		cmd(CLEAR_COLOR_RGB(0, 0, 0));
    29ba:	60 e0       	ldi	r22, 0x00	; 0
    29bc:	70 e0       	ldi	r23, 0x00	; 0
    29be:	80 e0       	ldi	r24, 0x00	; 0
    29c0:	92 e0       	ldi	r25, 0x02	; 2
    29c2:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
		cmd(CLEAR(1, 1, 1)); // clear screen
    29c6:	67 e0       	ldi	r22, 0x07	; 7
    29c8:	70 e0       	ldi	r23, 0x00	; 0
    29ca:	80 e0       	ldi	r24, 0x00	; 0
    29cc:	96 e2       	ldi	r25, 0x26	; 38
    29ce:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
		draw_current_and_voltage(&program_state, &output_one, gauge_x, gauge_y, gauge_width, 5000, program_state.output->max_current);
    29d2:	e0 91 17 24 	lds	r30, 0x2417	; 0x802417 <program_state+0x33>
    29d6:	f0 91 18 24 	lds	r31, 0x2418	; 0x802418 <program_state+0x34>
    29da:	c2 88       	ldd	r12, Z+18	; 0x12
    29dc:	d3 88       	ldd	r13, Z+19	; 0x13
    29de:	00 91 64 24 	lds	r16, 0x2464	; 0x802464 <gauge_width>
    29e2:	10 91 65 24 	lds	r17, 0x2465	; 0x802465 <gauge_width+0x1>
    29e6:	20 91 1b 24 	lds	r18, 0x241B	; 0x80241b <gauge_y>
    29ea:	30 91 1c 24 	lds	r19, 0x241C	; 0x80241c <gauge_y+0x1>
    29ee:	40 91 52 25 	lds	r20, 0x2552	; 0x802552 <gauge_x>
    29f2:	50 91 53 25 	lds	r21, 0x2553	; 0x802553 <gauge_x+0x1>
    29f6:	88 e8       	ldi	r24, 0x88	; 136
    29f8:	e8 2e       	mov	r14, r24
    29fa:	83 e1       	ldi	r24, 0x13	; 19
    29fc:	f8 2e       	mov	r15, r24
    29fe:	63 ea       	ldi	r22, 0xA3	; 163
    2a00:	74 e2       	ldi	r23, 0x24	; 36
    2a02:	84 ee       	ldi	r24, 0xE4	; 228
    2a04:	93 e2       	ldi	r25, 0x23	; 35
    2a06:	0e 94 63 11 	call	0x22c6	; 0x22c6 <draw_current_and_voltage>
		draw_message_box(&program_state, &output_one, &output_two, &counters);
    2a0a:	24 ee       	ldi	r18, 0xE4	; 228
    2a0c:	34 e2       	ldi	r19, 0x24	; 36
    2a0e:	41 e2       	ldi	r20, 0x21	; 33
    2a10:	54 e2       	ldi	r21, 0x24	; 36
    2a12:	63 ea       	ldi	r22, 0xA3	; 163
    2a14:	74 e2       	ldi	r23, 0x24	; 36
    2a16:	84 ee       	ldi	r24, 0xE4	; 228
    2a18:	93 e2       	ldi	r25, 0x23	; 35
    2a1a:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <draw_message_box>
		if(program_state.num_outputs == DOUBLE)
    2a1e:	80 91 e4 23 	lds	r24, 0x23E4	; 0x8023e4 <program_state>
    2a22:	90 91 e5 23 	lds	r25, 0x23E5	; 0x8023e5 <program_state+0x1>
    2a26:	01 97       	sbiw	r24, 0x01	; 1
    2a28:	09 f0       	breq	.+2      	; 0x2a2c <write_screen+0xae>
    2a2a:	4e c0       	rjmp	.+156    	; 0x2ac8 <write_screen+0x14a>
		{
			draw_current_and_voltage(&program_state, &output_two, gauge_x, gauge_y+139, gauge_width, 5000,  program_state.output->max_current); //draws second gauge
    2a2c:	e0 91 17 24 	lds	r30, 0x2417	; 0x802417 <program_state+0x33>
    2a30:	f0 91 18 24 	lds	r31, 0x2418	; 0x802418 <program_state+0x34>
    2a34:	c2 88       	ldd	r12, Z+18	; 0x12
    2a36:	d3 88       	ldd	r13, Z+19	; 0x13
    2a38:	00 91 64 24 	lds	r16, 0x2464	; 0x802464 <gauge_width>
    2a3c:	10 91 65 24 	lds	r17, 0x2465	; 0x802465 <gauge_width+0x1>
    2a40:	20 91 1b 24 	lds	r18, 0x241B	; 0x80241b <gauge_y>
    2a44:	30 91 1c 24 	lds	r19, 0x241C	; 0x80241c <gauge_y+0x1>
    2a48:	25 57       	subi	r18, 0x75	; 117
    2a4a:	3f 4f       	sbci	r19, 0xFF	; 255
    2a4c:	40 91 52 25 	lds	r20, 0x2552	; 0x802552 <gauge_x>
    2a50:	50 91 53 25 	lds	r21, 0x2553	; 0x802553 <gauge_x+0x1>
    2a54:	61 e2       	ldi	r22, 0x21	; 33
    2a56:	74 e2       	ldi	r23, 0x24	; 36
    2a58:	84 ee       	ldi	r24, 0xE4	; 228
    2a5a:	93 e2       	ldi	r25, 0x23	; 35
    2a5c:	0e 94 63 11 	call	0x22c6	; 0x22c6 <draw_current_and_voltage>
    2a60:	33 c0       	rjmp	.+102    	; 0x2ac8 <write_screen+0x14a>
		}
	}
	else if (program_state.mode == SETTINGS_MODE) 
    2a62:	81 30       	cpi	r24, 0x01	; 1
    2a64:	d1 f4       	brne	.+52     	; 0x2a9a <write_screen+0x11c>
	{
		//**************************************************
		wdt_reset(); // WATCH DOG TIMER RESET
    2a66:	a8 95       	wdr
		//**************************************************
		program_state.output = &output_two;
    2a68:	81 e2       	ldi	r24, 0x21	; 33
    2a6a:	94 e2       	ldi	r25, 0x24	; 36
    2a6c:	80 93 17 24 	sts	0x2417, r24	; 0x802417 <program_state+0x33>
    2a70:	90 93 18 24 	sts	0x2418, r25	; 0x802418 <program_state+0x34>
		cmd(CLEAR_COLOR_RGB(0, 0, 0));
    2a74:	60 e0       	ldi	r22, 0x00	; 0
    2a76:	70 e0       	ldi	r23, 0x00	; 0
    2a78:	80 e0       	ldi	r24, 0x00	; 0
    2a7a:	92 e0       	ldi	r25, 0x02	; 2
    2a7c:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
		cmd(CLEAR(1, 1, 1)); // clear screen
    2a80:	67 e0       	ldi	r22, 0x07	; 7
    2a82:	70 e0       	ldi	r23, 0x00	; 0
    2a84:	80 e0       	ldi	r24, 0x00	; 0
    2a86:	96 e2       	ldi	r25, 0x26	; 38
    2a88:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
		draw_settings_page(&program_state, &output_one);
    2a8c:	63 ea       	ldi	r22, 0xA3	; 163
    2a8e:	74 e2       	ldi	r23, 0x24	; 36
    2a90:	84 ee       	ldi	r24, 0xE4	; 228
    2a92:	93 e2       	ldi	r25, 0x23	; 35
    2a94:	0e 94 cd 06 	call	0xd9a	; 0xd9a <draw_settings_page>
    2a98:	17 c0       	rjmp	.+46     	; 0x2ac8 <write_screen+0x14a>
	}
	else if (program_state.mode == STARTUP_MODE) 
    2a9a:	82 30       	cpi	r24, 0x02	; 2
    2a9c:	a9 f4       	brne	.+42     	; 0x2ac8 <write_screen+0x14a>
	{
		//**************************************************
		wdt_reset(); // WATCH DOG TIMER RESET
    2a9e:	a8 95       	wdr
		//**************************************************
		program_state.output = &output_two;
    2aa0:	81 e2       	ldi	r24, 0x21	; 33
    2aa2:	94 e2       	ldi	r25, 0x24	; 36
    2aa4:	80 93 17 24 	sts	0x2417, r24	; 0x802417 <program_state+0x33>
    2aa8:	90 93 18 24 	sts	0x2418, r25	; 0x802418 <program_state+0x34>
		cmd(CLEAR_COLOR_RGB(0, 0, 0));
    2aac:	60 e0       	ldi	r22, 0x00	; 0
    2aae:	70 e0       	ldi	r23, 0x00	; 0
    2ab0:	80 e0       	ldi	r24, 0x00	; 0
    2ab2:	92 e0       	ldi	r25, 0x02	; 2
    2ab4:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
		cmd(CLEAR(1, 1, 1)); // clear screen
    2ab8:	67 e0       	ldi	r22, 0x07	; 7
    2aba:	70 e0       	ldi	r23, 0x00	; 0
    2abc:	80 e0       	ldi	r24, 0x00	; 0
    2abe:	96 e2       	ldi	r25, 0x26	; 38
    2ac0:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
		draw_startup_screen();
    2ac4:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <draw_startup_screen>
	}
	
	//**************************************************
	wdt_reset(); // WATCH DOG TIMER RESET
    2ac8:	a8 95       	wdr
    2aca:	2f e7       	ldi	r18, 0x7F	; 127
    2acc:	88 e3       	ldi	r24, 0x38	; 56
    2ace:	91 e0       	ldi	r25, 0x01	; 1
    2ad0:	21 50       	subi	r18, 0x01	; 1
    2ad2:	80 40       	sbci	r24, 0x00	; 0
    2ad4:	90 40       	sbci	r25, 0x00	; 0
    2ad6:	e1 f7       	brne	.-8      	; 0x2ad0 <write_screen+0x152>
    2ad8:	00 c0       	rjmp	.+0      	; 0x2ada <write_screen+0x15c>
    2ada:	00 00       	nop
	//**************************************************
	
	_delay_ms(20); //this delay is necessary to maintain a maximum refresh rate, otherwise the screen may tear and glitch out if writing to screen too often
	cmd(DISPLAY()); // display the image
    2adc:	60 e0       	ldi	r22, 0x00	; 0
    2ade:	70 e0       	ldi	r23, 0x00	; 0
    2ae0:	cb 01       	movw	r24, r22
    2ae2:	0e 94 01 03 	call	0x602	; 0x602 <cmd>
	cmd(CMD_SWAP);
    2ae6:	61 e0       	ldi	r22, 0x01	; 1
    2ae8:	7f ef       	ldi	r23, 0xFF	; 255
    2aea:	8f ef       	ldi	r24, 0xFF	; 255
    2aec:	9f ef       	ldi	r25, 0xFF	; 255
	
}
    2aee:	1f 91       	pop	r17
    2af0:	0f 91       	pop	r16
    2af2:	ff 90       	pop	r15
    2af4:	ef 90       	pop	r14
    2af6:	df 90       	pop	r13
    2af8:	cf 90       	pop	r12
	wdt_reset(); // WATCH DOG TIMER RESET
	//**************************************************
	
	_delay_ms(20); //this delay is necessary to maintain a maximum refresh rate, otherwise the screen may tear and glitch out if writing to screen too often
	cmd(DISPLAY()); // display the image
	cmd(CMD_SWAP);
    2afa:	0c 94 01 03 	jmp	0x602	; 0x602 <cmd>

00002afe <INA_Write>:
#include <avr/wdt.h>

#define TRUE 1

void INA_Write(TWI_Master_t *twi, uint8_t register_addr, uint8_t data_byte_1, uint8_t data_byte_2, uint8_t ina226_addr)
{
    2afe:	ef 92       	push	r14
    2b00:	ff 92       	push	r15
    2b02:	0f 93       	push	r16
    2b04:	cf 93       	push	r28
    2b06:	df 93       	push	r29
    2b08:	cd b7       	in	r28, 0x3d	; 61
    2b0a:	de b7       	in	r29, 0x3e	; 62
    2b0c:	28 97       	sbiw	r28, 0x08	; 8
    2b0e:	cd bf       	out	0x3d, r28	; 61
    2b10:	de bf       	out	0x3e, r29	; 62
    2b12:	7c 01       	movw	r14, r24
	char message[8];
	message[0] = register_addr;
    2b14:	69 83       	std	Y+1, r22	; 0x01
	message[1] = data_byte_1; // MSB
    2b16:	4a 83       	std	Y+2, r20	; 0x02
	message[2] = data_byte_2; // LSB
    2b18:	2b 83       	std	Y+3, r18	; 0x03
	TWI_MasterWrite(twi, ina226_addr, (uint8_t *) message, 3);
    2b1a:	23 e0       	ldi	r18, 0x03	; 3
    2b1c:	ae 01       	movw	r20, r28
    2b1e:	4f 5f       	subi	r20, 0xFF	; 255
    2b20:	5f 4f       	sbci	r21, 0xFF	; 255
    2b22:	60 2f       	mov	r22, r16
    2b24:	0e 94 62 33 	call	0x66c4	; 0x66c4 <TWI_MasterWrite>
    2b28:	2f e7       	ldi	r18, 0x7F	; 127
    2b2a:	88 e3       	ldi	r24, 0x38	; 56
    2b2c:	91 e0       	ldi	r25, 0x01	; 1
    2b2e:	21 50       	subi	r18, 0x01	; 1
    2b30:	80 40       	sbci	r24, 0x00	; 0
    2b32:	90 40       	sbci	r25, 0x00	; 0
    2b34:	e1 f7       	brne	.-8      	; 0x2b2e <INA_Write+0x30>
    2b36:	00 c0       	rjmp	.+0      	; 0x2b38 <INA_Write+0x3a>
    2b38:	00 00       	nop
    2b3a:	80 91 0e 25 	lds	r24, 0x250E	; 0x80250e <counters+0x2a>
    2b3e:	90 91 0f 25 	lds	r25, 0x250F	; 0x80250f <counters+0x2b>
	
	_delay_ms(20);

	while(twi->status != TWIM_STATUS_READY)
    2b42:	f7 01       	movw	r30, r14
    2b44:	21 ad       	ldd	r18, Z+57	; 0x39
    2b46:	22 23       	and	r18, r18
    2b48:	19 f0       	breq	.+6      	; 0x2b50 <INA_Write+0x52>
	{
		if (counters.i2c_error_counter > 20)
    2b4a:	85 31       	cpi	r24, 0x15	; 21
    2b4c:	91 05       	cpc	r25, r1
    2b4e:	b8 f0       	brcs	.+46     	; 0x2b7e <INA_Write+0x80>
    2b50:	80 93 0e 25 	sts	0x250E, r24	; 0x80250e <counters+0x2a>
    2b54:	90 93 0f 25 	sts	0x250F, r25	; 0x80250f <counters+0x2b>
    2b58:	e7 ea       	ldi	r30, 0xA7	; 167
    2b5a:	f1 e6       	ldi	r31, 0x61	; 97
    2b5c:	31 97       	sbiw	r30, 0x01	; 1
    2b5e:	f1 f7       	brne	.-4      	; 0x2b5c <INA_Write+0x5e>
    2b60:	00 c0       	rjmp	.+0      	; 0x2b62 <INA_Write+0x64>
    2b62:	00 00       	nop
		counters.i2c_error_counter++;
	}
	
	_delay_ms(5);
	
	counters.i2c_error_counter = 0;
    2b64:	10 92 0e 25 	sts	0x250E, r1	; 0x80250e <counters+0x2a>
    2b68:	10 92 0f 25 	sts	0x250F, r1	; 0x80250f <counters+0x2b>
}
    2b6c:	28 96       	adiw	r28, 0x08	; 8
    2b6e:	cd bf       	out	0x3d, r28	; 61
    2b70:	de bf       	out	0x3e, r29	; 62
    2b72:	df 91       	pop	r29
    2b74:	cf 91       	pop	r28
    2b76:	0f 91       	pop	r16
    2b78:	ff 90       	pop	r15
    2b7a:	ef 90       	pop	r14
    2b7c:	08 95       	ret
	{
		if (counters.i2c_error_counter > 20)
		{
			break;
		}
		counters.i2c_error_counter++;
    2b7e:	01 96       	adiw	r24, 0x01	; 1
    2b80:	e0 cf       	rjmp	.-64     	; 0x2b42 <INA_Write+0x44>

00002b82 <INA_Read_Long>:
	
	return twi->readData;
}

register8_t * INA_Read_Long(TWI_Master_t *twi, uint8_t register_addr, uint8_t ina226_addr)
{
    2b82:	ef 92       	push	r14
    2b84:	ff 92       	push	r15
    2b86:	0f 93       	push	r16
    2b88:	cf 93       	push	r28
    2b8a:	df 93       	push	r29
    2b8c:	cd b7       	in	r28, 0x3d	; 61
    2b8e:	de b7       	in	r29, 0x3e	; 62
    2b90:	28 97       	sbiw	r28, 0x08	; 8
    2b92:	cd bf       	out	0x3d, r28	; 61
    2b94:	de bf       	out	0x3e, r29	; 62
    2b96:	7c 01       	movw	r14, r24
    2b98:	84 2f       	mov	r24, r20
	char message[8];
	message[0] = register_addr;
    2b9a:	69 83       	std	Y+1, r22	; 0x01
	TWI_MasterWriteRead(twi, ina226_addr, (uint8_t *) message, 1, 2);
    2b9c:	02 e0       	ldi	r16, 0x02	; 2
    2b9e:	21 e0       	ldi	r18, 0x01	; 1
    2ba0:	ae 01       	movw	r20, r28
    2ba2:	4f 5f       	subi	r20, 0xFF	; 255
    2ba4:	5f 4f       	sbci	r21, 0xFF	; 255
    2ba6:	68 2f       	mov	r22, r24
    2ba8:	c7 01       	movw	r24, r14
    2baa:	0e 94 1f 33 	call	0x663e	; 0x663e <TWI_MasterWriteRead>
    2bae:	2f e7       	ldi	r18, 0x7F	; 127
    2bb0:	88 e3       	ldi	r24, 0x38	; 56
    2bb2:	91 e0       	ldi	r25, 0x01	; 1
    2bb4:	21 50       	subi	r18, 0x01	; 1
    2bb6:	80 40       	sbci	r24, 0x00	; 0
    2bb8:	90 40       	sbci	r25, 0x00	; 0
    2bba:	e1 f7       	brne	.-8      	; 0x2bb4 <INA_Read_Long+0x32>
    2bbc:	00 c0       	rjmp	.+0      	; 0x2bbe <INA_Read_Long+0x3c>
    2bbe:	00 00       	nop
    2bc0:	80 91 0e 25 	lds	r24, 0x250E	; 0x80250e <counters+0x2a>
    2bc4:	90 91 0f 25 	lds	r25, 0x250F	; 0x80250f <counters+0x2b>
	
	_delay_ms(20);

	while(twi->status != TWIM_STATUS_READY)
    2bc8:	f7 01       	movw	r30, r14
    2bca:	21 ad       	ldd	r18, Z+57	; 0x39
    2bcc:	22 23       	and	r18, r18
    2bce:	19 f0       	breq	.+6      	; 0x2bd6 <INA_Read_Long+0x54>
	{
		if (counters.i2c_error_counter > 20)
    2bd0:	85 31       	cpi	r24, 0x15	; 21
    2bd2:	91 05       	cpc	r25, r1
    2bd4:	c8 f0       	brcs	.+50     	; 0x2c08 <INA_Read_Long+0x86>
    2bd6:	80 93 0e 25 	sts	0x250E, r24	; 0x80250e <counters+0x2a>
    2bda:	90 93 0f 25 	sts	0x250F, r25	; 0x80250f <counters+0x2b>
    2bde:	e7 ea       	ldi	r30, 0xA7	; 167
    2be0:	f1 e6       	ldi	r31, 0x61	; 97
    2be2:	31 97       	sbiw	r30, 0x01	; 1
    2be4:	f1 f7       	brne	.-4      	; 0x2be2 <INA_Read_Long+0x60>
    2be6:	00 c0       	rjmp	.+0      	; 0x2be8 <INA_Read_Long+0x66>
    2be8:	00 00       	nop
		counters.i2c_error_counter++;
	}
	
	_delay_ms(5);
	
	counters.i2c_error_counter = 0;
    2bea:	10 92 0e 25 	sts	0x250E, r1	; 0x80250e <counters+0x2a>
    2bee:	10 92 0f 25 	sts	0x250F, r1	; 0x80250f <counters+0x2b>
	
	return twi->readData;
    2bf2:	c7 01       	movw	r24, r14
    2bf4:	4c 96       	adiw	r24, 0x1c	; 28
}
    2bf6:	28 96       	adiw	r28, 0x08	; 8
    2bf8:	cd bf       	out	0x3d, r28	; 61
    2bfa:	de bf       	out	0x3e, r29	; 62
    2bfc:	df 91       	pop	r29
    2bfe:	cf 91       	pop	r28
    2c00:	0f 91       	pop	r16
    2c02:	ff 90       	pop	r15
    2c04:	ef 90       	pop	r14
    2c06:	08 95       	ret
	{
		if (counters.i2c_error_counter > 20)
		{
			break;
		}
		counters.i2c_error_counter++;
    2c08:	01 96       	adiw	r24, 0x01	; 1
    2c0a:	de cf       	rjmp	.-68     	; 0x2bc8 <INA_Read_Long+0x46>

00002c0c <low_INA_averaging>:
	
	_delay_ms(20);
}

void low_INA_averaging(TWI_Master_t *twi, uint8_t ina226_addr)
{
    2c0c:	0f 93       	push	r16
	//INA_Write(twi, 0x00, 0x48, 0x07, ina226_addr);
	//If no communication for too long then do long delay to triger a watch dog counter
	INA_Write(twi, 0x00, 0x45, 0xFF, ina226_addr);
    2c0e:	06 2f       	mov	r16, r22
    2c10:	2f ef       	ldi	r18, 0xFF	; 255
    2c12:	45 e4       	ldi	r20, 0x45	; 69
    2c14:	60 e0       	ldi	r22, 0x00	; 0
    2c16:	0e 94 7f 15 	call	0x2afe	; 0x2afe <INA_Write>
    2c1a:	2f e7       	ldi	r18, 0x7F	; 127
    2c1c:	88 e3       	ldi	r24, 0x38	; 56
    2c1e:	91 e0       	ldi	r25, 0x01	; 1
    2c20:	21 50       	subi	r18, 0x01	; 1
    2c22:	80 40       	sbci	r24, 0x00	; 0
    2c24:	90 40       	sbci	r25, 0x00	; 0
    2c26:	e1 f7       	brne	.-8      	; 0x2c20 <low_INA_averaging+0x14>
    2c28:	00 c0       	rjmp	.+0      	; 0x2c2a <low_INA_averaging+0x1e>
    2c2a:	00 00       	nop
	
	_delay_ms(20);
}
    2c2c:	0f 91       	pop	r16
    2c2e:	08 95       	ret

00002c30 <high_INA_averaging>:
    2c30:	0c 94 06 16 	jmp	0x2c0c	; 0x2c0c <low_INA_averaging>

00002c34 <get_voltage>:

uint16_t get_voltage(TWI_Master_t *twi, bool averaged, uint8_t ina226_addr)
{
    2c34:	cf 93       	push	r28
    2c36:	df 93       	push	r29
	register8_t* read_val;
	if(averaged)
	{
		read_val = INA_Read_Long(twi, 0x02, ina226_addr);
    2c38:	62 e0       	ldi	r22, 0x02	; 2
    2c3a:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <INA_Read_Long>
    2c3e:	ec 01       	movw	r28, r24
    2c40:	2f e7       	ldi	r18, 0x7F	; 127
    2c42:	88 e3       	ldi	r24, 0x38	; 56
    2c44:	91 e0       	ldi	r25, 0x01	; 1
    2c46:	21 50       	subi	r18, 0x01	; 1
    2c48:	80 40       	sbci	r24, 0x00	; 0
    2c4a:	90 40       	sbci	r25, 0x00	; 0
    2c4c:	e1 f7       	brne	.-8      	; 0x2c46 <get_voltage+0x12>
    2c4e:	00 c0       	rjmp	.+0      	; 0x2c50 <get_voltage+0x1c>
    2c50:	00 00       	nop
	else
	{
		read_val = INA_Read_Short(twi, 0x02, ina226_addr);
	}
	_delay_ms(20);
	int voltage_bits = ((read_val[0] << 8) + (read_val[1]));
    2c52:	68 81       	ld	r22, Y
    2c54:	89 81       	ldd	r24, Y+1	; 0x01
	float voltage = voltage_bits * 0.00125 * 2.00; //; // 1.25 mV/bit
	int voltage_int = voltage * 100;
    2c56:	70 e0       	ldi	r23, 0x00	; 0
    2c58:	76 2f       	mov	r23, r22
    2c5a:	66 27       	eor	r22, r22
    2c5c:	68 0f       	add	r22, r24
    2c5e:	71 1d       	adc	r23, r1
    2c60:	07 2e       	mov	r0, r23
    2c62:	00 0c       	add	r0, r0
    2c64:	88 0b       	sbc	r24, r24
    2c66:	99 0b       	sbc	r25, r25
    2c68:	0e 94 e6 35 	call	0x6bcc	; 0x6bcc <__floatsisf>
    2c6c:	2a e0       	ldi	r18, 0x0A	; 10
    2c6e:	37 ed       	ldi	r19, 0xD7	; 215
    2c70:	43 ea       	ldi	r20, 0xA3	; 163
    2c72:	5a e3       	ldi	r21, 0x3A	; 58
    2c74:	0e 94 f3 36 	call	0x6de6	; 0x6de6 <__mulsf3>
    2c78:	9b 01       	movw	r18, r22
    2c7a:	ac 01       	movw	r20, r24
    2c7c:	0e 94 cb 34 	call	0x6996	; 0x6996 <__addsf3>
    2c80:	20 e0       	ldi	r18, 0x00	; 0
    2c82:	30 e0       	ldi	r19, 0x00	; 0
    2c84:	48 ec       	ldi	r20, 0xC8	; 200
    2c86:	52 e4       	ldi	r21, 0x42	; 66
    2c88:	0e 94 f3 36 	call	0x6de6	; 0x6de6 <__mulsf3>
    2c8c:	0e 94 ae 35 	call	0x6b5c	; 0x6b5c <__fixsfsi>
    2c90:	cb 01       	movw	r24, r22
	
	if(voltage_int > 8000 || voltage_int < 0)//if negative or thinks greater than 80V
    2c92:	61 34       	cpi	r22, 0x41	; 65
    2c94:	7f 41       	sbci	r23, 0x1F	; 31
    2c96:	10 f0       	brcs	.+4      	; 0x2c9c <get_voltage+0x68>
	{ 
		voltage_int = 0;
    2c98:	80 e0       	ldi	r24, 0x00	; 0
    2c9a:	90 e0       	ldi	r25, 0x00	; 0
	}
	
	if (read_val == 0xFFFFFFFF)
    2c9c:	21 96       	adiw	r28, 0x01	; 1
    2c9e:	11 f4       	brne	.+4      	; 0x2ca4 <get_voltage+0x70>
	{
		voltage_int = -1;
    2ca0:	8f ef       	ldi	r24, 0xFF	; 255
    2ca2:	9f ef       	ldi	r25, 0xFF	; 255
	}
		
	return voltage_int;
}
    2ca4:	df 91       	pop	r29
    2ca6:	cf 91       	pop	r28
    2ca8:	08 95       	ret

00002caa <get_current>:

uint16_t get_current(TWI_Master_t *twi, bool averaged, uint8_t ina226_addr)
{
    2caa:	0f 93       	push	r16
    2cac:	1f 93       	push	r17
    2cae:	cf 93       	push	r28
    2cb0:	df 93       	push	r29
    2cb2:	00 d0       	rcall	.+0      	; 0x2cb4 <get_current+0xa>
    2cb4:	cd b7       	in	r28, 0x3d	; 61
    2cb6:	de b7       	in	r29, 0x3e	; 62
	register8_t* read_val;
	if(averaged)
	{
		read_val = INA_Read_Long(twi, 0x01, ina226_addr);
    2cb8:	61 e0       	ldi	r22, 0x01	; 1
    2cba:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <INA_Read_Long>
    2cbe:	8c 01       	movw	r16, r24
    2cc0:	2f e7       	ldi	r18, 0x7F	; 127
    2cc2:	88 e3       	ldi	r24, 0x38	; 56
    2cc4:	91 e0       	ldi	r25, 0x01	; 1
    2cc6:	21 50       	subi	r18, 0x01	; 1
    2cc8:	80 40       	sbci	r24, 0x00	; 0
    2cca:	90 40       	sbci	r25, 0x00	; 0
    2ccc:	e1 f7       	brne	.-8      	; 0x2cc6 <get_current+0x1c>
    2cce:	00 c0       	rjmp	.+0      	; 0x2cd0 <get_current+0x26>
    2cd0:	00 00       	nop
	else
	{
		read_val = INA_Read_Short(twi, 0x01, ina226_addr);
	}
	_delay_ms(20);
	int shunt_voltage_bits = ((read_val[0] << 8) + (read_val[1]));
    2cd2:	f8 01       	movw	r30, r16
    2cd4:	60 81       	ld	r22, Z
    2cd6:	81 81       	ldd	r24, Z+1	; 0x01
	float current = shunt_voltage_bits * 0.0000025 / 0.002; // * 2.5 uV / 2 milli Ohm
	int volatile current_int = current * 100;
    2cd8:	70 e0       	ldi	r23, 0x00	; 0
    2cda:	76 2f       	mov	r23, r22
    2cdc:	66 27       	eor	r22, r22
    2cde:	68 0f       	add	r22, r24
    2ce0:	71 1d       	adc	r23, r1
    2ce2:	07 2e       	mov	r0, r23
    2ce4:	00 0c       	add	r0, r0
    2ce6:	88 0b       	sbc	r24, r24
    2ce8:	99 0b       	sbc	r25, r25
    2cea:	0e 94 e6 35 	call	0x6bcc	; 0x6bcc <__floatsisf>
    2cee:	2c ea       	ldi	r18, 0xAC	; 172
    2cf0:	35 ec       	ldi	r19, 0xC5	; 197
    2cf2:	47 e2       	ldi	r20, 0x27	; 39
    2cf4:	56 e3       	ldi	r21, 0x36	; 54
    2cf6:	0e 94 f3 36 	call	0x6de6	; 0x6de6 <__mulsf3>
    2cfa:	2f e6       	ldi	r18, 0x6F	; 111
    2cfc:	32 e1       	ldi	r19, 0x12	; 18
    2cfe:	43 e0       	ldi	r20, 0x03	; 3
    2d00:	5b e3       	ldi	r21, 0x3B	; 59
    2d02:	0e 94 3c 35 	call	0x6a78	; 0x6a78 <__divsf3>
    2d06:	20 e0       	ldi	r18, 0x00	; 0
    2d08:	30 e0       	ldi	r19, 0x00	; 0
    2d0a:	48 ec       	ldi	r20, 0xC8	; 200
    2d0c:	52 e4       	ldi	r21, 0x42	; 66
    2d0e:	0e 94 f3 36 	call	0x6de6	; 0x6de6 <__mulsf3>
    2d12:	0e 94 ae 35 	call	0x6b5c	; 0x6b5c <__fixsfsi>
    2d16:	69 83       	std	Y+1, r22	; 0x01
    2d18:	7a 83       	std	Y+2, r23	; 0x02
	
	if(current_int > 8000 || current_int < 0)//if negative or thinks greater than 80A
    2d1a:	89 81       	ldd	r24, Y+1	; 0x01
    2d1c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d1e:	81 34       	cpi	r24, 0x41	; 65
    2d20:	9f 41       	sbci	r25, 0x1F	; 31
    2d22:	24 f4       	brge	.+8      	; 0x2d2c <get_current+0x82>
    2d24:	89 81       	ldd	r24, Y+1	; 0x01
    2d26:	9a 81       	ldd	r25, Y+2	; 0x02
    2d28:	97 ff       	sbrs	r25, 7
    2d2a:	02 c0       	rjmp	.+4      	; 0x2d30 <get_current+0x86>
	{ 
		current_int = 0;
    2d2c:	19 82       	std	Y+1, r1	; 0x01
    2d2e:	1a 82       	std	Y+2, r1	; 0x02
	}

	if (read_val == 0xFFFFFFFF)
    2d30:	0f 3f       	cpi	r16, 0xFF	; 255
    2d32:	2f ef       	ldi	r18, 0xFF	; 255
    2d34:	12 07       	cpc	r17, r18
    2d36:	11 f4       	brne	.+4      	; 0x2d3c <get_current+0x92>
	{
		current_int = -1;
    2d38:	09 83       	std	Y+1, r16	; 0x01
    2d3a:	1a 83       	std	Y+2, r17	; 0x02
	}
	
	return current_int;
    2d3c:	89 81       	ldd	r24, Y+1	; 0x01
    2d3e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2d40:	0f 90       	pop	r0
    2d42:	0f 90       	pop	r0
    2d44:	df 91       	pop	r29
    2d46:	cf 91       	pop	r28
    2d48:	1f 91       	pop	r17
    2d4a:	0f 91       	pop	r16
    2d4c:	08 95       	ret

00002d4e <init_ports_out_low>:
Initializes all ports to output/low. This is needed for safety
*/
void init_ports_out_low()
{
	//PORTA_DIR = (unsigned char)0x11111110; PORTA_OUT = (unsigned char)0x00110000;
	PORTB_DIR = (unsigned char)0x11111111; PORTB_OUT = (unsigned char)0x00000000;
    2d4e:	81 e1       	ldi	r24, 0x11	; 17
    2d50:	80 93 20 06 	sts	0x0620, r24	; 0x800620 <__TEXT_REGION_LENGTH__+0x700620>
    2d54:	10 92 24 06 	sts	0x0624, r1	; 0x800624 <__TEXT_REGION_LENGTH__+0x700624>
	PORTC_DIR = (unsigned char)0x11111111; PORTC_OUT = (unsigned char)0x00000000;
    2d58:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
    2d5c:	10 92 44 06 	sts	0x0644, r1	; 0x800644 <__TEXT_REGION_LENGTH__+0x700644>
	PORTD_DIR = (unsigned char)0x11101101; PORTD_OUT = (unsigned char)0x00000000;
    2d60:	91 e0       	ldi	r25, 0x01	; 1
    2d62:	90 93 60 06 	sts	0x0660, r25	; 0x800660 <__TEXT_REGION_LENGTH__+0x700660>
    2d66:	10 92 64 06 	sts	0x0664, r1	; 0x800664 <__TEXT_REGION_LENGTH__+0x700664>
	PORTE_DIR = (unsigned char)0x11111111; PORTE_OUT = (unsigned char)0x00000000;
    2d6a:	80 93 80 06 	sts	0x0680, r24	; 0x800680 <__TEXT_REGION_LENGTH__+0x700680>
    2d6e:	10 92 84 06 	sts	0x0684, r1	; 0x800684 <__TEXT_REGION_LENGTH__+0x700684>
	PORTR_DIR = (unsigned char)0x11111111; PORTR_OUT = (unsigned char)0x00000000;
    2d72:	80 93 e0 07 	sts	0x07E0, r24	; 0x8007e0 <__TEXT_REGION_LENGTH__+0x7007e0>
    2d76:	10 92 e4 07 	sts	0x07E4, r1	; 0x8007e4 <__TEXT_REGION_LENGTH__+0x7007e4>
    2d7a:	08 95       	ret

00002d7c <initialize>:

/*
Initializes clock, pins, and various peripherals for an ATxmegaA4U
*/
void initialize(void)
{
    2d7c:	1f 93       	push	r17
    2d7e:	cf 93       	push	r28
    2d80:	df 93       	push	r29
	init_ports_out_low();
    2d82:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <init_ports_out_low>
	//Clock initialization
	OSC_CTRL |= OSC_RC32MEN_bm; //enable 32MHz Internal Oscillator
    2d86:	e0 e5       	ldi	r30, 0x50	; 80
    2d88:	f0 e0       	ldi	r31, 0x00	; 0
    2d8a:	80 81       	ld	r24, Z
    2d8c:	82 60       	ori	r24, 0x02	; 2
    2d8e:	80 83       	st	Z, r24
    2d90:	87 e8       	ldi	r24, 0x87	; 135
    2d92:	93 e1       	ldi	r25, 0x13	; 19
    2d94:	01 97       	sbiw	r24, 0x01	; 1
    2d96:	f1 f7       	brne	.-4      	; 0x2d94 <initialize+0x18>
    2d98:	00 c0       	rjmp	.+0      	; 0x2d9a <initialize+0x1e>
    2d9a:	00 00       	nop
	_delay_ms(1); //time needed for 32MHz to stabilize
	CCP = CCP_IOREG_gc; // allow change to protected IO registers
    2d9c:	88 ed       	ldi	r24, 0xD8	; 216
    2d9e:	84 bf       	out	0x34, r24	; 52
	CLK_CTRL = CLK_SCLKSEL_RC32M_gc; //select 32MHz internal oscillator
    2da0:	11 e0       	ldi	r17, 0x01	; 1
    2da2:	10 93 40 00 	sts	0x0040, r17	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
	
	//Port A initialization
	PORTA_PIN1CTRL = PORT_OPC_PULLUP_gc; PORTA_PIN2CTRL = PORT_OPC_PULLUP_gc; PORTA_PIN3CTRL = PORT_OPC_PULLUP_gc; //pullups on encdr-A, encdr-B and encdr-SW
    2da6:	21 e1       	ldi	r18, 0x11	; 17
    2da8:	36 e0       	ldi	r19, 0x06	; 6
    2daa:	88 e1       	ldi	r24, 0x18	; 24
    2dac:	e9 01       	movw	r28, r18
    2dae:	88 83       	st	Y, r24
    2db0:	a2 e1       	ldi	r26, 0x12	; 18
    2db2:	b6 e0       	ldi	r27, 0x06	; 6
    2db4:	8c 93       	st	X, r24
    2db6:	e3 e1       	ldi	r30, 0x13	; 19
    2db8:	f6 e0       	ldi	r31, 0x06	; 6
    2dba:	80 83       	st	Z, r24
	PORTA_PIN1CTRL |= PORT_ISC_BOTHEDGES_gc; PORTA_PIN2CTRL |= PORT_ISC_BOTHEDGES_gc; //both edges interrupts on encdr-A and encdr-B
    2dbc:	98 81       	ld	r25, Y
    2dbe:	98 83       	st	Y, r25
    2dc0:	9c 91       	ld	r25, X
    2dc2:	9c 93       	st	X, r25
	PORTA_PIN3CTRL |= PORT_ISC_FALLING_gc; //falling edge interrupt on encdr-SW
    2dc4:	90 81       	ld	r25, Z
    2dc6:	92 60       	ori	r25, 0x02	; 2
    2dc8:	90 83       	st	Z, r25
	PORTA_INT0MASK = (0x7 << 1); //enables interrupts on encdr-A,encdr-B,encdr-SW
    2dca:	9e e0       	ldi	r25, 0x0E	; 14
    2dcc:	90 93 0a 06 	sts	0x060A, r25	; 0x80060a <__TEXT_REGION_LENGTH__+0x70060a>
	PORTA_INTCTRL = PORT_INT0LVL_LO_gc; //enable port A interrupts
    2dd0:	10 93 09 06 	sts	0x0609, r17	; 0x800609 <__TEXT_REGION_LENGTH__+0x700609>
	
	PORTA_DIRSET = (1 << GRN_LED); //set grn led to output
    2dd4:	e1 e0       	ldi	r30, 0x01	; 1
    2dd6:	f6 e0       	ldi	r31, 0x06	; 6
    2dd8:	d0 e2       	ldi	r29, 0x20	; 32
    2dda:	d0 83       	st	Z, r29
	PORTA_DIRSET = (1 << RED_LED); //set red led to output
    2ddc:	90 e1       	ldi	r25, 0x10	; 16
    2dde:	90 83       	st	Z, r25
	GRN_LED_OFF;
    2de0:	e5 e0       	ldi	r30, 0x05	; 5
    2de2:	f6 e0       	ldi	r31, 0x06	; 6
    2de4:	d0 83       	st	Z, r29
	RED_LED_OFF;
    2de6:	90 83       	st	Z, r25
	
	//Port B initialization
	
	
	//Port C initialization
	PORTC_DIRSET = (1 << SCL_C); PORTC_OUTSET = (1 << SCL_C); //output/high on SCL
    2de8:	92 e0       	ldi	r25, 0x02	; 2
    2dea:	90 93 41 06 	sts	0x0641, r25	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
    2dee:	90 93 45 06 	sts	0x0645, r25	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
	PORTC_PIN0CTRL = PORT_OPC_PULLUP_gc; //pullup on SDA
    2df2:	80 93 50 06 	sts	0x0650, r24	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
	
	//Port D initialization
	
	//Port E initialization
	PORTE_DIRSET = (1 << SCL_E); PORTE_OUTSET = (1 << SCL_E); //output/high on SCL
    2df6:	90 93 81 06 	sts	0x0681, r25	; 0x800681 <__TEXT_REGION_LENGTH__+0x700681>
    2dfa:	90 93 85 06 	sts	0x0685, r25	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
	PORTE_PIN0CTRL = PORT_OPC_PULLUP_gc; //pullup on SDA
    2dfe:	80 93 90 06 	sts	0x0690, r24	; 0x800690 <__TEXT_REGION_LENGTH__+0x700690>
	
	//Port R initialization
	
	//SPI initialization
	PORTD_DIRSET = (1 << SS_D) | (1 << MOSI_D) | (1 << SCK_D); //output on SS, MOSI, and SCK
    2e02:	80 eb       	ldi	r24, 0xB0	; 176
    2e04:	80 93 61 06 	sts	0x0661, r24	; 0x800661 <__TEXT_REGION_LENGTH__+0x700661>
	SPID_CTRL = (1 << SPI_ENABLE_bp) | (1 << SPI_MASTER_bp); //enable SPI, Master, set clock rate fck/4 (8 MHz), MSB first
    2e08:	80 e5       	ldi	r24, 0x50	; 80
    2e0a:	80 93 c0 09 	sts	0x09C0, r24	; 0x8009c0 <__TEXT_REGION_LENGTH__+0x7009c0>
	
	
	//I2C initialization
	PMIC_CTRL = PMIC_LOLVLEN_bm; //enable low-lvl interrupts
    2e0e:	10 93 a2 00 	sts	0x00A2, r17	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	TWI_MasterInit(&twiMaster, &TWIC, TWI_MASTER_INTLVL_LO_gc, TWI_BAUDSETTING);
    2e12:	2f e5       	ldi	r18, 0x5F	; 95
    2e14:	40 e4       	ldi	r20, 0x40	; 64
    2e16:	60 e8       	ldi	r22, 0x80	; 128
    2e18:	74 e0       	ldi	r23, 0x04	; 4
    2e1a:	88 e6       	ldi	r24, 0x68	; 104
    2e1c:	94 e2       	ldi	r25, 0x24	; 36
    2e1e:	0e 94 0a 33 	call	0x6614	; 0x6614 <TWI_MasterInit>
	
	//I2C initialization for external EEPROM
	TWI_MasterInit(&twiMasterForEEPROM, &TWIE, TWI_MASTER_INTLVL_LO_gc, TWI_BAUDSETTING);
    2e22:	2f e5       	ldi	r18, 0x5F	; 95
    2e24:	40 e4       	ldi	r20, 0x40	; 64
    2e26:	60 ea       	ldi	r22, 0xA0	; 160
    2e28:	74 e0       	ldi	r23, 0x04	; 4
    2e2a:	84 e5       	ldi	r24, 0x54	; 84
    2e2c:	95 e2       	ldi	r25, 0x25	; 37
    2e2e:	0e 94 0a 33 	call	0x6614	; 0x6614 <TWI_MasterInit>
	
	//RTC initialization
	CLK_RTCCTRL = (CLK_RTCSRC_RCOSC32_gc | CLK_RTCEN_bm); //choose 32kHz clock and enable RTC clock
    2e32:	8d e0       	ldi	r24, 0x0D	; 13
    2e34:	80 93 43 00 	sts	0x0043, r24	; 0x800043 <__TEXT_REGION_LENGTH__+0x700043>
	RTC_PER = 33;
    2e38:	81 e2       	ldi	r24, 0x21	; 33
    2e3a:	90 e0       	ldi	r25, 0x00	; 0
    2e3c:	80 93 0a 04 	sts	0x040A, r24	; 0x80040a <__TEXT_REGION_LENGTH__+0x70040a>
    2e40:	90 93 0b 04 	sts	0x040B, r25	; 0x80040b <__TEXT_REGION_LENGTH__+0x70040b>
	RTC_INTCTRL = (1 << 0); //enable overflow interrupt
    2e44:	10 93 02 04 	sts	0x0402, r17	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
	RTC_CTRL = 1; //no prescaling
    2e48:	10 93 00 04 	sts	0x0400, r17	; 0x800400 <__TEXT_REGION_LENGTH__+0x700400>
	
	
	
	//ADC initialization
	ADCA_REFCTRL = ADC_REFSEL_AREFA_gc; //select AREFA as reference
    2e4c:	d0 93 02 02 	sts	0x0202, r29	; 0x800202 <__TEXT_REGION_LENGTH__+0x700202>
	ADCA_CH0_CTRL = ADC_CH_START_bm | ADC_CH_INPUTMODE0_bm;
    2e50:	81 e8       	ldi	r24, 0x81	; 129
    2e52:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <__TEXT_REGION_LENGTH__+0x700220>
	ADCA_CH0_MUXCTRL = ADC_CH_MUXPOS_PIN6_gc; //choose PA6 as ADC input
    2e56:	80 e3       	ldi	r24, 0x30	; 48
    2e58:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <__TEXT_REGION_LENGTH__+0x700221>
	ADCA_CTRLA = ADC_ENABLE_bm; //enable ADC
    2e5c:	10 93 00 02 	sts	0x0200, r17	; 0x800200 <__TEXT_REGION_LENGTH__+0x700200>
}
    2e60:	df 91       	pop	r29
    2e62:	cf 91       	pop	r28
    2e64:	1f 91       	pop	r17
    2e66:	08 95       	ret

00002e68 <figure_out_which_program>:
	//first_voltage = get_voltage(&twiMaster, FALSE, OUTPUT1_INA226_ADDR);
	//second_voltage = get_voltage(&twiMaster, FALSE, OUTPUT2_INA226_ADDR);
	//
	//++iteration_count;
	//}
	output_one.max_current = 2500;
    2e68:	e3 ea       	ldi	r30, 0xA3	; 163
    2e6a:	f4 e2       	ldi	r31, 0x24	; 36
    2e6c:	24 ec       	ldi	r18, 0xC4	; 196
    2e6e:	39 e0       	ldi	r19, 0x09	; 9
    2e70:	22 8b       	std	Z+18, r18	; 0x12
    2e72:	33 8b       	std	Z+19, r19	; 0x13
	output_one.max_voltage = 5000;
    2e74:	88 e8       	ldi	r24, 0x88	; 136
    2e76:	93 e1       	ldi	r25, 0x13	; 19
    2e78:	84 8b       	std	Z+20, r24	; 0x14
    2e7a:	95 8b       	std	Z+21, r25	; 0x15
	output_one.ina226_addr = OUTPUT1_INA226_ADDR; // 0x45 - THIRTY_EIGHT, 0x41 - FOURTY_ONE and new THIRY_EIGHT
    2e7c:	41 e4       	ldi	r20, 0x41	; 65
    2e7e:	44 af       	std	Z+60, r20	; 0x3c
	output_two.max_current = 2500;
    2e80:	e1 e2       	ldi	r30, 0x21	; 33
    2e82:	f4 e2       	ldi	r31, 0x24	; 36
    2e84:	22 8b       	std	Z+18, r18	; 0x12
    2e86:	33 8b       	std	Z+19, r19	; 0x13
	output_two.max_voltage = 5000;
    2e88:	84 8b       	std	Z+20, r24	; 0x14
    2e8a:	95 8b       	std	Z+21, r25	; 0x15
	output_two.ina226_addr = OUTPUT2_INA226_ADDR;
    2e8c:	80 e4       	ldi	r24, 0x40	; 64
    2e8e:	84 af       	std	Z+60, r24	; 0x3c
	return FOURTY_ONE;
}
    2e90:	81 e0       	ldi	r24, 0x01	; 1
    2e92:	08 95       	ret

00002e94 <initialize_variables>:

void initialize_variables()
{
    2e94:	8f 92       	push	r8
    2e96:	9f 92       	push	r9
    2e98:	af 92       	push	r10
    2e9a:	bf 92       	push	r11
    2e9c:	cf 92       	push	r12
    2e9e:	df 92       	push	r13
    2ea0:	ef 92       	push	r14
    2ea2:	ff 92       	push	r15
    2ea4:	cf 93       	push	r28
    2ea6:	df 93       	push	r29
	program_state.program = figure_out_which_program();
    2ea8:	0e 94 34 17 	call	0x2e68	; 0x2e68 <figure_out_which_program>
    2eac:	80 93 e8 23 	sts	0x23E8, r24	; 0x8023e8 <program_state+0x4>
	program_state.mode = STARTUP_MODE;
    2eb0:	82 e0       	ldi	r24, 0x02	; 2
    2eb2:	80 93 e7 23 	sts	0x23E7, r24	; 0x8023e7 <program_state+0x3>
	program_state.pson_low = TRUE;
    2eb6:	91 e0       	ldi	r25, 0x01	; 1
    2eb8:	90 93 e9 23 	sts	0x23E9, r25	; 0x8023e9 <program_state+0x5>
	program_state.output = &output_two;
    2ebc:	21 e2       	ldi	r18, 0x21	; 33
    2ebe:	34 e2       	ldi	r19, 0x24	; 36
    2ec0:	20 93 17 24 	sts	0x2417, r18	; 0x802417 <program_state+0x33>
    2ec4:	30 93 18 24 	sts	0x2418, r19	; 0x802418 <program_state+0x34>
	program_state.comm_error1 = 0;
    2ec8:	10 92 00 24 	sts	0x2400, r1	; 0x802400 <program_state+0x1c>
    2ecc:	10 92 01 24 	sts	0x2401, r1	; 0x802401 <program_state+0x1d>
	program_state.comm_error2 = 0;
    2ed0:	10 92 02 24 	sts	0x2402, r1	; 0x802402 <program_state+0x1e>
    2ed4:	10 92 03 24 	sts	0x2403, r1	; 0x802403 <program_state+0x1f>
	program_state.comm_error3 = 0;
    2ed8:	10 92 04 24 	sts	0x2404, r1	; 0x802404 <program_state+0x20>
    2edc:	10 92 05 24 	sts	0x2405, r1	; 0x802405 <program_state+0x21>
	program_state.comm_error4 = 0;
    2ee0:	10 92 06 24 	sts	0x2406, r1	; 0x802406 <program_state+0x22>
    2ee4:	10 92 07 24 	sts	0x2407, r1	; 0x802407 <program_state+0x23>
	program_state.comm_error5 = 0;
    2ee8:	10 92 08 24 	sts	0x2408, r1	; 0x802408 <program_state+0x24>
    2eec:	10 92 09 24 	sts	0x2409, r1	; 0x802409 <program_state+0x25>
	program_state.comm_error6 = 0;
    2ef0:	10 92 0a 24 	sts	0x240A, r1	; 0x80240a <program_state+0x26>
    2ef4:	10 92 0b 24 	sts	0x240B, r1	; 0x80240b <program_state+0x27>
	program_state.testing_mode = FALSE;
    2ef8:	10 92 12 24 	sts	0x2412, r1	; 0x802412 <program_state+0x2e>
	program_state.debug_mode = FALSE;
    2efc:	10 92 13 24 	sts	0x2413, r1	; 0x802413 <program_state+0x2f>
	program_state.need_to_save_target_current = FALSE;
    2f00:	10 92 16 24 	sts	0x2416, r1	; 0x802416 <program_state+0x32>
	
	counters.backlight_timer = BCKLGHT_DFLT_TIME;
    2f04:	20 e4       	ldi	r18, 0x40	; 64
    2f06:	39 e1       	ldi	r19, 0x19	; 25
    2f08:	20 93 e4 24 	sts	0x24E4, r18	; 0x8024e4 <counters>
    2f0c:	30 93 e5 24 	sts	0x24E5, r19	; 0x8024e5 <counters+0x1>
	counters.start_up_screen_timeout = STARTUP_SCREEN_TIME;
    2f10:	28 eb       	ldi	r18, 0xB8	; 184
    2f12:	3b e0       	ldi	r19, 0x0B	; 11
    2f14:	20 93 02 25 	sts	0x2502, r18	; 0x802502 <counters+0x1e>
    2f18:	30 93 03 25 	sts	0x2503, r19	; 0x802503 <counters+0x1f>
	counters.settings_to_turn_off_counter = SETTINGS_TO_TURN_OFF_AUTOMATICALLY_TIME;
    2f1c:	2c ed       	ldi	r18, 0xDC	; 220
    2f1e:	35 e0       	ldi	r19, 0x05	; 5
    2f20:	20 93 04 25 	sts	0x2504, r18	; 0x802504 <counters+0x20>
    2f24:	30 93 05 25 	sts	0x2505, r19	; 0x802505 <counters+0x21>
	counters.check_temp_counter = 0;
    2f28:	10 92 06 25 	sts	0x2506, r1	; 0x802506 <counters+0x22>
    2f2c:	10 92 07 25 	sts	0x2507, r1	; 0x802507 <counters+0x23>
	counters.screen_refresh_counter = 0;
    2f30:	10 92 08 25 	sts	0x2508, r1	; 0x802508 <counters+0x24>
    2f34:	10 92 09 25 	sts	0x2509, r1	; 0x802509 <counters+0x25>
	counters.clear_errors_pson_counter = 0;
    2f38:	10 92 0a 25 	sts	0x250A, r1	; 0x80250a <counters+0x26>
    2f3c:	10 92 0b 25 	sts	0x250B, r1	; 0x80250b <counters+0x27>
	counters.voltage_drift_error_counter = 0;
    2f40:	10 92 0c 25 	sts	0x250C, r1	; 0x80250c <counters+0x28>
    2f44:	10 92 0d 25 	sts	0x250D, r1	; 0x80250d <counters+0x29>
	counters.i2c_error_counter = 0;
    2f48:	10 92 0e 25 	sts	0x250E, r1	; 0x80250e <counters+0x2a>
    2f4c:	10 92 0f 25 	sts	0x250F, r1	; 0x80250f <counters+0x2b>
	counters.dc_off_time = 0;
    2f50:	10 92 12 25 	sts	0x2512, r1	; 0x802512 <counters+0x2e>
    2f54:	10 92 13 25 	sts	0x2513, r1	; 0x802513 <counters+0x2f>
	counters.debug_clicks_counter = 0;
    2f58:	10 92 14 25 	sts	0x2514, r1	; 0x802514 <counters+0x30>
    2f5c:	10 92 15 25 	sts	0x2515, r1	; 0x802515 <counters+0x31>
	
	
	/* Output One Initialization */
	output_one.id = 1;
    2f60:	90 93 a3 24 	sts	0x24A3, r25	; 0x8024a3 <output_one>
	output_one.target_current = 300;
    2f64:	cc e2       	ldi	r28, 0x2C	; 44
    2f66:	d1 e0       	ldi	r29, 0x01	; 1
    2f68:	c0 93 b3 24 	sts	0x24B3, r28	; 0x8024b3 <output_one+0x10>
    2f6c:	d0 93 b4 24 	sts	0x24B4, r29	; 0x8024b4 <output_one+0x11>
	output_one.power_supply_max_current = 1250;
    2f70:	a2 ee       	ldi	r26, 0xE2	; 226
    2f72:	b4 e0       	ldi	r27, 0x04	; 4
    2f74:	a0 93 a4 24 	sts	0x24A4, r26	; 0x8024a4 <output_one+0x1>
    2f78:	b0 93 a5 24 	sts	0x24A5, r27	; 0x8024a5 <output_one+0x2>
	output_one.power_supply_pwm_max = 1023;
    2f7c:	ef ef       	ldi	r30, 0xFF	; 255
    2f7e:	f3 e0       	ldi	r31, 0x03	; 3
    2f80:	e0 93 a6 24 	sts	0x24A6, r30	; 0x8024a6 <output_one+0x3>
    2f84:	f0 93 a7 24 	sts	0x24A7, r31	; 0x8024a7 <output_one+0x4>
	output_one.pwm_multiplier = 2.00;
    2f88:	81 2c       	mov	r8, r1
    2f8a:	91 2c       	mov	r9, r1
    2f8c:	a1 2c       	mov	r10, r1
    2f8e:	20 e4       	ldi	r18, 0x40	; 64
    2f90:	b2 2e       	mov	r11, r18
    2f92:	80 92 c2 24 	sts	0x24C2, r8	; 0x8024c2 <output_one+0x1f>
    2f96:	90 92 c3 24 	sts	0x24C3, r9	; 0x8024c3 <output_one+0x20>
    2f9a:	a0 92 c4 24 	sts	0x24C4, r10	; 0x8024c4 <output_one+0x21>
    2f9e:	b0 92 c5 24 	sts	0x24C5, r11	; 0x8024c5 <output_one+0x22>
	output_one.reduced_current_fraction = 1.00;
    2fa2:	c1 2c       	mov	r12, r1
    2fa4:	d1 2c       	mov	r13, r1
    2fa6:	30 e8       	ldi	r19, 0x80	; 128
    2fa8:	e3 2e       	mov	r14, r19
    2faa:	3f e3       	ldi	r19, 0x3F	; 63
    2fac:	f3 2e       	mov	r15, r19
    2fae:	c0 92 c6 24 	sts	0x24C6, r12	; 0x8024c6 <output_one+0x23>
    2fb2:	d0 92 c7 24 	sts	0x24C7, r13	; 0x8024c7 <output_one+0x24>
    2fb6:	e0 92 c8 24 	sts	0x24C8, r14	; 0x8024c8 <output_one+0x25>
    2fba:	f0 92 c9 24 	sts	0x24C9, r15	; 0x8024c9 <output_one+0x26>
	//output_one.ina226_addr = OUTPUT1_INA226_ADDR;
	output_one.pwm_board_addr = BOARD_41EC_ADDR;
    2fbe:	6c e4       	ldi	r22, 0x4C	; 76
    2fc0:	60 93 e0 24 	sts	0x24E0, r22	; 0x8024e0 <output_one+0x3d>
	output_one.dummy_dac_address = OUTPUT1_DAC101C085_ADDR;
    2fc4:	2a e0       	ldi	r18, 0x0A	; 10
    2fc6:	20 93 e1 24 	sts	0x24E1, r18	; 0x8024e1 <output_one+0x3e>
	output_one.set_pwm = &write_pwm_to_41ec;
    2fca:	4b eb       	ldi	r20, 0xBB	; 187
    2fcc:	5c e2       	ldi	r21, 0x2C	; 44
    2fce:	40 93 d5 24 	sts	0x24D5, r20	; 0x8024d5 <output_one+0x32>
    2fd2:	50 93 d6 24 	sts	0x24D6, r21	; 0x8024d6 <output_one+0x33>
	output_one.write_to_dummy_dac = &write_to_dac101c085;
    2fd6:	2e ee       	ldi	r18, 0xEE	; 238
    2fd8:	3c e2       	ldi	r19, 0x2C	; 44
    2fda:	20 93 d7 24 	sts	0x24D7, r18	; 0x8024d7 <output_one+0x34>
    2fde:	30 93 d8 24 	sts	0x24D8, r19	; 0x8024d8 <output_one+0x35>
	output_one.need_to_set_current_voltage_pair = TRUE;
    2fe2:	90 93 b0 24 	sts	0x24B0, r25	; 0x8024b0 <output_one+0xd>
	output_one.set_current_state = VISIBLE_LOCKED;
    2fe6:	80 93 b2 24 	sts	0x24B2, r24	; 0x8024b2 <output_one+0xf>
	output_one.isCurrentAdjusted = FALSE;
    2fea:	10 92 cc 24 	sts	0x24CC, r1	; 0x8024cc <output_one+0x29>
	output_one.needsAdjusting = FALSE;
    2fee:	10 92 cd 24 	sts	0x24CD, r1	; 0x8024cd <output_one+0x2a>
	output_one.isChanelused1 = FALSE;
    2ff2:	10 92 ce 24 	sts	0x24CE, r1	; 0x8024ce <output_one+0x2b>
	output_one.isChanelused2 = FALSE;
    2ff6:	10 92 cf 24 	sts	0x24CF, r1	; 0x8024cf <output_one+0x2c>
	output_one.dac_value = 0;
    2ffa:	10 92 bf 24 	sts	0x24BF, r1	; 0x8024bf <output_one+0x1c>
    2ffe:	10 92 c0 24 	sts	0x24C0, r1	; 0x8024c0 <output_one+0x1d>
	output_one.dac_flag = FALSE;
    3002:	10 92 d0 24 	sts	0x24D0, r1	; 0x8024d0 <output_one+0x2d>
	output_one.set_current_tries = 0;
    3006:	10 92 c1 24 	sts	0x24C1, r1	; 0x8024c1 <output_one+0x1e>
	output_one.cur_adj = FALSE;
    300a:	10 92 d2 24 	sts	0x24D2, r1	; 0x8024d2 <output_one+0x2f>
	
	/* Output Two Initialization */
	output_two.id = 2;
    300e:	80 93 21 24 	sts	0x2421, r24	; 0x802421 <output_two>
	output_two.target_current = 300;
    3012:	c0 93 31 24 	sts	0x2431, r28	; 0x802431 <output_two+0x10>
    3016:	d0 93 32 24 	sts	0x2432, r29	; 0x802432 <output_two+0x11>
	output_two.power_supply_max_current = 1250;
    301a:	a0 93 22 24 	sts	0x2422, r26	; 0x802422 <output_two+0x1>
    301e:	b0 93 23 24 	sts	0x2423, r27	; 0x802423 <output_two+0x2>
	output_two.power_supply_pwm_max = 1023;
    3022:	e0 93 24 24 	sts	0x2424, r30	; 0x802424 <output_two+0x3>
    3026:	f0 93 25 24 	sts	0x2425, r31	; 0x802425 <output_two+0x4>
	output_two.pwm_multiplier = 2.00;
    302a:	80 92 40 24 	sts	0x2440, r8	; 0x802440 <output_two+0x1f>
    302e:	90 92 41 24 	sts	0x2441, r9	; 0x802441 <output_two+0x20>
    3032:	a0 92 42 24 	sts	0x2442, r10	; 0x802442 <output_two+0x21>
    3036:	b0 92 43 24 	sts	0x2443, r11	; 0x802443 <output_two+0x22>
	output_two.reduced_current_fraction = 1.00;
    303a:	c0 92 44 24 	sts	0x2444, r12	; 0x802444 <output_two+0x23>
    303e:	d0 92 45 24 	sts	0x2445, r13	; 0x802445 <output_two+0x24>
    3042:	e0 92 46 24 	sts	0x2446, r14	; 0x802446 <output_two+0x25>
    3046:	f0 92 47 24 	sts	0x2447, r15	; 0x802447 <output_two+0x26>
	//output_two.ina226_addr = OUTPUT2_INA226_ADDR;
	output_two.pwm_board_addr = BOARD_41EC_ADDR;
    304a:	60 93 5e 24 	sts	0x245E, r22	; 0x80245e <output_two+0x3d>
	output_two.dummy_dac_address = OUTPUT2_DAC101C085_ADDR;
    304e:	69 e0       	ldi	r22, 0x09	; 9
    3050:	60 93 5f 24 	sts	0x245F, r22	; 0x80245f <output_two+0x3e>
	output_two.set_pwm = &write_pwm_to_41ec;
    3054:	40 93 53 24 	sts	0x2453, r20	; 0x802453 <output_two+0x32>
    3058:	50 93 54 24 	sts	0x2454, r21	; 0x802454 <output_two+0x33>
	output_two.write_to_dummy_dac = &write_to_dac101c085;
    305c:	20 93 55 24 	sts	0x2455, r18	; 0x802455 <output_two+0x34>
    3060:	30 93 56 24 	sts	0x2456, r19	; 0x802456 <output_two+0x35>
	output_two.need_to_set_current_voltage_pair = TRUE;
    3064:	90 93 2e 24 	sts	0x242E, r25	; 0x80242e <output_two+0xd>
	output_two.set_current_state = VISIBLE_LOCKED;
    3068:	80 93 30 24 	sts	0x2430, r24	; 0x802430 <output_two+0xf>
	output_two.isCurrentAdjusted = FALSE;
    306c:	10 92 4a 24 	sts	0x244A, r1	; 0x80244a <output_two+0x29>
	output_two.needsAdjusting = FALSE;
    3070:	10 92 4b 24 	sts	0x244B, r1	; 0x80244b <output_two+0x2a>
	output_two.isChanelused1 = FALSE;
    3074:	10 92 4c 24 	sts	0x244C, r1	; 0x80244c <output_two+0x2b>
	output_two.isChanelused2 = FALSE;
    3078:	10 92 4d 24 	sts	0x244D, r1	; 0x80244d <output_two+0x2c>
	output_two.dac_value = 0;
    307c:	10 92 3d 24 	sts	0x243D, r1	; 0x80243d <output_two+0x1c>
    3080:	10 92 3e 24 	sts	0x243E, r1	; 0x80243e <output_two+0x1d>
	output_two.dac_flag = FALSE;
    3084:	10 92 4e 24 	sts	0x244E, r1	; 0x80244e <output_two+0x2d>
	output_two.set_current_tries = 0;
    3088:	10 92 3f 24 	sts	0x243F, r1	; 0x80243f <output_two+0x1e>
	output_two.cur_adj = FALSE;
    308c:	10 92 50 24 	sts	0x2450, r1	; 0x802450 <output_two+0x2f>
	
	
	/* Messages Initialization */
	messages.system_normal = "SYSTEM NORMAL";
    3090:	8c e7       	ldi	r24, 0x7C	; 124
    3092:	91 e2       	ldi	r25, 0x21	; 33
    3094:	80 93 1c 25 	sts	0x251C, r24	; 0x80251c <messages>
    3098:	90 93 1d 25 	sts	0x251D, r25	; 0x80251d <messages+0x1>
	messages.dc_interrupted = "INTERRUPT MODE";
    309c:	8a e8       	ldi	r24, 0x8A	; 138
    309e:	91 e2       	ldi	r25, 0x21	; 33
    30a0:	80 93 1e 25 	sts	0x251E, r24	; 0x80251e <messages+0x2>
    30a4:	90 93 1f 25 	sts	0x251F, r25	; 0x80251f <messages+0x3>
	messages.voltage_drift = "VOLTAGE DRIFT > 15%";
    30a8:	8c e3       	ldi	r24, 0x3C	; 60
    30aa:	92 e2       	ldi	r25, 0x22	; 34
    30ac:	80 93 20 25 	sts	0x2520, r24	; 0x802520 <messages+0x4>
    30b0:	90 93 21 25 	sts	0x2521, r25	; 0x802521 <messages+0x5>
	messages.zero_current = "ZERO CURRENT OUTPUT";
    30b4:	89 e5       	ldi	r24, 0x59	; 89
    30b6:	92 e2       	ldi	r25, 0x22	; 34
    30b8:	80 93 22 25 	sts	0x2522, r24	; 0x802522 <messages+0x6>
    30bc:	90 93 23 25 	sts	0x2523, r25	; 0x802523 <messages+0x7>
	messages.max_current = "MAX. CURRENT";
    30c0:	86 e7       	ldi	r24, 0x76	; 118
    30c2:	92 e2       	ldi	r25, 0x22	; 34
    30c4:	80 93 24 25 	sts	0x2524, r24	; 0x802524 <messages+0x8>
    30c8:	90 93 25 25 	sts	0x2525, r25	; 0x802525 <messages+0x9>
	messages.min_current = "MIN. CURRENT";
    30cc:	8c e8       	ldi	r24, 0x8C	; 140
    30ce:	92 e2       	ldi	r25, 0x22	; 34
    30d0:	80 93 26 25 	sts	0x2526, r24	; 0x802526 <messages+0xa>
    30d4:	90 93 27 25 	sts	0x2527, r25	; 0x802527 <messages+0xb>
	messages.max_voltage = "MAX. VOLTAGE";
    30d8:	82 ea       	ldi	r24, 0xA2	; 162
    30da:	92 e2       	ldi	r25, 0x22	; 34
    30dc:	80 93 28 25 	sts	0x2528, r24	; 0x802528 <messages+0xc>
    30e0:	90 93 29 25 	sts	0x2529, r25	; 0x802529 <messages+0xd>
	
	messages.over_temperature_output_one1 = "PS. #1:  OVER TEMP. REDUCED CURRENT";
    30e4:	89 e9       	ldi	r24, 0x99	; 153
    30e6:	91 e2       	ldi	r25, 0x21	; 33
    30e8:	80 93 2a 25 	sts	0x252A, r24	; 0x80252a <messages+0xe>
    30ec:	90 93 2b 25 	sts	0x252B, r25	; 0x80252b <messages+0xf>
	messages.over_temperature_normal_now_output_one1 = "PS. #1: OVER TEMP. OCCURRED - NORMAL NOW";
    30f0:	8d eb       	ldi	r24, 0xBD	; 189
    30f2:	91 e2       	ldi	r25, 0x21	; 33
    30f4:	80 93 2c 25 	sts	0x252C, r24	; 0x80252c <messages+0x10>
    30f8:	90 93 2d 25 	sts	0x252D, r25	; 0x80252d <messages+0x11>
	messages.over_temperature_output_one2 = "PS. #2:  OVER TEMP. REDUCED CURRENT";
    30fc:	86 ee       	ldi	r24, 0xE6	; 230
    30fe:	91 e2       	ldi	r25, 0x21	; 33
    3100:	80 93 2e 25 	sts	0x252E, r24	; 0x80252e <messages+0x12>
    3104:	90 93 2f 25 	sts	0x252F, r25	; 0x80252f <messages+0x13>
	messages.over_temperature_normal_now_output_one2 = "PS. #2: OVER TEMP. OCCURRED - NORMAL NOW";
    3108:	8a e0       	ldi	r24, 0x0A	; 10
    310a:	92 e2       	ldi	r25, 0x22	; 34
    310c:	80 93 30 25 	sts	0x2530, r24	; 0x802530 <messages+0x14>
    3110:	90 93 31 25 	sts	0x2531, r25	; 0x802531 <messages+0x15>
	messages.voltage_drift_output_one = "STR. #1: VOLTAGE DRIFT > 15%";
    3114:	83 e3       	ldi	r24, 0x33	; 51
    3116:	92 e2       	ldi	r25, 0x22	; 34
    3118:	80 93 32 25 	sts	0x2532, r24	; 0x802532 <messages+0x16>
    311c:	90 93 33 25 	sts	0x2533, r25	; 0x802533 <messages+0x17>
	messages.zero_current_output_one = "STR. #1: ZERO CURRENT OUTPUT";
    3120:	80 e5       	ldi	r24, 0x50	; 80
    3122:	92 e2       	ldi	r25, 0x22	; 34
    3124:	80 93 34 25 	sts	0x2534, r24	; 0x802534 <messages+0x18>
    3128:	90 93 35 25 	sts	0x2535, r25	; 0x802535 <messages+0x19>
	messages.max_current_output_one = "STR. #1: MAX. CURRENT";
    312c:	8d e6       	ldi	r24, 0x6D	; 109
    312e:	92 e2       	ldi	r25, 0x22	; 34
    3130:	80 93 36 25 	sts	0x2536, r24	; 0x802536 <messages+0x1a>
    3134:	90 93 37 25 	sts	0x2537, r25	; 0x802537 <messages+0x1b>
	messages.min_current_output_one = "STR. #1: MIN. CURRENT";
    3138:	83 e8       	ldi	r24, 0x83	; 131
    313a:	92 e2       	ldi	r25, 0x22	; 34
    313c:	80 93 38 25 	sts	0x2538, r24	; 0x802538 <messages+0x1c>
    3140:	90 93 39 25 	sts	0x2539, r25	; 0x802539 <messages+0x1d>
	messages.max_voltage_output_one = "STR. #1: MAX. VOLTAGE";
    3144:	89 e9       	ldi	r24, 0x99	; 153
    3146:	92 e2       	ldi	r25, 0x22	; 34
    3148:	80 93 3a 25 	sts	0x253A, r24	; 0x80253a <messages+0x1e>
    314c:	90 93 3b 25 	sts	0x253B, r25	; 0x80253b <messages+0x1f>
	
	messages.over_temperature_output_two1 = "PS. #3:  OVER TEMP. REDUCED CURRENT";
    3150:	8f ea       	ldi	r24, 0xAF	; 175
    3152:	92 e2       	ldi	r25, 0x22	; 34
    3154:	80 93 3c 25 	sts	0x253C, r24	; 0x80253c <messages+0x20>
    3158:	90 93 3d 25 	sts	0x253D, r25	; 0x80253d <messages+0x21>
	messages.over_temperature_normal_now_output_two1 = "PS. #3: OVER TEMP. OCCURRED - NORMAL NOW";
    315c:	83 ed       	ldi	r24, 0xD3	; 211
    315e:	92 e2       	ldi	r25, 0x22	; 34
    3160:	80 93 3e 25 	sts	0x253E, r24	; 0x80253e <messages+0x22>
    3164:	90 93 3f 25 	sts	0x253F, r25	; 0x80253f <messages+0x23>
	messages.over_temperature_output_two2 = "PS. #4:  OVER TEMP. REDUCED CURRENT";
    3168:	8c ef       	ldi	r24, 0xFC	; 252
    316a:	92 e2       	ldi	r25, 0x22	; 34
    316c:	80 93 40 25 	sts	0x2540, r24	; 0x802540 <messages+0x24>
    3170:	90 93 41 25 	sts	0x2541, r25	; 0x802541 <messages+0x25>
	messages.over_temperature_normal_now_output_two2 = "PS. #4: OVER TEMP. OCCURRED - NORMAL NOW";
    3174:	80 e2       	ldi	r24, 0x20	; 32
    3176:	93 e2       	ldi	r25, 0x23	; 35
    3178:	80 93 42 25 	sts	0x2542, r24	; 0x802542 <messages+0x26>
    317c:	90 93 43 25 	sts	0x2543, r25	; 0x802543 <messages+0x27>
	messages.voltage_drift_output_two = "STR. #2: VOLTAGE DRIFT > 15%";
    3180:	89 e4       	ldi	r24, 0x49	; 73
    3182:	93 e2       	ldi	r25, 0x23	; 35
    3184:	80 93 44 25 	sts	0x2544, r24	; 0x802544 <messages+0x28>
    3188:	90 93 45 25 	sts	0x2545, r25	; 0x802545 <messages+0x29>
	messages.zero_current_output_two = "STR. #2: ZERO CURRENT OUTPUT";
    318c:	86 e6       	ldi	r24, 0x66	; 102
    318e:	93 e2       	ldi	r25, 0x23	; 35
    3190:	80 93 46 25 	sts	0x2546, r24	; 0x802546 <messages+0x2a>
    3194:	90 93 47 25 	sts	0x2547, r25	; 0x802547 <messages+0x2b>
	messages.max_current_output_two = "STR. #2: MAX. CURRENT";
    3198:	83 e8       	ldi	r24, 0x83	; 131
    319a:	93 e2       	ldi	r25, 0x23	; 35
    319c:	80 93 48 25 	sts	0x2548, r24	; 0x802548 <messages+0x2c>
    31a0:	90 93 49 25 	sts	0x2549, r25	; 0x802549 <messages+0x2d>
	messages.min_current_output_two = "STR. #2: MIN. CURRENT";
    31a4:	89 e9       	ldi	r24, 0x99	; 153
    31a6:	93 e2       	ldi	r25, 0x23	; 35
    31a8:	80 93 4a 25 	sts	0x254A, r24	; 0x80254a <messages+0x2e>
    31ac:	90 93 4b 25 	sts	0x254B, r25	; 0x80254b <messages+0x2f>
	messages.max_voltage_output_two = "STR. #2: MAX. VOLTAGE";
    31b0:	8f ea       	ldi	r24, 0xAF	; 175
    31b2:	93 e2       	ldi	r25, 0x23	; 35
    31b4:	80 93 4c 25 	sts	0x254C, r24	; 0x80254c <messages+0x30>
    31b8:	90 93 4d 25 	sts	0x254D, r25	; 0x80254d <messages+0x31>
	
	messages.communication_error = "COMM. ERROR:";
    31bc:	85 ec       	ldi	r24, 0xC5	; 197
    31be:	93 e2       	ldi	r25, 0x23	; 35
    31c0:	80 93 4e 25 	sts	0x254E, r24	; 0x80254e <messages+0x32>
    31c4:	90 93 4f 25 	sts	0x254F, r25	; 0x80254f <messages+0x33>
	messages.calibrating_notification = "CALIBRATING";
    31c8:	82 ed       	ldi	r24, 0xD2	; 210
    31ca:	93 e2       	ldi	r25, 0x23	; 35
    31cc:	80 93 50 25 	sts	0x2550, r24	; 0x802550 <messages+0x34>
    31d0:	90 93 51 25 	sts	0x2551, r25	; 0x802551 <messages+0x35>
	

	gauge_x = 15;
    31d4:	8f e0       	ldi	r24, 0x0F	; 15
    31d6:	90 e0       	ldi	r25, 0x00	; 0
    31d8:	80 93 52 25 	sts	0x2552, r24	; 0x802552 <gauge_x>
    31dc:	90 93 53 25 	sts	0x2553, r25	; 0x802553 <gauge_x+0x1>
	gauge_y = 4;
    31e0:	84 e0       	ldi	r24, 0x04	; 4
    31e2:	90 e0       	ldi	r25, 0x00	; 0
    31e4:	80 93 1b 24 	sts	0x241B, r24	; 0x80241b <gauge_y>
    31e8:	90 93 1c 24 	sts	0x241C, r25	; 0x80241c <gauge_y+0x1>
	gauge_width = 290;
    31ec:	82 e2       	ldi	r24, 0x22	; 34
    31ee:	91 e0       	ldi	r25, 0x01	; 1
    31f0:	80 93 64 24 	sts	0x2464, r24	; 0x802464 <gauge_width>
    31f4:	90 93 65 24 	sts	0x2465, r25	; 0x802465 <gauge_width+0x1>
	
	dummy_current_one = 0;
    31f8:	10 92 66 24 	sts	0x2466, r1	; 0x802466 <dummy_current_one>
    31fc:	10 92 67 24 	sts	0x2467, r1	; 0x802467 <dummy_current_one+0x1>
	dummy_current_two = 0;
    3200:	10 92 e2 24 	sts	0x24E2, r1	; 0x8024e2 <dummy_current_two>
    3204:	10 92 e3 24 	sts	0x24E3, r1	; 0x8024e3 <dummy_current_two+0x1>
	
	
	output_one.dac_value = 0;
	output_two.dac_value = 0;
	
	output_one.write_to_dummy_dac(output_one.dac_value, output_one.dummy_dac_address);
    3208:	6a e0       	ldi	r22, 0x0A	; 10
    320a:	80 e0       	ldi	r24, 0x00	; 0
    320c:	90 e0       	ldi	r25, 0x00	; 0
    320e:	0e 94 ee 2c 	call	0x59dc	; 0x59dc <write_to_dac101c085>
	
	if (program_state.program != THIRTY_EIGHT)
    3212:	80 91 e8 23 	lds	r24, 0x23E8	; 0x8023e8 <program_state+0x4>
    3216:	88 23       	and	r24, r24
    3218:	59 f0       	breq	.+22     	; 0x3230 <__stack+0x231>
	{
		output_two.write_to_dummy_dac(output_two.dac_value, output_two.dummy_dac_address);
    321a:	e0 91 55 24 	lds	r30, 0x2455	; 0x802455 <output_two+0x34>
    321e:	f0 91 56 24 	lds	r31, 0x2456	; 0x802456 <output_two+0x35>
    3222:	60 91 5f 24 	lds	r22, 0x245F	; 0x80245f <output_two+0x3e>
    3226:	80 91 3d 24 	lds	r24, 0x243D	; 0x80243d <output_two+0x1c>
    322a:	90 91 3e 24 	lds	r25, 0x243E	; 0x80243e <output_two+0x1d>
    322e:	09 95       	icall
	}
	
	
	TIME_TO_CHECK_TEMP = 1800000;
    3230:	80 e4       	ldi	r24, 0x40	; 64
    3232:	97 e7       	ldi	r25, 0x77	; 119
    3234:	ab e1       	ldi	r26, 0x1B	; 27
    3236:	b0 e0       	ldi	r27, 0x00	; 0
    3238:	80 93 1d 24 	sts	0x241D, r24	; 0x80241d <TIME_TO_CHECK_TEMP>
    323c:	90 93 1e 24 	sts	0x241E, r25	; 0x80241e <TIME_TO_CHECK_TEMP+0x1>
    3240:	a0 93 1f 24 	sts	0x241F, r26	; 0x80241f <TIME_TO_CHECK_TEMP+0x2>
    3244:	b0 93 20 24 	sts	0x2420, r27	; 0x802420 <TIME_TO_CHECK_TEMP+0x3>
	OVER_TEMP_VALUE = 50;
    3248:	82 e3       	ldi	r24, 0x32	; 50
    324a:	90 e0       	ldi	r25, 0x00	; 0
    324c:	80 93 19 24 	sts	0x2419, r24	; 0x802419 <OVER_TEMP_VALUE>
    3250:	90 93 1a 24 	sts	0x241A, r25	; 0x80241a <OVER_TEMP_VALUE+0x1>
}
    3254:	df 91       	pop	r29
    3256:	cf 91       	pop	r28
    3258:	ff 90       	pop	r15
    325a:	ef 90       	pop	r14
    325c:	df 90       	pop	r13
    325e:	cf 90       	pop	r12
    3260:	bf 90       	pop	r11
    3262:	af 90       	pop	r10
    3264:	9f 90       	pop	r9
    3266:	8f 90       	pop	r8
    3268:	08 95       	ret

0000326a <execute_maintenance_functions>:

void execute_maintenance_functions(OutputState* output)
{
    326a:	4f 92       	push	r4
    326c:	5f 92       	push	r5
    326e:	6f 92       	push	r6
    3270:	7f 92       	push	r7
    3272:	8f 92       	push	r8
    3274:	9f 92       	push	r9
    3276:	af 92       	push	r10
    3278:	bf 92       	push	r11
    327a:	cf 92       	push	r12
    327c:	df 92       	push	r13
    327e:	ef 92       	push	r14
    3280:	ff 92       	push	r15
    3282:	0f 93       	push	r16
    3284:	1f 93       	push	r17
    3286:	cf 93       	push	r28
    3288:	df 93       	push	r29
    328a:	cd b7       	in	r28, 0x3d	; 61
    328c:	de b7       	in	r29, 0x3e	; 62
    328e:	28 97       	sbiw	r28, 0x08	; 8
    3290:	cd bf       	out	0x3d, r28	; 61
    3292:	de bf       	out	0x3e, r29	; 62
    3294:	4c 01       	movw	r8, r24
	//**************************************************
	wdt_reset(); // WATCH DOG TIMER RESET
    3296:	a8 95       	wdr
	//**************************************************
	
	// If voltage or current is higher then its maximum + 10% for more that 2 seconds then turn off unit
	if (counters.over_current_counter > 2000 || counters.over_voltage_counter > 2000)
    3298:	80 91 18 25 	lds	r24, 0x2518	; 0x802518 <counters+0x34>
    329c:	90 91 19 25 	lds	r25, 0x2519	; 0x802519 <counters+0x35>
    32a0:	81 3d       	cpi	r24, 0xD1	; 209
    32a2:	97 40       	sbci	r25, 0x07	; 7
    32a4:	38 f4       	brcc	.+14     	; 0x32b4 <execute_maintenance_functions+0x4a>
    32a6:	80 91 1a 25 	lds	r24, 0x251A	; 0x80251a <counters+0x36>
    32aa:	90 91 1b 25 	lds	r25, 0x251B	; 0x80251b <counters+0x37>
    32ae:	81 3d       	cpi	r24, 0xD1	; 209
    32b0:	97 40       	sbci	r25, 0x07	; 7
    32b2:	58 f0       	brcs	.+22     	; 0x32ca <execute_maintenance_functions+0x60>
	{
		char message[8];
		message[0] = (uint8_t)(0x17);
    32b4:	87 e1       	ldi	r24, 0x17	; 23
    32b6:	89 83       	std	Y+1, r24	; 0x01
		TWI_MasterWrite(&twiMaster, BOARD_41EC_ADDR, (uint8_t *) message, 1);
    32b8:	21 e0       	ldi	r18, 0x01	; 1
    32ba:	ae 01       	movw	r20, r28
    32bc:	4f 5f       	subi	r20, 0xFF	; 255
    32be:	5f 4f       	sbci	r21, 0xFF	; 255
    32c0:	6c e4       	ldi	r22, 0x4C	; 76
    32c2:	88 e6       	ldi	r24, 0x68	; 104
    32c4:	94 e2       	ldi	r25, 0x24	; 36
    32c6:	0e 94 62 33 	call	0x66c4	; 0x66c4 <TWI_MasterWrite>
	}
	
	if (program_state.need_to_save_target_current)
    32ca:	80 91 16 24 	lds	r24, 0x2416	; 0x802416 <program_state+0x32>
    32ce:	88 23       	and	r24, r24
    32d0:	c1 f0       	breq	.+48     	; 0x3302 <execute_maintenance_functions+0x98>
	{
		write_external_eeprom(&twiMasterForEEPROM, EXTERNAL_EEPROM_ADDR, EEPROM_OUT1_CURRENT_VALUE_ADDR, output_one.target_current);
    32d2:	20 91 b3 24 	lds	r18, 0x24B3	; 0x8024b3 <output_one+0x10>
    32d6:	30 91 b4 24 	lds	r19, 0x24B4	; 0x8024b4 <output_one+0x11>
    32da:	48 e2       	ldi	r20, 0x28	; 40
    32dc:	5a e0       	ldi	r21, 0x0A	; 10
    32de:	61 e5       	ldi	r22, 0x51	; 81
    32e0:	84 e5       	ldi	r24, 0x54	; 84
    32e2:	95 e2       	ldi	r25, 0x25	; 37
    32e4:	0e 94 20 32 	call	0x6440	; 0x6440 <write_external_eeprom>
		write_external_eeprom(&twiMasterForEEPROM, EXTERNAL_EEPROM_ADDR, EEPROM_OUT2_CURRENT_VALUE_ADDR, output_two.target_current);
    32e8:	20 91 31 24 	lds	r18, 0x2431	; 0x802431 <output_two+0x10>
    32ec:	30 91 32 24 	lds	r19, 0x2432	; 0x802432 <output_two+0x11>
    32f0:	4a e2       	ldi	r20, 0x2A	; 42
    32f2:	5a e0       	ldi	r21, 0x0A	; 10
    32f4:	61 e5       	ldi	r22, 0x51	; 81
    32f6:	84 e5       	ldi	r24, 0x54	; 84
    32f8:	95 e2       	ldi	r25, 0x25	; 37
    32fa:	0e 94 20 32 	call	0x6440	; 0x6440 <write_external_eeprom>
		program_state.need_to_save_target_current = FALSE;
    32fe:	10 92 16 24 	sts	0x2416, r1	; 0x802416 <program_state+0x32>
	}
	
	//**************************************************
	wdt_reset(); // WATCH DOG TIMER RESET
    3302:	a8 95       	wdr
	//**************************************************
	
	write_external_eeprom(&twiMasterForEEPROM, EXTERNAL_EEPROM_ADDR, EEPROM_COM_ERROR1_AMT_ADDR, program_state.comm_error1);
    3304:	20 91 00 24 	lds	r18, 0x2400	; 0x802400 <program_state+0x1c>
    3308:	30 91 01 24 	lds	r19, 0x2401	; 0x802401 <program_state+0x1d>
    330c:	4e e2       	ldi	r20, 0x2E	; 46
    330e:	5a e0       	ldi	r21, 0x0A	; 10
    3310:	61 e5       	ldi	r22, 0x51	; 81
    3312:	84 e5       	ldi	r24, 0x54	; 84
    3314:	95 e2       	ldi	r25, 0x25	; 37
    3316:	0e 94 20 32 	call	0x6440	; 0x6440 <write_external_eeprom>
	write_external_eeprom(&twiMasterForEEPROM, EXTERNAL_EEPROM_ADDR, EEPROM_COM_ERROR2_AMT_ADDR, program_state.comm_error2);
    331a:	20 91 02 24 	lds	r18, 0x2402	; 0x802402 <program_state+0x1e>
    331e:	30 91 03 24 	lds	r19, 0x2403	; 0x802403 <program_state+0x1f>
    3322:	40 e3       	ldi	r20, 0x30	; 48
    3324:	5a e0       	ldi	r21, 0x0A	; 10
    3326:	61 e5       	ldi	r22, 0x51	; 81
    3328:	84 e5       	ldi	r24, 0x54	; 84
    332a:	95 e2       	ldi	r25, 0x25	; 37
    332c:	0e 94 20 32 	call	0x6440	; 0x6440 <write_external_eeprom>
	write_external_eeprom(&twiMasterForEEPROM, EXTERNAL_EEPROM_ADDR, EEPROM_COM_ERROR3_AMT_ADDR, program_state.comm_error3);
    3330:	20 91 04 24 	lds	r18, 0x2404	; 0x802404 <program_state+0x20>
    3334:	30 91 05 24 	lds	r19, 0x2405	; 0x802405 <program_state+0x21>
    3338:	42 e3       	ldi	r20, 0x32	; 50
    333a:	5a e0       	ldi	r21, 0x0A	; 10
    333c:	61 e5       	ldi	r22, 0x51	; 81
    333e:	84 e5       	ldi	r24, 0x54	; 84
    3340:	95 e2       	ldi	r25, 0x25	; 37
    3342:	0e 94 20 32 	call	0x6440	; 0x6440 <write_external_eeprom>
	write_external_eeprom(&twiMasterForEEPROM, EXTERNAL_EEPROM_ADDR, EEPROM_COM_ERROR4_AMT_ADDR, program_state.comm_error4);
    3346:	20 91 06 24 	lds	r18, 0x2406	; 0x802406 <program_state+0x22>
    334a:	30 91 07 24 	lds	r19, 0x2407	; 0x802407 <program_state+0x23>
    334e:	44 e3       	ldi	r20, 0x34	; 52
    3350:	5a e0       	ldi	r21, 0x0A	; 10
    3352:	61 e5       	ldi	r22, 0x51	; 81
    3354:	84 e5       	ldi	r24, 0x54	; 84
    3356:	95 e2       	ldi	r25, 0x25	; 37
    3358:	0e 94 20 32 	call	0x6440	; 0x6440 <write_external_eeprom>
	write_external_eeprom(&twiMasterForEEPROM, EXTERNAL_EEPROM_ADDR, EEPROM_COM_ERROR5_AMT_ADDR, program_state.comm_error5);
    335c:	20 91 08 24 	lds	r18, 0x2408	; 0x802408 <program_state+0x24>
    3360:	30 91 09 24 	lds	r19, 0x2409	; 0x802409 <program_state+0x25>
    3364:	46 e3       	ldi	r20, 0x36	; 54
    3366:	5a e0       	ldi	r21, 0x0A	; 10
    3368:	61 e5       	ldi	r22, 0x51	; 81
    336a:	84 e5       	ldi	r24, 0x54	; 84
    336c:	95 e2       	ldi	r25, 0x25	; 37
    336e:	0e 94 20 32 	call	0x6440	; 0x6440 <write_external_eeprom>
	write_external_eeprom(&twiMasterForEEPROM, EXTERNAL_EEPROM_ADDR, EEPROM_COM_ERROR6_AMT_ADDR, program_state.comm_error6);
    3372:	20 91 0a 24 	lds	r18, 0x240A	; 0x80240a <program_state+0x26>
    3376:	30 91 0b 24 	lds	r19, 0x240B	; 0x80240b <program_state+0x27>
    337a:	48 e3       	ldi	r20, 0x38	; 56
    337c:	5a e0       	ldi	r21, 0x0A	; 10
    337e:	61 e5       	ldi	r22, 0x51	; 81
    3380:	84 e5       	ldi	r24, 0x54	; 84
    3382:	95 e2       	ldi	r25, 0x25	; 37
    3384:	0e 94 20 32 	call	0x6440	; 0x6440 <write_external_eeprom>
	
	//**************************************************
	wdt_reset(); // WATCH DOG TIMER RESET
    3388:	a8 95       	wdr
	//**************************************************
	
	check_save_voltage(output);
    338a:	c4 01       	movw	r24, r8
    338c:	0e 94 79 29 	call	0x52f2	; 0x52f2 <check_save_voltage>
	
	//**************************************************
	wdt_reset(); // WATCH DOG TIMER RESET
    3390:	a8 95       	wdr
	//**************************************************
	
	if (program_state.calibrating_mode_clicked)
    3392:	80 91 15 24 	lds	r24, 0x2415	; 0x802415 <program_state+0x31>
    3396:	88 23       	and	r24, r24
    3398:	59 f1       	breq	.+86     	; 0x33f0 <execute_maintenance_functions+0x186>
	{
		output_one.set_current_state = VISIBLE_LOCKED;
    339a:	82 e0       	ldi	r24, 0x02	; 2
    339c:	80 93 b2 24 	sts	0x24B2, r24	; 0x8024b2 <output_one+0xf>
		output_two.set_current_state = VISIBLE_LOCKED;
    33a0:	80 93 30 24 	sts	0x2430, r24	; 0x802430 <output_two+0xf>
		if (program_state.program == FOURTY_ONE || program_state.program == THIRTY_EIGHT)
    33a4:	80 91 e8 23 	lds	r24, 0x23E8	; 0x8023e8 <program_state+0x4>
    33a8:	82 30       	cpi	r24, 0x02	; 2
    33aa:	58 f4       	brcc	.+22     	; 0x33c2 <execute_maintenance_functions+0x158>
		{
			calibrate_unit(&output_one);
    33ac:	83 ea       	ldi	r24, 0xA3	; 163
    33ae:	94 e2       	ldi	r25, 0x24	; 36
    33b0:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <calibrate_unit>
			
			output_one.target_current = 100;
    33b4:	84 e6       	ldi	r24, 0x64	; 100
    33b6:	90 e0       	ldi	r25, 0x00	; 0
    33b8:	80 93 b3 24 	sts	0x24B3, r24	; 0x8024b3 <output_one+0x10>
    33bc:	90 93 b4 24 	sts	0x24B4, r25	; 0x8024b4 <output_one+0x11>
    33c0:	14 c0       	rjmp	.+40     	; 0x33ea <execute_maintenance_functions+0x180>
		}
		else if (program_state.program == FOURTY_ONE_DUAL)
    33c2:	82 30       	cpi	r24, 0x02	; 2
    33c4:	91 f4       	brne	.+36     	; 0x33ea <execute_maintenance_functions+0x180>
		{
			calibrate_unit(&output_one);
    33c6:	83 ea       	ldi	r24, 0xA3	; 163
    33c8:	94 e2       	ldi	r25, 0x24	; 36
    33ca:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <calibrate_unit>
			
			output_one.target_current = 100;
    33ce:	04 e6       	ldi	r16, 0x64	; 100
    33d0:	10 e0       	ldi	r17, 0x00	; 0
    33d2:	00 93 b3 24 	sts	0x24B3, r16	; 0x8024b3 <output_one+0x10>
    33d6:	10 93 b4 24 	sts	0x24B4, r17	; 0x8024b4 <output_one+0x11>
			
			calibrate_unit(&output_two);
    33da:	81 e2       	ldi	r24, 0x21	; 33
    33dc:	94 e2       	ldi	r25, 0x24	; 36
    33de:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <calibrate_unit>
			
			output_two.target_current = 100;
    33e2:	00 93 31 24 	sts	0x2431, r16	; 0x802431 <output_two+0x10>
    33e6:	10 93 32 24 	sts	0x2432, r17	; 0x802432 <output_two+0x11>
		}
		
		program_state.calibrating_mode_clicked = FALSE;
    33ea:	10 92 15 24 	sts	0x2415, r1	; 0x802415 <program_state+0x31>
    33ee:	2f c2       	rjmp	.+1118   	; 0x384e <execute_maintenance_functions+0x5e4>
	}
	else
	{
		handle_over_temperature(output);
    33f0:	c4 01       	movw	r24, r8
    33f2:	0e 94 78 27 	call	0x4ef0	; 0x4ef0 <handle_over_temperature>
		
		//**************************************************
		wdt_reset(); // WATCH DOG TIMER RESET
    33f6:	a8 95       	wdr
		//**************************************************
	
		if(output->over_temp_error1 == FALSE && output->over_temp_error2 == FALSE && output->over_temp_half_second_count == 0)//should only check for voltage drift when there is no over-temperature error
    33f8:	f4 01       	movw	r30, r8
    33fa:	81 85       	ldd	r24, Z+9	; 0x09
    33fc:	81 11       	cpse	r24, r1
    33fe:	0a c0       	rjmp	.+20     	; 0x3414 <execute_maintenance_functions+0x1aa>
    3400:	82 85       	ldd	r24, Z+10	; 0x0a
    3402:	81 11       	cpse	r24, r1
    3404:	07 c0       	rjmp	.+14     	; 0x3414 <execute_maintenance_functions+0x1aa>
    3406:	82 ad       	ldd	r24, Z+58	; 0x3a
    3408:	93 ad       	ldd	r25, Z+59	; 0x3b
    340a:	89 2b       	or	r24, r25
    340c:	19 f4       	brne	.+6      	; 0x3414 <execute_maintenance_functions+0x1aa>
		{ 
			check_voltage_drift(output);
    340e:	c4 01       	movw	r24, r8
    3410:	0e 94 9b 28 	call	0x5136	; 0x5136 <check_voltage_drift>
		}
		
		//**************************************************
		wdt_reset(); // WATCH DOG TIMER RESET
    3414:	a8 95       	wdr
		//**************************************************
	
		// Stop blinking the "Set current:" if 1 minutes passed or error occured
		if (((counters.real_time_counter - counters.idle_time_counter) >= (36000000)) || program_state.uncleared_error)
    3416:	20 91 f8 24 	lds	r18, 0x24F8	; 0x8024f8 <counters+0x14>
    341a:	30 91 f9 24 	lds	r19, 0x24F9	; 0x8024f9 <counters+0x15>
    341e:	40 91 fa 24 	lds	r20, 0x24FA	; 0x8024fa <counters+0x16>
    3422:	50 91 fb 24 	lds	r21, 0x24FB	; 0x8024fb <counters+0x17>
    3426:	60 91 fc 24 	lds	r22, 0x24FC	; 0x8024fc <counters+0x18>
    342a:	70 91 fd 24 	lds	r23, 0x24FD	; 0x8024fd <counters+0x19>
    342e:	80 91 fe 24 	lds	r24, 0x24FE	; 0x8024fe <counters+0x1a>
    3432:	90 91 ff 24 	lds	r25, 0x24FF	; 0x8024ff <counters+0x1b>
    3436:	a0 90 f0 24 	lds	r10, 0x24F0	; 0x8024f0 <counters+0xc>
    343a:	b0 90 f1 24 	lds	r11, 0x24F1	; 0x8024f1 <counters+0xd>
    343e:	c0 90 f2 24 	lds	r12, 0x24F2	; 0x8024f2 <counters+0xe>
    3442:	d0 90 f3 24 	lds	r13, 0x24F3	; 0x8024f3 <counters+0xf>
    3446:	e0 90 f4 24 	lds	r14, 0x24F4	; 0x8024f4 <counters+0x10>
    344a:	f0 90 f5 24 	lds	r15, 0x24F5	; 0x8024f5 <counters+0x11>
    344e:	00 91 f6 24 	lds	r16, 0x24F6	; 0x8024f6 <counters+0x12>
    3452:	10 91 f7 24 	lds	r17, 0x24F7	; 0x8024f7 <counters+0x13>
    3456:	0e 94 ae 38 	call	0x715c	; 0x715c <__subdi3>
    345a:	2f 3f       	cpi	r18, 0xFF	; 255
    345c:	30 45       	sbci	r19, 0x50	; 80
    345e:	45 42       	sbci	r20, 0x25	; 37
    3460:	52 40       	sbci	r21, 0x02	; 2
    3462:	61 05       	cpc	r22, r1
    3464:	71 05       	cpc	r23, r1
    3466:	81 05       	cpc	r24, r1
    3468:	91 05       	cpc	r25, r1
    346a:	09 f0       	breq	.+2      	; 0x346e <execute_maintenance_functions+0x204>
    346c:	20 f4       	brcc	.+8      	; 0x3476 <execute_maintenance_functions+0x20c>
    346e:	80 91 ea 23 	lds	r24, 0x23EA	; 0x8023ea <program_state+0x6>
    3472:	88 23       	and	r24, r24
    3474:	51 f0       	breq	.+20     	; 0x348a <execute_maintenance_functions+0x220>
		{
			output->set_current_state = VISIBLE_LOCKED;
    3476:	82 e0       	ldi	r24, 0x02	; 2
    3478:	d4 01       	movw	r26, r8
    347a:	1f 96       	adiw	r26, 0x0f	; 15
    347c:	8c 93       	st	X, r24
			program_state.output = &output_two;
    347e:	81 e2       	ldi	r24, 0x21	; 33
    3480:	94 e2       	ldi	r25, 0x24	; 36
    3482:	80 93 17 24 	sts	0x2417, r24	; 0x802417 <program_state+0x33>
    3486:	90 93 18 24 	sts	0x2418, r25	; 0x802418 <program_state+0x34>
		}
	
		if(!program_state.changing_settings && !(output->voltage > 4000 && output->current < 4) && // set current only if on "Set CUrrent" page and if the load is not open
    348a:	80 91 e6 23 	lds	r24, 0x23E6	; 0x8023e6 <program_state+0x2>
    348e:	10 91 0c 24 	lds	r17, 0x240C	; 0x80240c <program_state+0x28>
    3492:	81 11       	cpse	r24, r1
    3494:	36 c1       	rjmp	.+620    	; 0x3702 <execute_maintenance_functions+0x498>
    3496:	f4 01       	movw	r30, r8
    3498:	80 8d       	ldd	r24, Z+24	; 0x18
    349a:	91 8d       	ldd	r25, Z+25	; 0x19
    349c:	81 3a       	cpi	r24, 0xA1	; 161
    349e:	ff e0       	ldi	r31, 0x0F	; 15
    34a0:	9f 07       	cpc	r25, r31
    34a2:	48 f0       	brcs	.+18     	; 0x34b6 <execute_maintenance_functions+0x24c>
    34a4:	d4 01       	movw	r26, r8
    34a6:	56 96       	adiw	r26, 0x16	; 22
    34a8:	2d 91       	ld	r18, X+
    34aa:	3c 91       	ld	r19, X
    34ac:	57 97       	sbiw	r26, 0x17	; 23
    34ae:	24 30       	cpi	r18, 0x04	; 4
    34b0:	31 05       	cpc	r19, r1
    34b2:	08 f4       	brcc	.+2      	; 0x34b6 <execute_maintenance_functions+0x24c>
    34b4:	26 c1       	rjmp	.+588    	; 0x3702 <execute_maintenance_functions+0x498>
    34b6:	11 11       	cpse	r17, r1
    34b8:	24 c1       	rjmp	.+584    	; 0x3702 <execute_maintenance_functions+0x498>
		!(program_state.comm_error1_to_display || program_state.comm_error2_to_display ||          // (voltage is not max && current is not zero) and if no comm errors and if unit is
    34ba:	20 91 0d 24 	lds	r18, 0x240D	; 0x80240d <program_state+0x29>
    34be:	21 11       	cpse	r18, r1
    34c0:	22 c1       	rjmp	.+580    	; 0x3706 <execute_maintenance_functions+0x49c>
    34c2:	20 91 0e 24 	lds	r18, 0x240E	; 0x80240e <program_state+0x2a>
    34c6:	21 11       	cpse	r18, r1
    34c8:	1e c1       	rjmp	.+572    	; 0x3706 <execute_maintenance_functions+0x49c>
		program_state.comm_error3_to_display || program_state.comm_error4_to_display ||            // not powering down (which happens when the current and voltage are zero and
    34ca:	20 91 0f 24 	lds	r18, 0x240F	; 0x80240f <program_state+0x2b>
    34ce:	21 11       	cpse	r18, r1
    34d0:	1a c1       	rjmp	.+564    	; 0x3706 <execute_maintenance_functions+0x49c>
    34d2:	20 91 10 24 	lds	r18, 0x2410	; 0x802410 <program_state+0x2c>
    34d6:	21 11       	cpse	r18, r1
    34d8:	16 c1       	rjmp	.+556    	; 0x3706 <execute_maintenance_functions+0x49c>
			output->set_current_state = VISIBLE_LOCKED;
			program_state.output = &output_two;
		}
	
		if(!program_state.changing_settings && !(output->voltage > 4000 && output->current < 4) && // set current only if on "Set CUrrent" page and if the load is not open
		!(program_state.comm_error1_to_display || program_state.comm_error2_to_display ||          // (voltage is not max && current is not zero) and if no comm errors and if unit is
    34da:	20 91 11 24 	lds	r18, 0x2411	; 0x802411 <program_state+0x2d>
    34de:	21 11       	cpse	r18, r1
    34e0:	12 c1       	rjmp	.+548    	; 0x3706 <execute_maintenance_functions+0x49c>
		program_state.comm_error3_to_display || program_state.comm_error4_to_display ||            // not powering down (which happens when the current and voltage are zero and
		program_state.comm_error5_to_display || program_state.comm_error6_to_display) &&           // PWM with desired current are not zero).
    34e2:	f4 01       	movw	r30, r8
    34e4:	22 8d       	ldd	r18, Z+26	; 0x1a
    34e6:	33 8d       	ldd	r19, Z+27	; 0x1b
    34e8:	2f 31       	cpi	r18, 0x1F	; 31
    34ea:	31 05       	cpc	r19, r1
    34ec:	a8 f1       	brcs	.+106    	; 0x3558 <execute_maintenance_functions+0x2ee>
		!(output->pwm_value > 30 && output->voltage < 4 && output->current < 4 && 
    34ee:	04 97       	sbiw	r24, 0x04	; 4
    34f0:	98 f5       	brcc	.+102    	; 0x3558 <execute_maintenance_functions+0x2ee>
    34f2:	86 89       	ldd	r24, Z+22	; 0x16
    34f4:	97 89       	ldd	r25, Z+23	; 0x17
    34f6:	04 97       	sbiw	r24, 0x04	; 4
    34f8:	78 f5       	brcc	.+94     	; 0x3558 <execute_maintenance_functions+0x2ee>
		MIN(output->target_current * output->reduced_current_fraction, output->max_current) > 0))
    34fa:	60 89       	ldd	r22, Z+16	; 0x10
    34fc:	71 89       	ldd	r23, Z+17	; 0x11
    34fe:	80 e0       	ldi	r24, 0x00	; 0
    3500:	90 e0       	ldi	r25, 0x00	; 0
    3502:	0e 94 e4 35 	call	0x6bc8	; 0x6bc8 <__floatunsisf>
    3506:	d4 01       	movw	r26, r8
    3508:	93 96       	adiw	r26, 0x23	; 35
    350a:	2d 91       	ld	r18, X+
    350c:	3d 91       	ld	r19, X+
    350e:	4d 91       	ld	r20, X+
    3510:	5c 91       	ld	r21, X
    3512:	96 97       	sbiw	r26, 0x26	; 38
    3514:	0e 94 f3 36 	call	0x6de6	; 0x6de6 <__mulsf3>
    3518:	6b 01       	movw	r12, r22
    351a:	7c 01       	movw	r14, r24
    351c:	f4 01       	movw	r30, r8
    351e:	62 89       	ldd	r22, Z+18	; 0x12
    3520:	73 89       	ldd	r23, Z+19	; 0x13
    3522:	80 e0       	ldi	r24, 0x00	; 0
    3524:	90 e0       	ldi	r25, 0x00	; 0
    3526:	0e 94 e4 35 	call	0x6bc8	; 0x6bc8 <__floatunsisf>
    352a:	2b 01       	movw	r4, r22
    352c:	3c 01       	movw	r6, r24
		{
			output->set_current_state = VISIBLE_LOCKED;
			program_state.output = &output_two;
		}
	
		if(!program_state.changing_settings && !(output->voltage > 4000 && output->current < 4) && // set current only if on "Set CUrrent" page and if the load is not open
    352e:	9b 01       	movw	r18, r22
    3530:	ac 01       	movw	r20, r24
    3532:	c7 01       	movw	r24, r14
    3534:	b6 01       	movw	r22, r12
    3536:	0e 94 37 35 	call	0x6a6e	; 0x6a6e <__cmpsf2>
		!(program_state.comm_error1_to_display || program_state.comm_error2_to_display ||          // (voltage is not max && current is not zero) and if no comm errors and if unit is
		program_state.comm_error3_to_display || program_state.comm_error4_to_display ||            // not powering down (which happens when the current and voltage are zero and
		program_state.comm_error5_to_display || program_state.comm_error6_to_display) &&           // PWM with desired current are not zero).
		!(output->pwm_value > 30 && output->voltage < 4 && output->current < 4 && 
    353a:	20 e0       	ldi	r18, 0x00	; 0
    353c:	30 e0       	ldi	r19, 0x00	; 0
    353e:	a9 01       	movw	r20, r18
		{
			output->set_current_state = VISIBLE_LOCKED;
			program_state.output = &output_two;
		}
	
		if(!program_state.changing_settings && !(output->voltage > 4000 && output->current < 4) && // set current only if on "Set CUrrent" page and if the load is not open
    3540:	87 ff       	sbrs	r24, 7
    3542:	03 c0       	rjmp	.+6      	; 0x354a <execute_maintenance_functions+0x2e0>
		!(program_state.comm_error1_to_display || program_state.comm_error2_to_display ||          // (voltage is not max && current is not zero) and if no comm errors and if unit is
		program_state.comm_error3_to_display || program_state.comm_error4_to_display ||            // not powering down (which happens when the current and voltage are zero and
		program_state.comm_error5_to_display || program_state.comm_error6_to_display) &&           // PWM with desired current are not zero).
		!(output->pwm_value > 30 && output->voltage < 4 && output->current < 4 && 
    3544:	c7 01       	movw	r24, r14
    3546:	b6 01       	movw	r22, r12
    3548:	02 c0       	rjmp	.+4      	; 0x354e <execute_maintenance_functions+0x2e4>
		MIN(output->target_current * output->reduced_current_fraction, output->max_current) > 0))
    354a:	c3 01       	movw	r24, r6
    354c:	b2 01       	movw	r22, r4
    354e:	0e 94 96 36 	call	0x6d2c	; 0x6d2c <__gesf2>
    3552:	18 16       	cp	r1, r24
    3554:	0c f4       	brge	.+2      	; 0x3558 <execute_maintenance_functions+0x2ee>
    3556:	d7 c0       	rjmp	.+430    	; 0x3706 <execute_maintenance_functions+0x49c>
		{
			//**************************************************
			wdt_reset(); // WATCH DOG TIMER RESET
    3558:	a8 95       	wdr
			//**************************************************
			set_current(output);
    355a:	c4 01       	movw	r24, r8
    355c:	0e 94 42 2e 	call	0x5c84	; 0x5c84 <set_current>
			
			//**************************************************
			wdt_reset(); // WATCH DOG TIMER RESET
    3560:	a8 95       	wdr
			//**************************************************
		
			output->write_to_dummy_dac(output->dac_value, output->dummy_dac_address);
    3562:	d4 01       	movw	r26, r8
    3564:	d4 96       	adiw	r26, 0x34	; 52
    3566:	ed 91       	ld	r30, X+
    3568:	fc 91       	ld	r31, X
    356a:	d5 97       	sbiw	r26, 0x35	; 53
    356c:	de 96       	adiw	r26, 0x3e	; 62
    356e:	6c 91       	ld	r22, X
    3570:	de 97       	sbiw	r26, 0x3e	; 62
    3572:	5c 96       	adiw	r26, 0x1c	; 28
    3574:	8d 91       	ld	r24, X+
    3576:	9c 91       	ld	r25, X
    3578:	5d 97       	sbiw	r26, 0x1d	; 29
    357a:	09 95       	icall
			if (program_state.program == FOURTY_ONE)
    357c:	20 91 e8 23 	lds	r18, 0x23E8	; 0x8023e8 <program_state+0x4>
    3580:	80 91 bd 24 	lds	r24, 0x24BD	; 0x8024bd <output_one+0x1a>
    3584:	90 91 be 24 	lds	r25, 0x24BE	; 0x8024be <output_one+0x1b>
    3588:	d4 01       	movw	r26, r8
    358a:	d2 96       	adiw	r26, 0x32	; 50
    358c:	ed 91       	ld	r30, X+
    358e:	fc 91       	ld	r31, X
    3590:	d3 97       	sbiw	r26, 0x33	; 51
    3592:	21 30       	cpi	r18, 0x01	; 1
    3594:	61 f4       	brne	.+24     	; 0x35ae <execute_maintenance_functions+0x344>
			{
				output->set_pwm(output_one.pwm_value, output_one.pwm_value, output_one.isChanelused1, output_two.isChanelused2, output_two.isChanelused1, output_one.isChanelused2, BOARD_41EC_ADDR);
    3596:	3c e4       	ldi	r19, 0x4C	; 76
    3598:	c3 2e       	mov	r12, r19
    359a:	e0 90 cf 24 	lds	r14, 0x24CF	; 0x8024cf <output_one+0x2c>
    359e:	00 91 4c 24 	lds	r16, 0x244C	; 0x80244c <output_two+0x2b>
    35a2:	20 91 4d 24 	lds	r18, 0x244D	; 0x80244d <output_two+0x2c>
    35a6:	40 91 ce 24 	lds	r20, 0x24CE	; 0x8024ce <output_one+0x2b>
    35aa:	bc 01       	movw	r22, r24
    35ac:	0e c0       	rjmp	.+28     	; 0x35ca <execute_maintenance_functions+0x360>
			}
			else
			{
				output->set_pwm(output_one.pwm_value, output_two.pwm_value, output_one.isChanelused1, output_two.isChanelused2, output_two.isChanelused1, output_one.isChanelused2, BOARD_41EC_ADDR);
    35ae:	60 91 3b 24 	lds	r22, 0x243B	; 0x80243b <output_two+0x1a>
    35b2:	70 91 3c 24 	lds	r23, 0x243C	; 0x80243c <output_two+0x1b>
    35b6:	2c e4       	ldi	r18, 0x4C	; 76
    35b8:	c2 2e       	mov	r12, r18
    35ba:	e0 90 cf 24 	lds	r14, 0x24CF	; 0x8024cf <output_one+0x2c>
    35be:	00 91 4c 24 	lds	r16, 0x244C	; 0x80244c <output_two+0x2b>
    35c2:	20 91 4d 24 	lds	r18, 0x244D	; 0x80244d <output_two+0x2c>
    35c6:	40 91 ce 24 	lds	r20, 0x24CE	; 0x8024ce <output_one+0x2b>
    35ca:	09 95       	icall
    35cc:	bf e7       	ldi	r27, 0x7F	; 127
    35ce:	ea e1       	ldi	r30, 0x1A	; 26
    35d0:	f6 e0       	ldi	r31, 0x06	; 6
    35d2:	b1 50       	subi	r27, 0x01	; 1
    35d4:	e0 40       	sbci	r30, 0x00	; 0
    35d6:	f0 40       	sbci	r31, 0x00	; 0
    35d8:	e1 f7       	brne	.-8      	; 0x35d2 <execute_maintenance_functions+0x368>
    35da:	00 c0       	rjmp	.+0      	; 0x35dc <execute_maintenance_functions+0x372>
    35dc:	00 00       	nop
			}
			_delay_ms(100);
			if(output->over_temp_error1 == FALSE && output->over_temp_error2 == FALSE && output->over_temp_half_second_count == 0)//should only check for voltage drift when there is no over-temperature error
    35de:	d4 01       	movw	r26, r8
    35e0:	19 96       	adiw	r26, 0x09	; 9
    35e2:	8c 91       	ld	r24, X
    35e4:	19 97       	sbiw	r26, 0x09	; 9
    35e6:	81 11       	cpse	r24, r1
    35e8:	32 c1       	rjmp	.+612    	; 0x384e <execute_maintenance_functions+0x5e4>
    35ea:	1a 96       	adiw	r26, 0x0a	; 10
    35ec:	8c 91       	ld	r24, X
    35ee:	1a 97       	sbiw	r26, 0x0a	; 10
    35f0:	81 11       	cpse	r24, r1
    35f2:	2d c1       	rjmp	.+602    	; 0x384e <execute_maintenance_functions+0x5e4>
    35f4:	da 96       	adiw	r26, 0x3a	; 58
    35f6:	8d 91       	ld	r24, X+
    35f8:	9c 91       	ld	r25, X
    35fa:	db 97       	sbiw	r26, 0x3b	; 59
    35fc:	89 2b       	or	r24, r25
    35fe:	09 f0       	breq	.+2      	; 0x3602 <execute_maintenance_functions+0x398>
    3600:	26 c1       	rjmp	.+588    	; 0x384e <execute_maintenance_functions+0x5e4>
			{
				if (abs(MIN(output->target_current * output->reduced_current_fraction, output->max_current) - output->current) > MIN_ACCURACY && (counters.real_time_counter - counters.idle_time_counter) > 4000 && !output->hit_min_current && !output->hit_max_voltage && !output->hit_max_current)
    3602:	50 96       	adiw	r26, 0x10	; 16
    3604:	6d 91       	ld	r22, X+
    3606:	7c 91       	ld	r23, X
    3608:	51 97       	sbiw	r26, 0x11	; 17
    360a:	80 e0       	ldi	r24, 0x00	; 0
    360c:	90 e0       	ldi	r25, 0x00	; 0
    360e:	0e 94 e4 35 	call	0x6bc8	; 0x6bc8 <__floatunsisf>
    3612:	f4 01       	movw	r30, r8
    3614:	23 a1       	ldd	r18, Z+35	; 0x23
    3616:	34 a1       	ldd	r19, Z+36	; 0x24
    3618:	45 a1       	ldd	r20, Z+37	; 0x25
    361a:	56 a1       	ldd	r21, Z+38	; 0x26
    361c:	0e 94 f3 36 	call	0x6de6	; 0x6de6 <__mulsf3>
    3620:	7b 01       	movw	r14, r22
    3622:	8c 01       	movw	r16, r24
    3624:	d4 01       	movw	r26, r8
    3626:	52 96       	adiw	r26, 0x12	; 18
    3628:	6d 91       	ld	r22, X+
    362a:	7c 91       	ld	r23, X
    362c:	53 97       	sbiw	r26, 0x13	; 19
    362e:	80 e0       	ldi	r24, 0x00	; 0
    3630:	90 e0       	ldi	r25, 0x00	; 0
    3632:	0e 94 e4 35 	call	0x6bc8	; 0x6bc8 <__floatunsisf>
    3636:	5b 01       	movw	r10, r22
    3638:	6c 01       	movw	r12, r24
    363a:	9b 01       	movw	r18, r22
    363c:	ac 01       	movw	r20, r24
    363e:	b7 01       	movw	r22, r14
    3640:	c8 01       	movw	r24, r16
    3642:	0e 94 37 35 	call	0x6a6e	; 0x6a6e <__cmpsf2>
    3646:	87 fd       	sbrc	r24, 7
    3648:	02 c0       	rjmp	.+4      	; 0x364e <execute_maintenance_functions+0x3e4>
    364a:	75 01       	movw	r14, r10
    364c:	86 01       	movw	r16, r12
    364e:	f4 01       	movw	r30, r8
    3650:	66 89       	ldd	r22, Z+22	; 0x16
    3652:	77 89       	ldd	r23, Z+23	; 0x17
    3654:	80 e0       	ldi	r24, 0x00	; 0
    3656:	90 e0       	ldi	r25, 0x00	; 0
    3658:	0e 94 e4 35 	call	0x6bc8	; 0x6bc8 <__floatunsisf>
    365c:	9b 01       	movw	r18, r22
    365e:	ac 01       	movw	r20, r24
    3660:	b7 01       	movw	r22, r14
    3662:	c8 01       	movw	r24, r16
    3664:	0e 94 ca 34 	call	0x6994	; 0x6994 <__subsf3>
    3668:	0e 94 ae 35 	call	0x6b5c	; 0x6b5c <__fixsfsi>
    366c:	9b 01       	movw	r18, r22
    366e:	77 ff       	sbrs	r23, 7
    3670:	04 c0       	rjmp	.+8      	; 0x367a <execute_maintenance_functions+0x410>
    3672:	22 27       	eor	r18, r18
    3674:	33 27       	eor	r19, r19
    3676:	26 1b       	sub	r18, r22
    3678:	37 0b       	sbc	r19, r23
    367a:	22 30       	cpi	r18, 0x02	; 2
    367c:	31 05       	cpc	r19, r1
    367e:	0c f4       	brge	.+2      	; 0x3682 <execute_maintenance_functions+0x418>
    3680:	e6 c0       	rjmp	.+460    	; 0x384e <execute_maintenance_functions+0x5e4>
    3682:	20 91 f8 24 	lds	r18, 0x24F8	; 0x8024f8 <counters+0x14>
    3686:	30 91 f9 24 	lds	r19, 0x24F9	; 0x8024f9 <counters+0x15>
    368a:	40 91 fa 24 	lds	r20, 0x24FA	; 0x8024fa <counters+0x16>
    368e:	50 91 fb 24 	lds	r21, 0x24FB	; 0x8024fb <counters+0x17>
    3692:	60 91 fc 24 	lds	r22, 0x24FC	; 0x8024fc <counters+0x18>
    3696:	70 91 fd 24 	lds	r23, 0x24FD	; 0x8024fd <counters+0x19>
    369a:	80 91 fe 24 	lds	r24, 0x24FE	; 0x8024fe <counters+0x1a>
    369e:	90 91 ff 24 	lds	r25, 0x24FF	; 0x8024ff <counters+0x1b>
    36a2:	a0 90 f0 24 	lds	r10, 0x24F0	; 0x8024f0 <counters+0xc>
    36a6:	b0 90 f1 24 	lds	r11, 0x24F1	; 0x8024f1 <counters+0xd>
    36aa:	c0 90 f2 24 	lds	r12, 0x24F2	; 0x8024f2 <counters+0xe>
    36ae:	d0 90 f3 24 	lds	r13, 0x24F3	; 0x8024f3 <counters+0xf>
    36b2:	e0 90 f4 24 	lds	r14, 0x24F4	; 0x8024f4 <counters+0x10>
    36b6:	f0 90 f5 24 	lds	r15, 0x24F5	; 0x8024f5 <counters+0x11>
    36ba:	00 91 f6 24 	lds	r16, 0x24F6	; 0x8024f6 <counters+0x12>
    36be:	10 91 f7 24 	lds	r17, 0x24F7	; 0x8024f7 <counters+0x13>
    36c2:	0e 94 ae 38 	call	0x715c	; 0x715c <__subdi3>
    36c6:	20 3a       	cpi	r18, 0xA0	; 160
    36c8:	3f 40       	sbci	r19, 0x0F	; 15
    36ca:	41 05       	cpc	r20, r1
    36cc:	51 05       	cpc	r21, r1
    36ce:	61 05       	cpc	r22, r1
    36d0:	71 05       	cpc	r23, r1
    36d2:	81 05       	cpc	r24, r1
    36d4:	91 05       	cpc	r25, r1
    36d6:	09 f0       	breq	.+2      	; 0x36da <execute_maintenance_functions+0x470>
    36d8:	08 f4       	brcc	.+2      	; 0x36dc <execute_maintenance_functions+0x472>
    36da:	b9 c0       	rjmp	.+370    	; 0x384e <execute_maintenance_functions+0x5e4>
    36dc:	d4 01       	movw	r26, r8
    36de:	16 96       	adiw	r26, 0x06	; 6
    36e0:	8c 91       	ld	r24, X
    36e2:	16 97       	sbiw	r26, 0x06	; 6
    36e4:	81 11       	cpse	r24, r1
    36e6:	b3 c0       	rjmp	.+358    	; 0x384e <execute_maintenance_functions+0x5e4>
    36e8:	17 96       	adiw	r26, 0x07	; 7
    36ea:	8c 91       	ld	r24, X
    36ec:	17 97       	sbiw	r26, 0x07	; 7
    36ee:	81 11       	cpse	r24, r1
    36f0:	ae c0       	rjmp	.+348    	; 0x384e <execute_maintenance_functions+0x5e4>
    36f2:	15 96       	adiw	r26, 0x05	; 5
    36f4:	8c 91       	ld	r24, X
    36f6:	81 11       	cpse	r24, r1
    36f8:	aa c0       	rjmp	.+340    	; 0x384e <execute_maintenance_functions+0x5e4>
				{
					calibrate_value(output);
    36fa:	c4 01       	movw	r24, r8
    36fc:	0e 94 e1 2b 	call	0x57c2	; 0x57c2 <calibrate_value>
    3700:	a6 c0       	rjmp	.+332    	; 0x384e <execute_maintenance_functions+0x5e4>
				}
			}
		}
		else
		{
			if (program_state.comm_error1_to_display || program_state.comm_error2_to_display ||
    3702:	11 11       	cpse	r17, r1
    3704:	15 c0       	rjmp	.+42     	; 0x3730 <execute_maintenance_functions+0x4c6>
    3706:	80 91 0d 24 	lds	r24, 0x240D	; 0x80240d <program_state+0x29>
    370a:	81 11       	cpse	r24, r1
    370c:	11 c0       	rjmp	.+34     	; 0x3730 <execute_maintenance_functions+0x4c6>
    370e:	80 91 0e 24 	lds	r24, 0x240E	; 0x80240e <program_state+0x2a>
    3712:	81 11       	cpse	r24, r1
    3714:	0d c0       	rjmp	.+26     	; 0x3730 <execute_maintenance_functions+0x4c6>
			program_state.comm_error3_to_display || program_state.comm_error4_to_display ||
    3716:	80 91 0f 24 	lds	r24, 0x240F	; 0x80240f <program_state+0x2b>
    371a:	81 11       	cpse	r24, r1
    371c:	09 c0       	rjmp	.+18     	; 0x3730 <execute_maintenance_functions+0x4c6>
    371e:	80 91 10 24 	lds	r24, 0x2410	; 0x802410 <program_state+0x2c>
    3722:	81 11       	cpse	r24, r1
    3724:	05 c0       	rjmp	.+10     	; 0x3730 <execute_maintenance_functions+0x4c6>
			program_state.comm_error5_to_display || program_state.comm_error6_to_display)
    3726:	80 91 11 24 	lds	r24, 0x2411	; 0x802411 <program_state+0x2d>
    372a:	88 23       	and	r24, r24
    372c:	09 f4       	brne	.+2      	; 0x3730 <execute_maintenance_functions+0x4c6>
    372e:	8f c0       	rjmp	.+286    	; 0x384e <execute_maintenance_functions+0x5e4>
			{
				char message[1] = {0};
    3730:	19 82       	std	Y+1, r1	; 0x01
				
				if (program_state.comm_error1_to_display)
    3732:	11 23       	and	r17, r17
    3734:	a1 f0       	breq	.+40     	; 0x375e <execute_maintenance_functions+0x4f4>
				{
					if(!TWI_MasterWrite(&twiMaster, OUTPUT1_INA226_ADDR, (uint8_t *) message, 1))
    3736:	21 e0       	ldi	r18, 0x01	; 1
    3738:	ae 01       	movw	r20, r28
    373a:	4f 5f       	subi	r20, 0xFF	; 255
    373c:	5f 4f       	sbci	r21, 0xFF	; 255
    373e:	61 e4       	ldi	r22, 0x41	; 65
    3740:	88 e6       	ldi	r24, 0x68	; 104
    3742:	94 e2       	ldi	r25, 0x24	; 36
    3744:	0e 94 62 33 	call	0x66c4	; 0x66c4 <TWI_MasterWrite>
    3748:	81 11       	cpse	r24, r1
    374a:	09 c0       	rjmp	.+18     	; 0x375e <execute_maintenance_functions+0x4f4>
					{
						counters.i2c_error_counter++;
    374c:	80 91 0e 25 	lds	r24, 0x250E	; 0x80250e <counters+0x2a>
    3750:	90 91 0f 25 	lds	r25, 0x250F	; 0x80250f <counters+0x2b>
    3754:	01 96       	adiw	r24, 0x01	; 1
    3756:	80 93 0e 25 	sts	0x250E, r24	; 0x80250e <counters+0x2a>
    375a:	90 93 0f 25 	sts	0x250F, r25	; 0x80250f <counters+0x2b>
					}
				}
				if (program_state.comm_error2_to_display)
    375e:	80 91 0d 24 	lds	r24, 0x240D	; 0x80240d <program_state+0x29>
    3762:	88 23       	and	r24, r24
    3764:	a1 f0       	breq	.+40     	; 0x378e <execute_maintenance_functions+0x524>
				{
					if(!TWI_MasterWrite(&twiMaster, OUTPUT2_INA226_ADDR, (uint8_t *) message, 1))
    3766:	21 e0       	ldi	r18, 0x01	; 1
    3768:	ae 01       	movw	r20, r28
    376a:	4f 5f       	subi	r20, 0xFF	; 255
    376c:	5f 4f       	sbci	r21, 0xFF	; 255
    376e:	60 e4       	ldi	r22, 0x40	; 64
    3770:	88 e6       	ldi	r24, 0x68	; 104
    3772:	94 e2       	ldi	r25, 0x24	; 36
    3774:	0e 94 62 33 	call	0x66c4	; 0x66c4 <TWI_MasterWrite>
    3778:	81 11       	cpse	r24, r1
    377a:	09 c0       	rjmp	.+18     	; 0x378e <execute_maintenance_functions+0x524>
					{
						counters.i2c_error_counter++;
    377c:	80 91 0e 25 	lds	r24, 0x250E	; 0x80250e <counters+0x2a>
    3780:	90 91 0f 25 	lds	r25, 0x250F	; 0x80250f <counters+0x2b>
    3784:	01 96       	adiw	r24, 0x01	; 1
    3786:	80 93 0e 25 	sts	0x250E, r24	; 0x80250e <counters+0x2a>
    378a:	90 93 0f 25 	sts	0x250F, r25	; 0x80250f <counters+0x2b>
					}
				}
				if (program_state.comm_error3_to_display)
    378e:	80 91 0e 24 	lds	r24, 0x240E	; 0x80240e <program_state+0x2a>
    3792:	88 23       	and	r24, r24
    3794:	a1 f0       	breq	.+40     	; 0x37be <execute_maintenance_functions+0x554>
				{
					if(!TWI_MasterWrite(&twiMaster, OUTPUT1_DAC101C085_ADDR, (uint8_t *) message, 1))
    3796:	21 e0       	ldi	r18, 0x01	; 1
    3798:	ae 01       	movw	r20, r28
    379a:	4f 5f       	subi	r20, 0xFF	; 255
    379c:	5f 4f       	sbci	r21, 0xFF	; 255
    379e:	6a e0       	ldi	r22, 0x0A	; 10
    37a0:	88 e6       	ldi	r24, 0x68	; 104
    37a2:	94 e2       	ldi	r25, 0x24	; 36
    37a4:	0e 94 62 33 	call	0x66c4	; 0x66c4 <TWI_MasterWrite>
    37a8:	81 11       	cpse	r24, r1
    37aa:	09 c0       	rjmp	.+18     	; 0x37be <execute_maintenance_functions+0x554>
					{
						counters.i2c_error_counter++;
    37ac:	80 91 0e 25 	lds	r24, 0x250E	; 0x80250e <counters+0x2a>
    37b0:	90 91 0f 25 	lds	r25, 0x250F	; 0x80250f <counters+0x2b>
    37b4:	01 96       	adiw	r24, 0x01	; 1
    37b6:	80 93 0e 25 	sts	0x250E, r24	; 0x80250e <counters+0x2a>
    37ba:	90 93 0f 25 	sts	0x250F, r25	; 0x80250f <counters+0x2b>
					}
				}
				if (program_state.comm_error4_to_display)
    37be:	80 91 0f 24 	lds	r24, 0x240F	; 0x80240f <program_state+0x2b>
    37c2:	88 23       	and	r24, r24
    37c4:	a1 f0       	breq	.+40     	; 0x37ee <execute_maintenance_functions+0x584>
				{
					if(!TWI_MasterWrite(&twiMaster, OUTPUT2_DAC101C085_ADDR, (uint8_t *) message, 1))
    37c6:	21 e0       	ldi	r18, 0x01	; 1
    37c8:	ae 01       	movw	r20, r28
    37ca:	4f 5f       	subi	r20, 0xFF	; 255
    37cc:	5f 4f       	sbci	r21, 0xFF	; 255
    37ce:	69 e0       	ldi	r22, 0x09	; 9
    37d0:	88 e6       	ldi	r24, 0x68	; 104
    37d2:	94 e2       	ldi	r25, 0x24	; 36
    37d4:	0e 94 62 33 	call	0x66c4	; 0x66c4 <TWI_MasterWrite>
    37d8:	81 11       	cpse	r24, r1
    37da:	09 c0       	rjmp	.+18     	; 0x37ee <execute_maintenance_functions+0x584>
					{
						counters.i2c_error_counter++;
    37dc:	80 91 0e 25 	lds	r24, 0x250E	; 0x80250e <counters+0x2a>
    37e0:	90 91 0f 25 	lds	r25, 0x250F	; 0x80250f <counters+0x2b>
    37e4:	01 96       	adiw	r24, 0x01	; 1
    37e6:	80 93 0e 25 	sts	0x250E, r24	; 0x80250e <counters+0x2a>
    37ea:	90 93 0f 25 	sts	0x250F, r25	; 0x80250f <counters+0x2b>
					}
				}
				if (program_state.comm_error5_to_display)
    37ee:	80 91 10 24 	lds	r24, 0x2410	; 0x802410 <program_state+0x2c>
    37f2:	88 23       	and	r24, r24
    37f4:	a1 f0       	breq	.+40     	; 0x381e <execute_maintenance_functions+0x5b4>
				{
					if(!TWI_MasterWrite(&twiMaster, BOARD_41EC_ADDR, (uint8_t *) message, 1))
    37f6:	21 e0       	ldi	r18, 0x01	; 1
    37f8:	ae 01       	movw	r20, r28
    37fa:	4f 5f       	subi	r20, 0xFF	; 255
    37fc:	5f 4f       	sbci	r21, 0xFF	; 255
    37fe:	6c e4       	ldi	r22, 0x4C	; 76
    3800:	88 e6       	ldi	r24, 0x68	; 104
    3802:	94 e2       	ldi	r25, 0x24	; 36
    3804:	0e 94 62 33 	call	0x66c4	; 0x66c4 <TWI_MasterWrite>
    3808:	81 11       	cpse	r24, r1
    380a:	09 c0       	rjmp	.+18     	; 0x381e <execute_maintenance_functions+0x5b4>
					{
						counters.i2c_error_counter++;
    380c:	80 91 0e 25 	lds	r24, 0x250E	; 0x80250e <counters+0x2a>
    3810:	90 91 0f 25 	lds	r25, 0x250F	; 0x80250f <counters+0x2b>
    3814:	01 96       	adiw	r24, 0x01	; 1
    3816:	80 93 0e 25 	sts	0x250E, r24	; 0x80250e <counters+0x2a>
    381a:	90 93 0f 25 	sts	0x250F, r25	; 0x80250f <counters+0x2b>
					}
				}
				if (program_state.comm_error6_to_display)
    381e:	80 91 11 24 	lds	r24, 0x2411	; 0x802411 <program_state+0x2d>
    3822:	88 23       	and	r24, r24
    3824:	a1 f0       	breq	.+40     	; 0x384e <execute_maintenance_functions+0x5e4>
				{
					if(!TWI_MasterWrite(&twiMaster, EXTERNAL_EEPROM_ADDR, (uint8_t *) message, 1))
    3826:	21 e0       	ldi	r18, 0x01	; 1
    3828:	ae 01       	movw	r20, r28
    382a:	4f 5f       	subi	r20, 0xFF	; 255
    382c:	5f 4f       	sbci	r21, 0xFF	; 255
    382e:	61 e5       	ldi	r22, 0x51	; 81
    3830:	88 e6       	ldi	r24, 0x68	; 104
    3832:	94 e2       	ldi	r25, 0x24	; 36
    3834:	0e 94 62 33 	call	0x66c4	; 0x66c4 <TWI_MasterWrite>
    3838:	81 11       	cpse	r24, r1
    383a:	09 c0       	rjmp	.+18     	; 0x384e <execute_maintenance_functions+0x5e4>
					{
						counters.i2c_error_counter++;
    383c:	80 91 0e 25 	lds	r24, 0x250E	; 0x80250e <counters+0x2a>
    3840:	90 91 0f 25 	lds	r25, 0x250F	; 0x80250f <counters+0x2b>
    3844:	01 96       	adiw	r24, 0x01	; 1
    3846:	80 93 0e 25 	sts	0x250E, r24	; 0x80250e <counters+0x2a>
    384a:	90 93 0f 25 	sts	0x250F, r25	; 0x80250f <counters+0x2b>
				}
			
			}
		}
	}
}
    384e:	28 96       	adiw	r28, 0x08	; 8
    3850:	cd bf       	out	0x3d, r28	; 61
    3852:	de bf       	out	0x3e, r29	; 62
    3854:	df 91       	pop	r29
    3856:	cf 91       	pop	r28
    3858:	1f 91       	pop	r17
    385a:	0f 91       	pop	r16
    385c:	ff 90       	pop	r15
    385e:	ef 90       	pop	r14
    3860:	df 90       	pop	r13
    3862:	cf 90       	pop	r12
    3864:	bf 90       	pop	r11
    3866:	af 90       	pop	r10
    3868:	9f 90       	pop	r9
    386a:	8f 90       	pop	r8
    386c:	7f 90       	pop	r7
    386e:	6f 90       	pop	r6
    3870:	5f 90       	pop	r5
    3872:	4f 90       	pop	r4
    3874:	08 95       	ret

00003876 <read_current_and_voltage>:

void read_current_and_voltage(OutputState* output)
{
    3876:	8f 92       	push	r8
    3878:	9f 92       	push	r9
    387a:	af 92       	push	r10
    387c:	bf 92       	push	r11
    387e:	ef 92       	push	r14
    3880:	ff 92       	push	r15
    3882:	0f 93       	push	r16
    3884:	1f 93       	push	r17
    3886:	cf 93       	push	r28
    3888:	df 93       	push	r29
    388a:	00 d0       	rcall	.+0      	; 0x388c <read_current_and_voltage+0x16>
    388c:	00 d0       	rcall	.+0      	; 0x388e <read_current_and_voltage+0x18>
    388e:	cd b7       	in	r28, 0x3d	; 61
    3890:	de b7       	in	r29, 0x3e	; 62
    3892:	8c 01       	movw	r16, r24
	if (!output->high_averaging) //set to high averaging before taking current/voltage reading
    3894:	fc 01       	movw	r30, r24
    3896:	86 85       	ldd	r24, Z+14	; 0x0e
    3898:	81 11       	cpse	r24, r1
    389a:	0d c0       	rjmp	.+26     	; 0x38b6 <read_current_and_voltage+0x40>
	{ 
		output->high_averaging = TRUE;
    389c:	81 e0       	ldi	r24, 0x01	; 1
    389e:	86 87       	std	Z+14, r24	; 0x0e
		
		high_INA_averaging(&twiMaster, output->ina226_addr);
    38a0:	64 ad       	ldd	r22, Z+60	; 0x3c
    38a2:	88 e6       	ldi	r24, 0x68	; 104
    38a4:	94 e2       	ldi	r25, 0x24	; 36
    38a6:	0e 94 18 16 	call	0x2c30	; 0x2c30 <high_INA_averaging>
    38aa:	87 ea       	ldi	r24, 0xA7	; 167
    38ac:	91 e6       	ldi	r25, 0x61	; 97
    38ae:	01 97       	sbiw	r24, 0x01	; 1
    38b0:	f1 f7       	brne	.-4      	; 0x38ae <read_current_and_voltage+0x38>
    38b2:	00 c0       	rjmp	.+0      	; 0x38b4 <read_current_and_voltage+0x3e>
    38b4:	00 00       	nop
		_delay_ms(5);
	}
	
	int volatile desired_current = MIN(output->target_current * output->reduced_current_fraction, output->max_current);
    38b6:	f8 01       	movw	r30, r16
    38b8:	60 89       	ldd	r22, Z+16	; 0x10
    38ba:	71 89       	ldd	r23, Z+17	; 0x11
    38bc:	80 e0       	ldi	r24, 0x00	; 0
    38be:	90 e0       	ldi	r25, 0x00	; 0
    38c0:	0e 94 e4 35 	call	0x6bc8	; 0x6bc8 <__floatunsisf>
    38c4:	f8 01       	movw	r30, r16
    38c6:	23 a1       	ldd	r18, Z+35	; 0x23
    38c8:	34 a1       	ldd	r19, Z+36	; 0x24
    38ca:	45 a1       	ldd	r20, Z+37	; 0x25
    38cc:	56 a1       	ldd	r21, Z+38	; 0x26
    38ce:	0e 94 f3 36 	call	0x6de6	; 0x6de6 <__mulsf3>
    38d2:	4b 01       	movw	r8, r22
    38d4:	5c 01       	movw	r10, r24
    38d6:	f8 01       	movw	r30, r16
    38d8:	e2 88       	ldd	r14, Z+18	; 0x12
    38da:	f3 88       	ldd	r15, Z+19	; 0x13
    38dc:	b7 01       	movw	r22, r14
    38de:	80 e0       	ldi	r24, 0x00	; 0
    38e0:	90 e0       	ldi	r25, 0x00	; 0
    38e2:	0e 94 e4 35 	call	0x6bc8	; 0x6bc8 <__floatunsisf>
    38e6:	9b 01       	movw	r18, r22
    38e8:	ac 01       	movw	r20, r24
    38ea:	c5 01       	movw	r24, r10
    38ec:	b4 01       	movw	r22, r8
    38ee:	0e 94 37 35 	call	0x6a6e	; 0x6a6e <__cmpsf2>
    38f2:	87 ff       	sbrs	r24, 7
    38f4:	05 c0       	rjmp	.+10     	; 0x3900 <read_current_and_voltage+0x8a>
    38f6:	c5 01       	movw	r24, r10
    38f8:	b4 01       	movw	r22, r8
    38fa:	0e 94 ae 35 	call	0x6b5c	; 0x6b5c <__fixsfsi>
    38fe:	01 c0       	rjmp	.+2      	; 0x3902 <read_current_and_voltage+0x8c>
    3900:	b7 01       	movw	r22, r14
    3902:	6b 83       	std	Y+3, r22	; 0x03
    3904:	7c 83       	std	Y+4, r23	; 0x04
	
	int volatile present_current = get_current(&twiMaster, FALSE, output->ina226_addr);//round_to_tens(get_dummy_current(output->id));  //round_to_tens(get_current(&twiMaster, FALSE, output->ina226_addr));
    3906:	f8 01       	movw	r30, r16
    3908:	44 ad       	ldd	r20, Z+60	; 0x3c
    390a:	60 e0       	ldi	r22, 0x00	; 0
    390c:	88 e6       	ldi	r24, 0x68	; 104
    390e:	94 e2       	ldi	r25, 0x24	; 36
    3910:	0e 94 55 16 	call	0x2caa	; 0x2caa <get_current>
    3914:	89 83       	std	Y+1, r24	; 0x01
    3916:	9a 83       	std	Y+2, r25	; 0x02
	
	if(program_state.program == FOURTY_ONE)
    3918:	80 91 e8 23 	lds	r24, 0x23E8	; 0x8023e8 <program_state+0x4>
    391c:	81 30       	cpi	r24, 0x01	; 1
    391e:	d1 f4       	brne	.+52     	; 0x3954 <read_current_and_voltage+0xde>
	{
		if(output->id == output_one.id)
    3920:	f8 01       	movw	r30, r16
    3922:	80 81       	ld	r24, Z
    3924:	90 91 a3 24 	lds	r25, 0x24A3	; 0x8024a3 <output_one>
    3928:	89 13       	cpse	r24, r25
    392a:	03 c0       	rjmp	.+6      	; 0x3932 <read_current_and_voltage+0xbc>
		{
			present_current += get_current(&twiMaster, FALSE, output_two.ina226_addr);//get_dummy_current(output_two.id); //round_to_tens(get_current(&twiMaster, FALSE, output_two.ina226_addr));
    392c:	40 91 5d 24 	lds	r20, 0x245D	; 0x80245d <output_two+0x3c>
    3930:	06 c0       	rjmp	.+12     	; 0x393e <read_current_and_voltage+0xc8>
		}
		else if(output->id == output_two.id)
    3932:	90 91 21 24 	lds	r25, 0x2421	; 0x802421 <output_two>
    3936:	89 13       	cpse	r24, r25
    3938:	0d c0       	rjmp	.+26     	; 0x3954 <read_current_and_voltage+0xde>
		{
			present_current += get_current(&twiMaster, FALSE, output_one.ina226_addr);//get_dummy_current(output_one.id); //round_to_tens(get_current(&twiMaster, FALSE, output_one.ina226_addr));
    393a:	40 91 df 24 	lds	r20, 0x24DF	; 0x8024df <output_one+0x3c>
    393e:	60 e0       	ldi	r22, 0x00	; 0
    3940:	88 e6       	ldi	r24, 0x68	; 104
    3942:	94 e2       	ldi	r25, 0x24	; 36
    3944:	0e 94 55 16 	call	0x2caa	; 0x2caa <get_current>
    3948:	29 81       	ldd	r18, Y+1	; 0x01
    394a:	3a 81       	ldd	r19, Y+2	; 0x02
    394c:	82 0f       	add	r24, r18
    394e:	93 1f       	adc	r25, r19
    3950:	89 83       	std	Y+1, r24	; 0x01
    3952:	9a 83       	std	Y+2, r25	; 0x02
		}
	}
	
	output->current = round_to_tens(present_current);
    3954:	89 81       	ldd	r24, Y+1	; 0x01
    3956:	9a 81       	ldd	r25, Y+2	; 0x02
    3958:	0e 94 4b 11 	call	0x2296	; 0x2296 <round_to_tens>
    395c:	f8 01       	movw	r30, r16
    395e:	86 8b       	std	Z+22, r24	; 0x16
    3960:	97 8b       	std	Z+23, r25	; 0x17
	
	if (abs(present_current - desired_current) < MIN_ACCURACY)
    3962:	29 81       	ldd	r18, Y+1	; 0x01
    3964:	3a 81       	ldd	r19, Y+2	; 0x02
    3966:	8b 81       	ldd	r24, Y+3	; 0x03
    3968:	9c 81       	ldd	r25, Y+4	; 0x04
    396a:	28 17       	cp	r18, r24
    396c:	39 07       	cpc	r19, r25
    396e:	21 f4       	brne	.+8      	; 0x3978 <read_current_and_voltage+0x102>
	{
		output->current = desired_current;
    3970:	8b 81       	ldd	r24, Y+3	; 0x03
    3972:	9c 81       	ldd	r25, Y+4	; 0x04
    3974:	86 8b       	std	Z+22, r24	; 0x16
    3976:	97 8b       	std	Z+23, r25	; 0x17
	}
	
	output->voltage = round_to_tens(get_voltage(&twiMaster, FALSE, output->ina226_addr));
    3978:	f8 01       	movw	r30, r16
    397a:	44 ad       	ldd	r20, Z+60	; 0x3c
    397c:	60 e0       	ldi	r22, 0x00	; 0
    397e:	88 e6       	ldi	r24, 0x68	; 104
    3980:	94 e2       	ldi	r25, 0x24	; 36
    3982:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <get_voltage>
    3986:	0e 94 4b 11 	call	0x2296	; 0x2296 <round_to_tens>
    398a:	f8 01       	movw	r30, r16
    398c:	80 8f       	std	Z+24, r24	; 0x18
    398e:	91 8f       	std	Z+25, r25	; 0x19
	
	if (output->voltage >= output->max_voltage)
    3990:	24 89       	ldd	r18, Z+20	; 0x14
    3992:	35 89       	ldd	r19, Z+21	; 0x15
    3994:	82 17       	cp	r24, r18
    3996:	93 07       	cpc	r25, r19
    3998:	10 f0       	brcs	.+4      	; 0x399e <read_current_and_voltage+0x128>
	{
		output->hit_max_voltage = TRUE;
    399a:	81 e0       	ldi	r24, 0x01	; 1
    399c:	87 83       	std	Z+7, r24	; 0x07
	}
}
    399e:	24 96       	adiw	r28, 0x04	; 4
    39a0:	cd bf       	out	0x3d, r28	; 61
    39a2:	de bf       	out	0x3e, r29	; 62
    39a4:	df 91       	pop	r29
    39a6:	cf 91       	pop	r28
    39a8:	1f 91       	pop	r17
    39aa:	0f 91       	pop	r16
    39ac:	ff 90       	pop	r15
    39ae:	ef 90       	pop	r14
    39b0:	bf 90       	pop	r11
    39b2:	af 90       	pop	r10
    39b4:	9f 90       	pop	r9
    39b6:	8f 90       	pop	r8
    39b8:	08 95       	ret

000039ba <main>:

static bool powerGood = FALSE;

int main(void)
{
	while(!(PORTA_IN & (1 << 0)))
    39ba:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
    39be:	80 fd       	sbrc	r24, 0
    39c0:	03 c0       	rjmp	.+6      	; 0x39c8 <main+0xe>
	{
		powerGood = FALSE;
    39c2:	10 92 e3 23 	sts	0x23E3, r1	; 0x8023e3 <powerGood>
    39c6:	f9 cf       	rjmp	.-14     	; 0x39ba <main>
	}
	
	powerGood = TRUE;
    39c8:	81 e0       	ldi	r24, 0x01	; 1
    39ca:	80 93 e3 23 	sts	0x23E3, r24	; 0x8023e3 <powerGood>
	
	// BROWN-OUT RESET INITIALIZATION
	FUSE_FUSEBYTE5 = BODLVL_3V0_gc;
    39ce:	15 b8       	out	0x05, r1	; 5
	FUSE_FUSEBYTE5 = BODACT_CONTINUOUS_gc;
    39d0:	80 e2       	ldi	r24, 0x20	; 32
    39d2:	85 b9       	out	0x05, r24	; 5
	FUSE_FUSEBYTE4 = OSC_XOSCSEL_32KHz_gc;
    39d4:	82 e0       	ldi	r24, 0x02	; 2
    39d6:	84 b9       	out	0x04, r24	; 4
	
	wdt_disable();
    39d8:	9d ef       	ldi	r25, 0xFD	; 253
    39da:	88 ed       	ldi	r24, 0xD8	; 216
    39dc:	08 b6       	in	r0, 0x38	; 56
    39de:	18 be       	out	0x38, r1	; 56
    39e0:	84 bf       	out	0x34, r24	; 52
    39e2:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    39e6:	08 be       	out	0x38, r0	; 56
    39e8:	2f e7       	ldi	r18, 0x7F	; 127
    39ea:	8a e1       	ldi	r24, 0x1A	; 26
    39ec:	96 e0       	ldi	r25, 0x06	; 6
    39ee:	21 50       	subi	r18, 0x01	; 1
    39f0:	80 40       	sbci	r24, 0x00	; 0
    39f2:	90 40       	sbci	r25, 0x00	; 0
    39f4:	e1 f7       	brne	.-8      	; 0x39ee <main+0x34>
    39f6:	00 c0       	rjmp	.+0      	; 0x39f8 <main+0x3e>
    39f8:	00 00       	nop
	_delay_ms(100);
	
	//**************************************************
	wdt_reset(); // WATCH DOG TIMER RESET
    39fa:	a8 95       	wdr
	//**************************************************
	initialize(); //initializes clocks and pin settings
    39fc:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <initialize>

	//**************************************************
	wdt_reset(); // WATCH DOG TIMER RESET
    3a00:	a8 95       	wdr
	//**************************************************
	FT813_init(); //initializes display
    3a02:	0e 94 3a 02 	call	0x474	; 0x474 <FT813_init>
	
	//**************************************************
	wdt_reset(); // WATCH DOG TIMER RESET
    3a06:	a8 95       	wdr
	//**************************************************
	sei();
    3a08:	78 94       	sei
	
	
	wr8(REG_PWM_DUTY, 0); //keeps screen off during drawing gauge/snapshot phase
    3a0a:	40 e0       	ldi	r20, 0x00	; 0
    3a0c:	64 ed       	ldi	r22, 0xD4	; 212
    3a0e:	70 e2       	ldi	r23, 0x20	; 32
    3a10:	80 e3       	ldi	r24, 0x30	; 48
    3a12:	90 e0       	ldi	r25, 0x00	; 0
    3a14:	0e 94 c7 01 	call	0x38e	; 0x38e <wr8>
	wdt_reset();
    3a18:	a8 95       	wdr
	
	initialize_variables(); //sets initial values to global variables
    3a1a:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <initialize_variables>
	
	//**************************************************
	wdt_reset(); // WATCH DOG TIMER RESET
    3a1e:	a8 95       	wdr
	//**************************************************
	draw_gauge_and_partial_snapshot(gauge_x, gauge_y, gauge_width); //draws gauge and takes snapshot
    3a20:	40 91 64 24 	lds	r20, 0x2464	; 0x802464 <gauge_width>
    3a24:	50 91 65 24 	lds	r21, 0x2465	; 0x802465 <gauge_width+0x1>
    3a28:	60 91 1b 24 	lds	r22, 0x241B	; 0x80241b <gauge_y>
    3a2c:	70 91 1c 24 	lds	r23, 0x241C	; 0x80241c <gauge_y+0x1>
    3a30:	80 91 52 25 	lds	r24, 0x2552	; 0x802552 <gauge_x>
    3a34:	90 91 53 25 	lds	r25, 0x2553	; 0x802553 <gauge_x+0x1>
    3a38:	0e 94 5e 06 	call	0xcbc	; 0xcbc <draw_gauge_and_partial_snapshot>
	
	//**************************************************
	wdt_reset(); // WATCH DOG TIMER RESET
    3a3c:	a8 95       	wdr
	//**************************************************
	load_values_from_eeprom();
    3a3e:	0e 94 7f 24 	call	0x48fe	; 0x48fe <load_values_from_eeprom>
	
	//**************************************************
	wdt_reset(); // WATCH DOG TIMER RESET
    3a42:	a8 95       	wdr
	//**************************************************
	clear_pwms(BOARD_41EC_ADDR);
    3a44:	8c e4       	ldi	r24, 0x4C	; 76
    3a46:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <clear_pwms>
	//**************************************************
	wdt_reset(); // WATCH DOG TIMER RESET
    3a4a:	a8 95       	wdr
	//**************************************************
	clear_dummy_dacs(OUTPUT1_DAC101C085_ADDR, OUTPUT2_DAC101C085_ADDR);
    3a4c:	69 e0       	ldi	r22, 0x09	; 9
    3a4e:	8a e0       	ldi	r24, 0x0A	; 10
    3a50:	0e 94 15 2d 	call	0x5a2a	; 0x5a2a <clear_dummy_dacs>
	
	//**************************************************
	wdt_reset(); // WATCH DOG TIMER RESET
    3a54:	a8 95       	wdr
	//**************************************************
	write_screen(); //refreshes screen with newest data
    3a56:	0e 94 bf 14 	call	0x297e	; 0x297e <write_screen>
    3a5a:	c0 e0       	ldi	r28, 0x00	; 0
	
	//_delay_ms(1500);
	
	for(int i = 0; i < 25; ++i)
	{
		wr8(REG_PWM_DUTY, i); //turns screen back on
    3a5c:	4c 2f       	mov	r20, r28
    3a5e:	64 ed       	ldi	r22, 0xD4	; 212
    3a60:	70 e2       	ldi	r23, 0x20	; 32
    3a62:	80 e3       	ldi	r24, 0x30	; 48
    3a64:	90 e0       	ldi	r25, 0x00	; 0
    3a66:	0e 94 c7 01 	call	0x38e	; 0x38e <wr8>
    3a6a:	2f ed       	ldi	r18, 0xDF	; 223
    3a6c:	82 e2       	ldi	r24, 0x22	; 34
    3a6e:	92 e0       	ldi	r25, 0x02	; 2
    3a70:	21 50       	subi	r18, 0x01	; 1
    3a72:	80 40       	sbci	r24, 0x00	; 0
    3a74:	90 40       	sbci	r25, 0x00	; 0
    3a76:	e1 f7       	brne	.-8      	; 0x3a70 <main+0xb6>
    3a78:	00 c0       	rjmp	.+0      	; 0x3a7a <main+0xc0>
    3a7a:	00 00       	nop
    3a7c:	cf 5f       	subi	r28, 0xFF	; 255
	//**************************************************
	write_screen(); //refreshes screen with newest data
	
	//_delay_ms(1500);
	
	for(int i = 0; i < 25; ++i)
    3a7e:	c9 31       	cpi	r28, 0x19	; 25
    3a80:	69 f7       	brne	.-38     	; 0x3a5c <main+0xa2>
		wr8(REG_PWM_DUTY, i); //turns screen back on
		_delay_ms(35);
	}
	
	
	wdt_reset();
    3a82:	a8 95       	wdr
	//Watch dog (or dead man) timer initialization
	wdt_enable(CCP_IOREG_gc);
    3a84:	88 ed       	ldi	r24, 0xD8	; 216
    3a86:	9b ed       	ldi	r25, 0xDB	; 219
    3a88:	08 b6       	in	r0, 0x38	; 56
    3a8a:	18 be       	out	0x38, r1	; 56
    3a8c:	84 bf       	out	0x34, r24	; 52
    3a8e:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    3a92:	90 91 82 00 	lds	r25, 0x0082	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
    3a96:	91 fd       	sbrc	r25, 1
    3a98:	fc cf       	rjmp	.-8      	; 0x3a92 <main+0xd8>
    3a9a:	08 be       	out	0x38, r0	; 56
	wdt_enable(WDT_CEN_bm);
    3a9c:	93 e0       	ldi	r25, 0x03	; 3
    3a9e:	08 b6       	in	r0, 0x38	; 56
    3aa0:	18 be       	out	0x38, r1	; 56
    3aa2:	84 bf       	out	0x34, r24	; 52
    3aa4:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    3aa8:	20 91 82 00 	lds	r18, 0x0082	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
    3aac:	21 fd       	sbrc	r18, 1
    3aae:	fc cf       	rjmp	.-8      	; 0x3aa8 <main+0xee>
    3ab0:	08 be       	out	0x38, r0	; 56
	wdt_enable(WDT_ENABLE_bm);
    3ab2:	08 b6       	in	r0, 0x38	; 56
    3ab4:	18 be       	out	0x38, r1	; 56
    3ab6:	84 bf       	out	0x34, r24	; 52
    3ab8:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    3abc:	90 91 82 00 	lds	r25, 0x0082	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
    3ac0:	91 fd       	sbrc	r25, 1
    3ac2:	fc cf       	rjmp	.-8      	; 0x3abc <main+0x102>
    3ac4:	08 be       	out	0x38, r0	; 56
	wdt_enable(WDTO_2S);
    3ac6:	97 e0       	ldi	r25, 0x07	; 7
    3ac8:	08 b6       	in	r0, 0x38	; 56
    3aca:	18 be       	out	0x38, r1	; 56
    3acc:	84 bf       	out	0x34, r24	; 52
    3ace:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    3ad2:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
    3ad6:	81 fd       	sbrc	r24, 1
    3ad8:	fc cf       	rjmp	.-8      	; 0x3ad2 <main+0x118>
    3ada:	08 be       	out	0x38, r0	; 56
		}
		
		read_pson();
		
		if(program_state.pson_low){ //if DC OFF
			program_state.output->need_to_set_current_voltage_pair = TRUE;
    3adc:	01 e0       	ldi	r16, 0x01	; 1
    3ade:	11 e0       	ldi	r17, 0x01	; 1
			}
			
			if (program_state.output->set_current_state == VISIBLE_LOCKED)
			{
				
				program_state.output = &output_two;
    3ae0:	c1 e2       	ldi	r28, 0x21	; 33
    3ae2:	d4 e2       	ldi	r29, 0x24	; 36
	wdt_enable(WDTO_2S);
	
	while (1)
	{
		//**************************************************
		wdt_reset(); // WATCH DOG TIMER RESET
    3ae4:	a8 95       	wdr
		//**************************************************
		
		while(!(PORTA_IN & (1 << 0)))
    3ae6:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
    3aea:	80 fd       	sbrc	r24, 0
    3aec:	14 c0       	rjmp	.+40     	; 0x3b16 <main+0x15c>
		{
			powerGood = FALSE;
    3aee:	10 92 e3 23 	sts	0x23E3, r1	; 0x8023e3 <powerGood>
			set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    3af2:	80 91 48 00 	lds	r24, 0x0048	; 0x800048 <__TEXT_REGION_LENGTH__+0x700048>
    3af6:	81 7f       	andi	r24, 0xF1	; 241
    3af8:	84 60       	ori	r24, 0x04	; 4
    3afa:	80 93 48 00 	sts	0x0048, r24	; 0x800048 <__TEXT_REGION_LENGTH__+0x700048>
			sleep_mode();
    3afe:	80 91 48 00 	lds	r24, 0x0048	; 0x800048 <__TEXT_REGION_LENGTH__+0x700048>
    3b02:	81 60       	ori	r24, 0x01	; 1
    3b04:	80 93 48 00 	sts	0x0048, r24	; 0x800048 <__TEXT_REGION_LENGTH__+0x700048>
    3b08:	88 95       	sleep
    3b0a:	80 91 48 00 	lds	r24, 0x0048	; 0x800048 <__TEXT_REGION_LENGTH__+0x700048>
    3b0e:	8e 7f       	andi	r24, 0xFE	; 254
    3b10:	80 93 48 00 	sts	0x0048, r24	; 0x800048 <__TEXT_REGION_LENGTH__+0x700048>
    3b14:	e8 cf       	rjmp	.-48     	; 0x3ae6 <main+0x12c>
		}
		
		read_pson();
    3b16:	0e 94 de 29 	call	0x53bc	; 0x53bc <read_pson>
		
		if(program_state.pson_low){ //if DC OFF
    3b1a:	80 91 e9 23 	lds	r24, 0x23E9	; 0x8023e9 <program_state+0x5>
    3b1e:	88 23       	and	r24, r24
    3b20:	61 f0       	breq	.+24     	; 0x3b3a <main+0x180>
			program_state.output->need_to_set_current_voltage_pair = TRUE;
    3b22:	e0 91 17 24 	lds	r30, 0x2417	; 0x802417 <program_state+0x33>
    3b26:	f0 91 18 24 	lds	r31, 0x2418	; 0x802418 <program_state+0x34>
    3b2a:	05 87       	std	Z+13, r16	; 0x0d
			clear_all_errors();
    3b2c:	0e 94 6e 25 	call	0x4adc	; 0x4adc <clear_all_errors>
			output_one.pson_was_low = TRUE;
    3b30:	10 93 d1 24 	sts	0x24D1, r17	; 0x8024d1 <output_one+0x2e>
			output_two.pson_was_low = TRUE;
    3b34:	10 93 4f 24 	sts	0x244F, r17	; 0x80244f <output_two+0x2e>
    3b38:	02 c0       	rjmp	.+4      	; 0x3b3e <main+0x184>
		}
		else { //if DC ON
			handle_encoder_clicks(); //this checks how long you have been holding a click, changes program state accordingly
    3b3a:	0e 94 a4 25 	call	0x4b48	; 0x4b48 <handle_encoder_clicks>
		}
		
		//**************************************************
		wdt_reset(); // WATCH DOG TIMER RESET
    3b3e:	a8 95       	wdr
		//**************************************************
		
		if (counters.check_program_state_counter >= 500) //every 500 ms this if-block is executed
    3b40:	80 91 ee 24 	lds	r24, 0x24EE	; 0x8024ee <counters+0xa>
    3b44:	90 91 ef 24 	lds	r25, 0x24EF	; 0x8024ef <counters+0xb>
    3b48:	84 3f       	cpi	r24, 0xF4	; 244
    3b4a:	91 40       	sbci	r25, 0x01	; 1
    3b4c:	58 f2       	brcs	.-106    	; 0x3ae4 <main+0x12a>
		{ 
			
			if(counters.backlight_timer)
    3b4e:	80 91 e4 24 	lds	r24, 0x24E4	; 0x8024e4 <counters>
    3b52:	90 91 e5 24 	lds	r25, 0x24E5	; 0x8024e5 <counters+0x1>
    3b56:	89 2b       	or	r24, r25
    3b58:	21 f0       	breq	.+8      	; 0x3b62 <main+0x1a8>
			{
				LCD_BCKLGHT_ON;
    3b5a:	0e 94 f3 23 	call	0x47e6	; 0x47e6 <get_ambient_brightness>
    3b5e:	48 2f       	mov	r20, r24
    3b60:	01 c0       	rjmp	.+2      	; 0x3b64 <main+0x1aa>
			}
			else
			{
				LCD_BCKLGHT_OFF;
    3b62:	40 e0       	ldi	r20, 0x00	; 0
    3b64:	64 ed       	ldi	r22, 0xD4	; 212
    3b66:	70 e2       	ldi	r23, 0x20	; 32
    3b68:	80 e3       	ldi	r24, 0x30	; 48
    3b6a:	90 e0       	ldi	r25, 0x00	; 0
    3b6c:	0e 94 c7 01 	call	0x38e	; 0x38e <wr8>
			}
			
			if (program_state.output->set_current_state == VISIBLE_LOCKED)
    3b70:	e0 91 17 24 	lds	r30, 0x2417	; 0x802417 <program_state+0x33>
    3b74:	f0 91 18 24 	lds	r31, 0x2418	; 0x802418 <program_state+0x34>
    3b78:	87 85       	ldd	r24, Z+15	; 0x0f
    3b7a:	82 30       	cpi	r24, 0x02	; 2
    3b7c:	21 f4       	brne	.+8      	; 0x3b86 <main+0x1cc>
			{
				
				program_state.output = &output_two;
    3b7e:	c0 93 17 24 	sts	0x2417, r28	; 0x802417 <program_state+0x33>
    3b82:	d0 93 18 24 	sts	0x2418, r29	; 0x802418 <program_state+0x34>
			}
			
			//**************************************************
			wdt_reset(); // WATCH DOG TIMER RESET
    3b86:	a8 95       	wdr
			//**************************************************
			read_current_and_voltage(&output_one);
    3b88:	83 ea       	ldi	r24, 0xA3	; 163
    3b8a:	94 e2       	ldi	r25, 0x24	; 36
    3b8c:	0e 94 3b 1c 	call	0x3876	; 0x3876 <read_current_and_voltage>
			
			if(program_state.program == FOURTY_ONE_DUAL || program_state.program == FOURTY_ONE)
    3b90:	80 91 e8 23 	lds	r24, 0x23E8	; 0x8023e8 <program_state+0x4>
    3b94:	81 50       	subi	r24, 0x01	; 1
    3b96:	82 30       	cpi	r24, 0x02	; 2
    3b98:	20 f4       	brcc	.+8      	; 0x3ba2 <main+0x1e8>
			{
				read_current_and_voltage(&output_two);
    3b9a:	81 e2       	ldi	r24, 0x21	; 33
    3b9c:	94 e2       	ldi	r25, 0x24	; 36
    3b9e:	0e 94 3b 1c 	call	0x3876	; 0x3876 <read_current_and_voltage>
			}
			
			//**************************************************
			wdt_reset(); // WATCH DOG TIMER RESET
    3ba2:	a8 95       	wdr
			//**************************************************
			
			if(!program_state.pson_low) //if DC ON
    3ba4:	80 91 e9 23 	lds	r24, 0x23E9	; 0x8023e9 <program_state+0x5>
    3ba8:	81 11       	cpse	r24, r1
    3baa:	0c c0       	rjmp	.+24     	; 0x3bc4 <main+0x20a>
			{ 
				execute_maintenance_functions(&output_one);
    3bac:	83 ea       	ldi	r24, 0xA3	; 163
    3bae:	94 e2       	ldi	r25, 0x24	; 36
    3bb0:	0e 94 35 19 	call	0x326a	; 0x326a <execute_maintenance_functions>
				
				if(program_state.program == FOURTY_ONE_DUAL)
    3bb4:	80 91 e8 23 	lds	r24, 0x23E8	; 0x8023e8 <program_state+0x4>
    3bb8:	82 30       	cpi	r24, 0x02	; 2
    3bba:	21 f4       	brne	.+8      	; 0x3bc4 <main+0x20a>
				{
					execute_maintenance_functions(&output_two);
    3bbc:	81 e2       	ldi	r24, 0x21	; 33
    3bbe:	94 e2       	ldi	r25, 0x24	; 36
    3bc0:	0e 94 35 19 	call	0x326a	; 0x326a <execute_maintenance_functions>
				}

			}
			
			counters.check_program_state_counter = 0;
    3bc4:	10 92 ee 24 	sts	0x24EE, r1	; 0x8024ee <counters+0xa>
    3bc8:	10 92 ef 24 	sts	0x24EF, r1	; 0x8024ef <counters+0xb>
    3bcc:	8b cf       	rjmp	.-234    	; 0x3ae4 <main+0x12a>

00003bce <__vector_10>:
		}
	}
}

ISR(RTC_OVF_vect)//interrupts every 1ms
{
    3bce:	1f 92       	push	r1
    3bd0:	0f 92       	push	r0
    3bd2:	0f b6       	in	r0, 0x3f	; 63
    3bd4:	0f 92       	push	r0
    3bd6:	11 24       	eor	r1, r1
    3bd8:	af 92       	push	r10
    3bda:	bf 92       	push	r11
    3bdc:	cf 92       	push	r12
    3bde:	df 92       	push	r13
    3be0:	ef 92       	push	r14
    3be2:	ff 92       	push	r15
    3be4:	0f 93       	push	r16
    3be6:	1f 93       	push	r17
    3be8:	2f 93       	push	r18
    3bea:	3f 93       	push	r19
    3bec:	4f 93       	push	r20
    3bee:	5f 93       	push	r21
    3bf0:	6f 93       	push	r22
    3bf2:	7f 93       	push	r23
    3bf4:	8f 93       	push	r24
    3bf6:	9f 93       	push	r25
    3bf8:	af 93       	push	r26
    3bfa:	bf 93       	push	r27
    3bfc:	cf 93       	push	r28
    3bfe:	ef 93       	push	r30
    3c00:	ff 93       	push	r31
	if (powerGood)
    3c02:	80 91 e3 23 	lds	r24, 0x23E3	; 0x8023e3 <powerGood>
    3c06:	88 23       	and	r24, r24
    3c08:	09 f4       	brne	.+2      	; 0x3c0c <__vector_10+0x3e>
    3c0a:	cb c2       	rjmp	.+1430   	; 0x41a2 <__vector_10+0x5d4>
	{
		++counters.check_program_state_counter;
    3c0c:	80 91 ee 24 	lds	r24, 0x24EE	; 0x8024ee <counters+0xa>
    3c10:	90 91 ef 24 	lds	r25, 0x24EF	; 0x8024ef <counters+0xb>
    3c14:	01 96       	adiw	r24, 0x01	; 1
    3c16:	80 93 ee 24 	sts	0x24EE, r24	; 0x8024ee <counters+0xa>
    3c1a:	90 93 ef 24 	sts	0x24EF, r25	; 0x8024ef <counters+0xb>
		++counters.real_time_counter;
    3c1e:	20 91 f8 24 	lds	r18, 0x24F8	; 0x8024f8 <counters+0x14>
    3c22:	30 91 f9 24 	lds	r19, 0x24F9	; 0x8024f9 <counters+0x15>
    3c26:	40 91 fa 24 	lds	r20, 0x24FA	; 0x8024fa <counters+0x16>
    3c2a:	50 91 fb 24 	lds	r21, 0x24FB	; 0x8024fb <counters+0x17>
    3c2e:	60 91 fc 24 	lds	r22, 0x24FC	; 0x8024fc <counters+0x18>
    3c32:	70 91 fd 24 	lds	r23, 0x24FD	; 0x8024fd <counters+0x19>
    3c36:	80 91 fe 24 	lds	r24, 0x24FE	; 0x8024fe <counters+0x1a>
    3c3a:	90 91 ff 24 	lds	r25, 0x24FF	; 0x8024ff <counters+0x1b>
    3c3e:	a1 e0       	ldi	r26, 0x01	; 1
    3c40:	0e 94 a2 38 	call	0x7144	; 0x7144 <__adddi3_s8>
    3c44:	20 93 f8 24 	sts	0x24F8, r18	; 0x8024f8 <counters+0x14>
    3c48:	30 93 f9 24 	sts	0x24F9, r19	; 0x8024f9 <counters+0x15>
    3c4c:	40 93 fa 24 	sts	0x24FA, r20	; 0x8024fa <counters+0x16>
    3c50:	50 93 fb 24 	sts	0x24FB, r21	; 0x8024fb <counters+0x17>
    3c54:	60 93 fc 24 	sts	0x24FC, r22	; 0x8024fc <counters+0x18>
    3c58:	70 93 fd 24 	sts	0x24FD, r23	; 0x8024fd <counters+0x19>
    3c5c:	80 93 fe 24 	sts	0x24FE, r24	; 0x8024fe <counters+0x1a>
    3c60:	90 93 ff 24 	sts	0x24FF, r25	; 0x8024ff <counters+0x1b>
		++counters.rtc_int_count;
    3c64:	80 91 ea 24 	lds	r24, 0x24EA	; 0x8024ea <counters+0x6>
    3c68:	90 91 eb 24 	lds	r25, 0x24EB	; 0x8024eb <counters+0x7>
    3c6c:	a0 91 ec 24 	lds	r26, 0x24EC	; 0x8024ec <counters+0x8>
    3c70:	b0 91 ed 24 	lds	r27, 0x24ED	; 0x8024ed <counters+0x9>
    3c74:	01 96       	adiw	r24, 0x01	; 1
    3c76:	a1 1d       	adc	r26, r1
    3c78:	b1 1d       	adc	r27, r1
    3c7a:	80 93 ea 24 	sts	0x24EA, r24	; 0x8024ea <counters+0x6>
    3c7e:	90 93 eb 24 	sts	0x24EB, r25	; 0x8024eb <counters+0x7>
    3c82:	a0 93 ec 24 	sts	0x24EC, r26	; 0x8024ec <counters+0x8>
    3c86:	b0 93 ed 24 	sts	0x24ED, r27	; 0x8024ed <counters+0x9>
		++counters.periodic_int_count;
    3c8a:	80 91 e6 24 	lds	r24, 0x24E6	; 0x8024e6 <counters+0x2>
    3c8e:	90 91 e7 24 	lds	r25, 0x24E7	; 0x8024e7 <counters+0x3>
    3c92:	a0 91 e8 24 	lds	r26, 0x24E8	; 0x8024e8 <counters+0x4>
    3c96:	b0 91 e9 24 	lds	r27, 0x24E9	; 0x8024e9 <counters+0x5>
    3c9a:	01 96       	adiw	r24, 0x01	; 1
    3c9c:	a1 1d       	adc	r26, r1
    3c9e:	b1 1d       	adc	r27, r1
    3ca0:	80 93 e6 24 	sts	0x24E6, r24	; 0x8024e6 <counters+0x2>
    3ca4:	90 93 e7 24 	sts	0x24E7, r25	; 0x8024e7 <counters+0x3>
    3ca8:	a0 93 e8 24 	sts	0x24E8, r26	; 0x8024e8 <counters+0x4>
    3cac:	b0 93 e9 24 	sts	0x24E9, r27	; 0x8024e9 <counters+0x5>
		++counters.update_message_box_counter;
    3cb0:	80 91 00 25 	lds	r24, 0x2500	; 0x802500 <counters+0x1c>
    3cb4:	90 91 01 25 	lds	r25, 0x2501	; 0x802501 <counters+0x1d>
    3cb8:	01 96       	adiw	r24, 0x01	; 1
    3cba:	80 93 00 25 	sts	0x2500, r24	; 0x802500 <counters+0x1c>
    3cbe:	90 93 01 25 	sts	0x2501, r25	; 0x802501 <counters+0x1d>
		++counters.check_temp_counter;
    3cc2:	80 91 06 25 	lds	r24, 0x2506	; 0x802506 <counters+0x22>
    3cc6:	90 91 07 25 	lds	r25, 0x2507	; 0x802507 <counters+0x23>
    3cca:	01 96       	adiw	r24, 0x01	; 1
    3ccc:	80 93 06 25 	sts	0x2506, r24	; 0x802506 <counters+0x22>
    3cd0:	90 93 07 25 	sts	0x2507, r25	; 0x802507 <counters+0x23>
		
		if (output_one.current > output_one.max_current * 1.2 || output_two.current > output_two.max_current * 1.2)
    3cd4:	60 91 b9 24 	lds	r22, 0x24B9	; 0x8024b9 <output_one+0x16>
    3cd8:	70 91 ba 24 	lds	r23, 0x24BA	; 0x8024ba <output_one+0x17>
    3cdc:	80 e0       	ldi	r24, 0x00	; 0
    3cde:	90 e0       	ldi	r25, 0x00	; 0
    3ce0:	0e 94 e4 35 	call	0x6bc8	; 0x6bc8 <__floatunsisf>
    3ce4:	6b 01       	movw	r12, r22
    3ce6:	7c 01       	movw	r14, r24
    3ce8:	60 91 b5 24 	lds	r22, 0x24B5	; 0x8024b5 <output_one+0x12>
    3cec:	70 91 b6 24 	lds	r23, 0x24B6	; 0x8024b6 <output_one+0x13>
    3cf0:	80 e0       	ldi	r24, 0x00	; 0
    3cf2:	90 e0       	ldi	r25, 0x00	; 0
    3cf4:	0e 94 e4 35 	call	0x6bc8	; 0x6bc8 <__floatunsisf>
    3cf8:	2a e9       	ldi	r18, 0x9A	; 154
    3cfa:	39 e9       	ldi	r19, 0x99	; 153
    3cfc:	49 e9       	ldi	r20, 0x99	; 153
    3cfe:	5f e3       	ldi	r21, 0x3F	; 63
    3d00:	0e 94 f3 36 	call	0x6de6	; 0x6de6 <__mulsf3>
    3d04:	9b 01       	movw	r18, r22
    3d06:	ac 01       	movw	r20, r24
    3d08:	c7 01       	movw	r24, r14
    3d0a:	b6 01       	movw	r22, r12
    3d0c:	0e 94 96 36 	call	0x6d2c	; 0x6d2c <__gesf2>
    3d10:	18 16       	cp	r1, r24
    3d12:	04 f1       	brlt	.+64     	; 0x3d54 <__vector_10+0x186>
    3d14:	60 91 37 24 	lds	r22, 0x2437	; 0x802437 <output_two+0x16>
    3d18:	70 91 38 24 	lds	r23, 0x2438	; 0x802438 <output_two+0x17>
    3d1c:	80 e0       	ldi	r24, 0x00	; 0
    3d1e:	90 e0       	ldi	r25, 0x00	; 0
    3d20:	0e 94 e4 35 	call	0x6bc8	; 0x6bc8 <__floatunsisf>
    3d24:	6b 01       	movw	r12, r22
    3d26:	7c 01       	movw	r14, r24
    3d28:	60 91 33 24 	lds	r22, 0x2433	; 0x802433 <output_two+0x12>
    3d2c:	70 91 34 24 	lds	r23, 0x2434	; 0x802434 <output_two+0x13>
    3d30:	80 e0       	ldi	r24, 0x00	; 0
    3d32:	90 e0       	ldi	r25, 0x00	; 0
    3d34:	0e 94 e4 35 	call	0x6bc8	; 0x6bc8 <__floatunsisf>
    3d38:	2a e9       	ldi	r18, 0x9A	; 154
    3d3a:	39 e9       	ldi	r19, 0x99	; 153
    3d3c:	49 e9       	ldi	r20, 0x99	; 153
    3d3e:	5f e3       	ldi	r21, 0x3F	; 63
    3d40:	0e 94 f3 36 	call	0x6de6	; 0x6de6 <__mulsf3>
    3d44:	9b 01       	movw	r18, r22
    3d46:	ac 01       	movw	r20, r24
    3d48:	c7 01       	movw	r24, r14
    3d4a:	b6 01       	movw	r22, r12
    3d4c:	0e 94 96 36 	call	0x6d2c	; 0x6d2c <__gesf2>
    3d50:	18 16       	cp	r1, r24
    3d52:	54 f4       	brge	.+20     	; 0x3d68 <__vector_10+0x19a>
		{
			counters.over_current_counter++;
    3d54:	80 91 18 25 	lds	r24, 0x2518	; 0x802518 <counters+0x34>
    3d58:	90 91 19 25 	lds	r25, 0x2519	; 0x802519 <counters+0x35>
    3d5c:	01 96       	adiw	r24, 0x01	; 1
    3d5e:	80 93 18 25 	sts	0x2518, r24	; 0x802518 <counters+0x34>
    3d62:	90 93 19 25 	sts	0x2519, r25	; 0x802519 <counters+0x35>
    3d66:	04 c0       	rjmp	.+8      	; 0x3d70 <__vector_10+0x1a2>
		}
		else
		{
			counters.over_current_counter = 0;
    3d68:	10 92 18 25 	sts	0x2518, r1	; 0x802518 <counters+0x34>
    3d6c:	10 92 19 25 	sts	0x2519, r1	; 0x802519 <counters+0x35>
		}
		
		if (output_one.voltage > output_one.max_voltage * 1.2 || output_two.voltage > output_two.max_voltage * 1.2)
    3d70:	60 91 bb 24 	lds	r22, 0x24BB	; 0x8024bb <output_one+0x18>
    3d74:	70 91 bc 24 	lds	r23, 0x24BC	; 0x8024bc <output_one+0x19>
    3d78:	80 e0       	ldi	r24, 0x00	; 0
    3d7a:	90 e0       	ldi	r25, 0x00	; 0
    3d7c:	0e 94 e4 35 	call	0x6bc8	; 0x6bc8 <__floatunsisf>
    3d80:	6b 01       	movw	r12, r22
    3d82:	7c 01       	movw	r14, r24
    3d84:	60 91 b7 24 	lds	r22, 0x24B7	; 0x8024b7 <output_one+0x14>
    3d88:	70 91 b8 24 	lds	r23, 0x24B8	; 0x8024b8 <output_one+0x15>
    3d8c:	80 e0       	ldi	r24, 0x00	; 0
    3d8e:	90 e0       	ldi	r25, 0x00	; 0
    3d90:	0e 94 e4 35 	call	0x6bc8	; 0x6bc8 <__floatunsisf>
    3d94:	2a e9       	ldi	r18, 0x9A	; 154
    3d96:	39 e9       	ldi	r19, 0x99	; 153
    3d98:	49 e9       	ldi	r20, 0x99	; 153
    3d9a:	5f e3       	ldi	r21, 0x3F	; 63
    3d9c:	0e 94 f3 36 	call	0x6de6	; 0x6de6 <__mulsf3>
    3da0:	9b 01       	movw	r18, r22
    3da2:	ac 01       	movw	r20, r24
    3da4:	c7 01       	movw	r24, r14
    3da6:	b6 01       	movw	r22, r12
    3da8:	0e 94 96 36 	call	0x6d2c	; 0x6d2c <__gesf2>
    3dac:	18 16       	cp	r1, r24
    3dae:	04 f1       	brlt	.+64     	; 0x3df0 <__vector_10+0x222>
    3db0:	60 91 39 24 	lds	r22, 0x2439	; 0x802439 <output_two+0x18>
    3db4:	70 91 3a 24 	lds	r23, 0x243A	; 0x80243a <output_two+0x19>
    3db8:	80 e0       	ldi	r24, 0x00	; 0
    3dba:	90 e0       	ldi	r25, 0x00	; 0
    3dbc:	0e 94 e4 35 	call	0x6bc8	; 0x6bc8 <__floatunsisf>
    3dc0:	6b 01       	movw	r12, r22
    3dc2:	7c 01       	movw	r14, r24
    3dc4:	60 91 35 24 	lds	r22, 0x2435	; 0x802435 <output_two+0x14>
    3dc8:	70 91 36 24 	lds	r23, 0x2436	; 0x802436 <output_two+0x15>
    3dcc:	80 e0       	ldi	r24, 0x00	; 0
    3dce:	90 e0       	ldi	r25, 0x00	; 0
    3dd0:	0e 94 e4 35 	call	0x6bc8	; 0x6bc8 <__floatunsisf>
    3dd4:	2a e9       	ldi	r18, 0x9A	; 154
    3dd6:	39 e9       	ldi	r19, 0x99	; 153
    3dd8:	49 e9       	ldi	r20, 0x99	; 153
    3dda:	5f e3       	ldi	r21, 0x3F	; 63
    3ddc:	0e 94 f3 36 	call	0x6de6	; 0x6de6 <__mulsf3>
    3de0:	9b 01       	movw	r18, r22
    3de2:	ac 01       	movw	r20, r24
    3de4:	c7 01       	movw	r24, r14
    3de6:	b6 01       	movw	r22, r12
    3de8:	0e 94 96 36 	call	0x6d2c	; 0x6d2c <__gesf2>
    3dec:	18 16       	cp	r1, r24
    3dee:	54 f4       	brge	.+20     	; 0x3e04 <__vector_10+0x236>
		{
			counters.over_voltage_counter++;
    3df0:	80 91 1a 25 	lds	r24, 0x251A	; 0x80251a <counters+0x36>
    3df4:	90 91 1b 25 	lds	r25, 0x251B	; 0x80251b <counters+0x37>
    3df8:	01 96       	adiw	r24, 0x01	; 1
    3dfa:	80 93 1a 25 	sts	0x251A, r24	; 0x80251a <counters+0x36>
    3dfe:	90 93 1b 25 	sts	0x251B, r25	; 0x80251b <counters+0x37>
    3e02:	04 c0       	rjmp	.+8      	; 0x3e0c <__vector_10+0x23e>
		}
		else
		{
			counters.over_voltage_counter = 0;
    3e04:	10 92 1a 25 	sts	0x251A, r1	; 0x80251a <counters+0x36>
    3e08:	10 92 1b 25 	sts	0x251B, r1	; 0x80251b <counters+0x37>
		}
		
		if (counters.clear_errors_pson_counter > 0)
    3e0c:	80 91 0a 25 	lds	r24, 0x250A	; 0x80250a <counters+0x26>
    3e10:	90 91 0b 25 	lds	r25, 0x250B	; 0x80250b <counters+0x27>
    3e14:	00 97       	sbiw	r24, 0x00	; 0
    3e16:	39 f0       	breq	.+14     	; 0x3e26 <__vector_10+0x258>
		{
			--counters.clear_errors_pson_counter;
    3e18:	01 97       	sbiw	r24, 0x01	; 1
    3e1a:	80 93 0a 25 	sts	0x250A, r24	; 0x80250a <counters+0x26>
    3e1e:	90 93 0b 25 	sts	0x250B, r25	; 0x80250b <counters+0x27>
			clear_all_errors();
    3e22:	0e 94 6e 25 	call	0x4adc	; 0x4adc <clear_all_errors>
		}
		if (twiMaster.status == TWIM_STATUS_BUSY || twiMasterForEEPROM.status == TWIM_STATUS_BUSY)
    3e26:	80 91 a1 24 	lds	r24, 0x24A1	; 0x8024a1 <twiMaster+0x39>
    3e2a:	81 30       	cpi	r24, 0x01	; 1
    3e2c:	21 f0       	breq	.+8      	; 0x3e36 <__vector_10+0x268>
    3e2e:	80 91 8d 25 	lds	r24, 0x258D	; 0x80258d <twiMasterForEEPROM+0x39>
    3e32:	81 30       	cpi	r24, 0x01	; 1
    3e34:	09 f5       	brne	.+66     	; 0x3e78 <__vector_10+0x2aa>
		{
			counters.i2c_busy_time++;
    3e36:	80 91 10 25 	lds	r24, 0x2510	; 0x802510 <counters+0x2c>
    3e3a:	90 91 11 25 	lds	r25, 0x2511	; 0x802511 <counters+0x2d>
    3e3e:	01 96       	adiw	r24, 0x01	; 1
    3e40:	80 93 10 25 	sts	0x2510, r24	; 0x802510 <counters+0x2c>
    3e44:	90 93 11 25 	sts	0x2511, r25	; 0x802511 <counters+0x2d>
		
			if (counters.i2c_busy_time > 100)
    3e48:	85 36       	cpi	r24, 0x65	; 101
    3e4a:	91 05       	cpc	r25, r1
    3e4c:	c8 f0       	brcs	.+50     	; 0x3e80 <__vector_10+0x2b2>
			{
				PMIC_CTRL = PMIC_LOLVLEN_bm; //enable low-lvl interrupts
    3e4e:	81 e0       	ldi	r24, 0x01	; 1
    3e50:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
				TWI_MasterInit(&twiMaster, &TWIC, TWI_MASTER_INTLVL_LO_gc, TWI_BAUDSETTING);
    3e54:	2f e5       	ldi	r18, 0x5F	; 95
    3e56:	40 e4       	ldi	r20, 0x40	; 64
    3e58:	60 e8       	ldi	r22, 0x80	; 128
    3e5a:	74 e0       	ldi	r23, 0x04	; 4
    3e5c:	88 e6       	ldi	r24, 0x68	; 104
    3e5e:	94 e2       	ldi	r25, 0x24	; 36
    3e60:	0e 94 0a 33 	call	0x6614	; 0x6614 <TWI_MasterInit>
				TWI_MasterInit(&twiMasterForEEPROM, &TWIE, TWI_MASTER_INTLVL_LO_gc, TWI_BAUDSETTING);
    3e64:	2f e5       	ldi	r18, 0x5F	; 95
    3e66:	40 e4       	ldi	r20, 0x40	; 64
    3e68:	60 ea       	ldi	r22, 0xA0	; 160
    3e6a:	74 e0       	ldi	r23, 0x04	; 4
    3e6c:	84 e5       	ldi	r24, 0x54	; 84
    3e6e:	95 e2       	ldi	r25, 0x25	; 37
    3e70:	0e 94 0a 33 	call	0x6614	; 0x6614 <TWI_MasterInit>
				//**************************************************
				wdt_reset(); // WATCH DOG TIMER RESET
    3e74:	a8 95       	wdr
    3e76:	04 c0       	rjmp	.+8      	; 0x3e80 <__vector_10+0x2b2>
				//**************************************************
			}
		}
		else
		{
			counters.i2c_busy_time = 0;
    3e78:	10 92 10 25 	sts	0x2510, r1	; 0x802510 <counters+0x2c>
    3e7c:	10 92 11 25 	sts	0x2511, r1	; 0x802511 <counters+0x2d>
		}
		if (counters.real_time_counter > 5000)
    3e80:	20 91 f8 24 	lds	r18, 0x24F8	; 0x8024f8 <counters+0x14>
    3e84:	30 91 f9 24 	lds	r19, 0x24F9	; 0x8024f9 <counters+0x15>
    3e88:	40 91 fa 24 	lds	r20, 0x24FA	; 0x8024fa <counters+0x16>
    3e8c:	50 91 fb 24 	lds	r21, 0x24FB	; 0x8024fb <counters+0x17>
    3e90:	60 91 fc 24 	lds	r22, 0x24FC	; 0x8024fc <counters+0x18>
    3e94:	70 91 fd 24 	lds	r23, 0x24FD	; 0x8024fd <counters+0x19>
    3e98:	80 91 fe 24 	lds	r24, 0x24FE	; 0x8024fe <counters+0x1a>
    3e9c:	90 91 ff 24 	lds	r25, 0x24FF	; 0x8024ff <counters+0x1b>
    3ea0:	28 38       	cpi	r18, 0x88	; 136
    3ea2:	33 41       	sbci	r19, 0x13	; 19
    3ea4:	41 05       	cpc	r20, r1
    3ea6:	51 05       	cpc	r21, r1
    3ea8:	61 05       	cpc	r22, r1
    3eaa:	71 05       	cpc	r23, r1
    3eac:	81 05       	cpc	r24, r1
    3eae:	91 05       	cpc	r25, r1
    3eb0:	e1 f0       	breq	.+56     	; 0x3eea <__vector_10+0x31c>
    3eb2:	d8 f0       	brcs	.+54     	; 0x3eea <__vector_10+0x31c>
		{
			if (counters.i2c_error_counter > 50)
    3eb4:	80 91 0e 25 	lds	r24, 0x250E	; 0x80250e <counters+0x2a>
    3eb8:	90 91 0f 25 	lds	r25, 0x250F	; 0x80250f <counters+0x2b>
    3ebc:	c3 97       	sbiw	r24, 0x33	; 51
    3ebe:	c8 f0       	brcs	.+50     	; 0x3ef2 <__vector_10+0x324>
			{
				PMIC_CTRL = PMIC_LOLVLEN_bm; //enable low-lvl interrupts
    3ec0:	81 e0       	ldi	r24, 0x01	; 1
    3ec2:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
				TWI_MasterInit(&twiMaster, &TWIC, TWI_MASTER_INTLVL_LO_gc, TWI_BAUDSETTING);
    3ec6:	2f e5       	ldi	r18, 0x5F	; 95
    3ec8:	40 e4       	ldi	r20, 0x40	; 64
    3eca:	60 e8       	ldi	r22, 0x80	; 128
    3ecc:	74 e0       	ldi	r23, 0x04	; 4
    3ece:	88 e6       	ldi	r24, 0x68	; 104
    3ed0:	94 e2       	ldi	r25, 0x24	; 36
    3ed2:	0e 94 0a 33 	call	0x6614	; 0x6614 <TWI_MasterInit>
				TWI_MasterInit(&twiMasterForEEPROM, &TWIE, TWI_MASTER_INTLVL_LO_gc, TWI_BAUDSETTING);
    3ed6:	2f e5       	ldi	r18, 0x5F	; 95
    3ed8:	40 e4       	ldi	r20, 0x40	; 64
    3eda:	60 ea       	ldi	r22, 0xA0	; 160
    3edc:	74 e0       	ldi	r23, 0x04	; 4
    3ede:	84 e5       	ldi	r24, 0x54	; 84
    3ee0:	95 e2       	ldi	r25, 0x25	; 37
    3ee2:	0e 94 0a 33 	call	0x6614	; 0x6614 <TWI_MasterInit>
				//**************************************************
				wdt_reset(); // WATCH DOG TIMER RESET
    3ee6:	a8 95       	wdr
    3ee8:	04 c0       	rjmp	.+8      	; 0x3ef2 <__vector_10+0x324>
				//**************************************************
			}
		}
		else
		{
			counters.i2c_error_counter = 0;
    3eea:	10 92 0e 25 	sts	0x250E, r1	; 0x80250e <counters+0x2a>
    3eee:	10 92 0f 25 	sts	0x250F, r1	; 0x80250f <counters+0x2b>
		}
	
		counters.screen_refresh_counter++;
    3ef2:	80 91 08 25 	lds	r24, 0x2508	; 0x802508 <counters+0x24>
    3ef6:	90 91 09 25 	lds	r25, 0x2509	; 0x802509 <counters+0x25>
    3efa:	01 96       	adiw	r24, 0x01	; 1
    3efc:	80 93 08 25 	sts	0x2508, r24	; 0x802508 <counters+0x24>
    3f00:	90 93 09 25 	sts	0x2509, r25	; 0x802509 <counters+0x25>
		if (counters.screen_refresh_counter > 100 && counters.real_time_counter > 5000)
    3f04:	85 36       	cpi	r24, 0x65	; 101
    3f06:	91 05       	cpc	r25, r1
    3f08:	00 f1       	brcs	.+64     	; 0x3f4a <__vector_10+0x37c>
    3f0a:	20 91 f8 24 	lds	r18, 0x24F8	; 0x8024f8 <counters+0x14>
    3f0e:	30 91 f9 24 	lds	r19, 0x24F9	; 0x8024f9 <counters+0x15>
    3f12:	40 91 fa 24 	lds	r20, 0x24FA	; 0x8024fa <counters+0x16>
    3f16:	50 91 fb 24 	lds	r21, 0x24FB	; 0x8024fb <counters+0x17>
    3f1a:	60 91 fc 24 	lds	r22, 0x24FC	; 0x8024fc <counters+0x18>
    3f1e:	70 91 fd 24 	lds	r23, 0x24FD	; 0x8024fd <counters+0x19>
    3f22:	80 91 fe 24 	lds	r24, 0x24FE	; 0x8024fe <counters+0x1a>
    3f26:	90 91 ff 24 	lds	r25, 0x24FF	; 0x8024ff <counters+0x1b>
    3f2a:	28 38       	cpi	r18, 0x88	; 136
    3f2c:	33 41       	sbci	r19, 0x13	; 19
    3f2e:	41 05       	cpc	r20, r1
    3f30:	51 05       	cpc	r21, r1
    3f32:	61 05       	cpc	r22, r1
    3f34:	71 05       	cpc	r23, r1
    3f36:	81 05       	cpc	r24, r1
    3f38:	91 05       	cpc	r25, r1
    3f3a:	39 f0       	breq	.+14     	; 0x3f4a <__vector_10+0x37c>
    3f3c:	30 f0       	brcs	.+12     	; 0x3f4a <__vector_10+0x37c>
		{
			write_screen();
    3f3e:	0e 94 bf 14 	call	0x297e	; 0x297e <write_screen>
		
			counters.screen_refresh_counter = 0;
    3f42:	10 92 08 25 	sts	0x2508, r1	; 0x802508 <counters+0x24>
    3f46:	10 92 09 25 	sts	0x2509, r1	; 0x802509 <counters+0x25>
		}
		if(counters.start_up_screen_timeout > 0)
    3f4a:	80 91 02 25 	lds	r24, 0x2502	; 0x802502 <counters+0x1e>
    3f4e:	90 91 03 25 	lds	r25, 0x2503	; 0x802503 <counters+0x1f>
    3f52:	00 97       	sbiw	r24, 0x00	; 0
    3f54:	49 f0       	breq	.+18     	; 0x3f68 <__vector_10+0x39a>
		{
			counters.start_up_screen_timeout -= 1;
    3f56:	01 97       	sbiw	r24, 0x01	; 1
    3f58:	80 93 02 25 	sts	0x2502, r24	; 0x802502 <counters+0x1e>
    3f5c:	90 93 03 25 	sts	0x2503, r25	; 0x802503 <counters+0x1f>
			if(counters.start_up_screen_timeout == 0)
    3f60:	89 2b       	or	r24, r25
    3f62:	11 f4       	brne	.+4      	; 0x3f68 <__vector_10+0x39a>
			{
				program_state.mode = NORMAL_MODE;
    3f64:	10 92 e7 23 	sts	0x23E7, r1	; 0x8023e7 <program_state+0x3>
			}
		}
		if (program_state.mode == SETTINGS_MODE && (counters.real_time_counter - counters.idle_time_counter) > 10)
    3f68:	c0 91 e7 23 	lds	r28, 0x23E7	; 0x8023e7 <program_state+0x3>
    3f6c:	c1 30       	cpi	r28, 0x01	; 1
    3f6e:	09 f0       	breq	.+2      	; 0x3f72 <__vector_10+0x3a4>
    3f70:	d0 c0       	rjmp	.+416    	; 0x4112 <__vector_10+0x544>
    3f72:	20 91 f8 24 	lds	r18, 0x24F8	; 0x8024f8 <counters+0x14>
    3f76:	30 91 f9 24 	lds	r19, 0x24F9	; 0x8024f9 <counters+0x15>
    3f7a:	40 91 fa 24 	lds	r20, 0x24FA	; 0x8024fa <counters+0x16>
    3f7e:	50 91 fb 24 	lds	r21, 0x24FB	; 0x8024fb <counters+0x17>
    3f82:	60 91 fc 24 	lds	r22, 0x24FC	; 0x8024fc <counters+0x18>
    3f86:	70 91 fd 24 	lds	r23, 0x24FD	; 0x8024fd <counters+0x19>
    3f8a:	80 91 fe 24 	lds	r24, 0x24FE	; 0x8024fe <counters+0x1a>
    3f8e:	90 91 ff 24 	lds	r25, 0x24FF	; 0x8024ff <counters+0x1b>
    3f92:	a0 90 f0 24 	lds	r10, 0x24F0	; 0x8024f0 <counters+0xc>
    3f96:	b0 90 f1 24 	lds	r11, 0x24F1	; 0x8024f1 <counters+0xd>
    3f9a:	c0 90 f2 24 	lds	r12, 0x24F2	; 0x8024f2 <counters+0xe>
    3f9e:	d0 90 f3 24 	lds	r13, 0x24F3	; 0x8024f3 <counters+0xf>
    3fa2:	e0 90 f4 24 	lds	r14, 0x24F4	; 0x8024f4 <counters+0x10>
    3fa6:	f0 90 f5 24 	lds	r15, 0x24F5	; 0x8024f5 <counters+0x11>
    3faa:	00 91 f6 24 	lds	r16, 0x24F6	; 0x8024f6 <counters+0x12>
    3fae:	10 91 f7 24 	lds	r17, 0x24F7	; 0x8024f7 <counters+0x13>
    3fb2:	0e 94 ae 38 	call	0x715c	; 0x715c <__subdi3>
    3fb6:	aa e0       	ldi	r26, 0x0A	; 10
    3fb8:	0e 94 b7 38 	call	0x716e	; 0x716e <__cmpdi2_s8>
    3fbc:	09 f0       	breq	.+2      	; 0x3fc0 <__vector_10+0x3f2>
    3fbe:	08 f4       	brcc	.+2      	; 0x3fc2 <__vector_10+0x3f4>
    3fc0:	a8 c0       	rjmp	.+336    	; 0x4112 <__vector_10+0x544>
		{
			clear_all_errors();
    3fc2:	0e 94 6e 25 	call	0x4adc	; 0x4adc <clear_all_errors>
			counters.settings_to_turn_off_counter--;
    3fc6:	80 91 04 25 	lds	r24, 0x2504	; 0x802504 <counters+0x20>
    3fca:	90 91 05 25 	lds	r25, 0x2505	; 0x802505 <counters+0x21>
    3fce:	01 97       	sbiw	r24, 0x01	; 1
    3fd0:	80 93 04 25 	sts	0x2504, r24	; 0x802504 <counters+0x20>
    3fd4:	90 93 05 25 	sts	0x2505, r25	; 0x802505 <counters+0x21>
		
			if (counters.settings_to_turn_off_counter == 0 && program_state.settings_row_num != 1 && program_state.settings_row_num != 2 && !program_state.testing_mode)
    3fd8:	89 2b       	or	r24, r25
    3fda:	09 f0       	breq	.+2      	; 0x3fde <__vector_10+0x410>
    3fdc:	a0 c0       	rjmp	.+320    	; 0x411e <__vector_10+0x550>
    3fde:	80 91 ff 23 	lds	r24, 0x23FF	; 0x8023ff <program_state+0x1b>
    3fe2:	81 50       	subi	r24, 0x01	; 1
    3fe4:	82 30       	cpi	r24, 0x02	; 2
    3fe6:	08 f4       	brcc	.+2      	; 0x3fea <__vector_10+0x41c>
    3fe8:	9a c0       	rjmp	.+308    	; 0x411e <__vector_10+0x550>
    3fea:	80 91 12 24 	lds	r24, 0x2412	; 0x802412 <program_state+0x2e>
    3fee:	81 11       	cpse	r24, r1
    3ff0:	96 c0       	rjmp	.+300    	; 0x411e <__vector_10+0x550>
			{
				program_state.mode = NORMAL_MODE;
    3ff2:	10 92 e7 23 	sts	0x23E7, r1	; 0x8023e7 <program_state+0x3>
			
				if (program_state.program == FOURTY_ONE || program_state.program == FOURTY_ONE_DUAL)
    3ff6:	80 91 e8 23 	lds	r24, 0x23E8	; 0x8023e8 <program_state+0x4>
    3ffa:	9f ef       	ldi	r25, 0xFF	; 255
    3ffc:	98 0f       	add	r25, r24
    3ffe:	92 30       	cpi	r25, 0x02	; 2
    4000:	08 f0       	brcs	.+2      	; 0x4004 <__vector_10+0x436>
    4002:	42 c0       	rjmp	.+132    	; 0x4088 <__vector_10+0x4ba>
				{
					if (program_state.num_outputs == DOUBLE)
    4004:	80 91 e4 23 	lds	r24, 0x23E4	; 0x8023e4 <program_state>
    4008:	90 91 e5 23 	lds	r25, 0x23E5	; 0x8023e5 <program_state+0x1>
    400c:	81 30       	cpi	r24, 0x01	; 1
    400e:	91 05       	cpc	r25, r1
    4010:	f1 f4       	brne	.+60     	; 0x404e <__vector_10+0x480>
					{
						output_one.max_current = 2500;
    4012:	24 ec       	ldi	r18, 0xC4	; 196
    4014:	39 e0       	ldi	r19, 0x09	; 9
    4016:	20 93 b5 24 	sts	0x24B5, r18	; 0x8024b5 <output_one+0x12>
    401a:	30 93 b6 24 	sts	0x24B6, r19	; 0x8024b6 <output_one+0x13>
						output_one.max_voltage = 5000;
    401e:	88 e8       	ldi	r24, 0x88	; 136
    4020:	93 e1       	ldi	r25, 0x13	; 19
    4022:	80 93 b7 24 	sts	0x24B7, r24	; 0x8024b7 <output_one+0x14>
    4026:	90 93 b8 24 	sts	0x24B8, r25	; 0x8024b8 <output_one+0x15>
						output_one.ina226_addr = OUTPUT1_INA226_ADDR; // 0x45 - THRIRTY_EIGTH, 0x41 - FOURTY_ONE
    402a:	41 e4       	ldi	r20, 0x41	; 65
    402c:	40 93 df 24 	sts	0x24DF, r20	; 0x8024df <output_one+0x3c>
						output_two.max_current = 2500;
    4030:	20 93 33 24 	sts	0x2433, r18	; 0x802433 <output_two+0x12>
    4034:	30 93 34 24 	sts	0x2434, r19	; 0x802434 <output_two+0x13>
						output_two.max_voltage = 5000;
    4038:	80 93 35 24 	sts	0x2435, r24	; 0x802435 <output_two+0x14>
    403c:	90 93 36 24 	sts	0x2436, r25	; 0x802436 <output_two+0x15>
						output_two.ina226_addr = OUTPUT2_INA226_ADDR;
    4040:	80 e4       	ldi	r24, 0x40	; 64
    4042:	80 93 5d 24 	sts	0x245D, r24	; 0x80245d <output_two+0x3c>
						program_state.program = FOURTY_ONE_DUAL;
    4046:	82 e0       	ldi	r24, 0x02	; 2
    4048:	80 93 e8 23 	sts	0x23E8, r24	; 0x8023e8 <program_state+0x4>
    404c:	3b c0       	rjmp	.+118    	; 0x40c4 <__vector_10+0x4f6>
					}
					else if (program_state.num_outputs == SINGLE)
    404e:	89 2b       	or	r24, r25
    4050:	c9 f5       	brne	.+114    	; 0x40c4 <__vector_10+0x4f6>
					{
						output_one.max_current = 5000;
    4052:	88 e8       	ldi	r24, 0x88	; 136
    4054:	93 e1       	ldi	r25, 0x13	; 19
    4056:	80 93 b5 24 	sts	0x24B5, r24	; 0x8024b5 <output_one+0x12>
    405a:	90 93 b6 24 	sts	0x24B6, r25	; 0x8024b6 <output_one+0x13>
						output_one.max_voltage = 5000;
    405e:	80 93 b7 24 	sts	0x24B7, r24	; 0x8024b7 <output_one+0x14>
    4062:	90 93 b8 24 	sts	0x24B8, r25	; 0x8024b8 <output_one+0x15>
						output_one.ina226_addr = OUTPUT1_INA226_ADDR; // 0x45 - THRIRTY_EIGTH, 0x41 - FOURTY_ONE
    4066:	21 e4       	ldi	r18, 0x41	; 65
    4068:	20 93 df 24 	sts	0x24DF, r18	; 0x8024df <output_one+0x3c>
						output_two.max_current = 5000;
    406c:	80 93 33 24 	sts	0x2433, r24	; 0x802433 <output_two+0x12>
    4070:	90 93 34 24 	sts	0x2434, r25	; 0x802434 <output_two+0x13>
						output_two.max_voltage = 5000;
    4074:	80 93 35 24 	sts	0x2435, r24	; 0x802435 <output_two+0x14>
    4078:	90 93 36 24 	sts	0x2436, r25	; 0x802436 <output_two+0x15>
						output_two.ina226_addr = OUTPUT2_INA226_ADDR;
    407c:	80 e4       	ldi	r24, 0x40	; 64
    407e:	80 93 5d 24 	sts	0x245D, r24	; 0x80245d <output_two+0x3c>
						program_state.program = FOURTY_ONE;
    4082:	c0 93 e8 23 	sts	0x23E8, r28	; 0x8023e8 <program_state+0x4>
    4086:	1e c0       	rjmp	.+60     	; 0x40c4 <__vector_10+0x4f6>
					}
				}
				else if (program_state.program == THIRTY_EIGHT)
    4088:	81 11       	cpse	r24, r1
    408a:	1c c0       	rjmp	.+56     	; 0x40c4 <__vector_10+0x4f6>
				{
					output_one.max_current = 2000;
    408c:	80 ed       	ldi	r24, 0xD0	; 208
    408e:	97 e0       	ldi	r25, 0x07	; 7
    4090:	80 93 b5 24 	sts	0x24B5, r24	; 0x8024b5 <output_one+0x12>
    4094:	90 93 b6 24 	sts	0x24B6, r25	; 0x8024b6 <output_one+0x13>
					output_one.max_voltage = 3000;
    4098:	88 eb       	ldi	r24, 0xB8	; 184
    409a:	9b e0       	ldi	r25, 0x0B	; 11
    409c:	80 93 b7 24 	sts	0x24B7, r24	; 0x8024b7 <output_one+0x14>
    40a0:	90 93 b8 24 	sts	0x24B8, r25	; 0x8024b8 <output_one+0x15>
					output_one.ina226_addr = OUTPUT1_INA226_ADDR; // 0x45 - THRIRTY_EIGTH, 0x41 - FOURTY_ONE
    40a4:	21 e4       	ldi	r18, 0x41	; 65
    40a6:	20 93 df 24 	sts	0x24DF, r18	; 0x8024df <output_one+0x3c>
					output_two.max_current = 3000;
    40aa:	80 93 33 24 	sts	0x2433, r24	; 0x802433 <output_two+0x12>
    40ae:	90 93 34 24 	sts	0x2434, r25	; 0x802434 <output_two+0x13>
					output_two.max_voltage = 5000;
    40b2:	88 e8       	ldi	r24, 0x88	; 136
    40b4:	93 e1       	ldi	r25, 0x13	; 19
    40b6:	80 93 35 24 	sts	0x2435, r24	; 0x802435 <output_two+0x14>
    40ba:	90 93 36 24 	sts	0x2436, r25	; 0x802436 <output_two+0x15>
					output_two.ina226_addr = OUTPUT2_INA226_ADDR;
    40be:	80 e4       	ldi	r24, 0x40	; 64
    40c0:	80 93 5d 24 	sts	0x245D, r24	; 0x80245d <output_two+0x3c>
				}
			
				if (output_one.target_current > output_one.max_current)
    40c4:	80 91 b5 24 	lds	r24, 0x24B5	; 0x8024b5 <output_one+0x12>
    40c8:	90 91 b6 24 	lds	r25, 0x24B6	; 0x8024b6 <output_one+0x13>
    40cc:	20 91 b3 24 	lds	r18, 0x24B3	; 0x8024b3 <output_one+0x10>
    40d0:	30 91 b4 24 	lds	r19, 0x24B4	; 0x8024b4 <output_one+0x11>
    40d4:	82 17       	cp	r24, r18
    40d6:	93 07       	cpc	r25, r19
    40d8:	20 f4       	brcc	.+8      	; 0x40e2 <__vector_10+0x514>
				{
					output_one.target_current = output_one.max_current;
    40da:	80 93 b3 24 	sts	0x24B3, r24	; 0x8024b3 <output_one+0x10>
    40de:	90 93 b4 24 	sts	0x24B4, r25	; 0x8024b4 <output_one+0x11>
				}
			
				if (output_two.target_current > output_two.max_current)
    40e2:	80 91 33 24 	lds	r24, 0x2433	; 0x802433 <output_two+0x12>
    40e6:	90 91 34 24 	lds	r25, 0x2434	; 0x802434 <output_two+0x13>
    40ea:	20 91 31 24 	lds	r18, 0x2431	; 0x802431 <output_two+0x10>
    40ee:	30 91 32 24 	lds	r19, 0x2432	; 0x802432 <output_two+0x11>
    40f2:	82 17       	cp	r24, r18
    40f4:	93 07       	cpc	r25, r19
    40f6:	20 f4       	brcc	.+8      	; 0x4100 <__vector_10+0x532>
				{
					output_two.target_current = output_two.max_current;
    40f8:	80 93 31 24 	sts	0x2431, r24	; 0x802431 <output_two+0x10>
    40fc:	90 93 32 24 	sts	0x2432, r25	; 0x802432 <output_two+0x11>
				}
				output_one.isCurrentAdjusted = FALSE;
    4100:	10 92 cc 24 	sts	0x24CC, r1	; 0x8024cc <output_one+0x29>
				output_one.needsAdjusting = FALSE;
    4104:	10 92 cd 24 	sts	0x24CD, r1	; 0x8024cd <output_one+0x2a>
				output_two.isCurrentAdjusted = FALSE;
    4108:	10 92 4a 24 	sts	0x244A, r1	; 0x80244a <output_two+0x29>
				output_two.needsAdjusting = FALSE;
    410c:	10 92 4b 24 	sts	0x244B, r1	; 0x80244b <output_two+0x2a>
    4110:	06 c0       	rjmp	.+12     	; 0x411e <__vector_10+0x550>
			}
		}
		else
		{
			counters.settings_to_turn_off_counter = SETTINGS_TO_TURN_OFF_AUTOMATICALLY_TIME;
    4112:	8c ed       	ldi	r24, 0xDC	; 220
    4114:	95 e0       	ldi	r25, 0x05	; 5
    4116:	80 93 04 25 	sts	0x2504, r24	; 0x802504 <counters+0x20>
    411a:	90 93 05 25 	sts	0x2505, r25	; 0x802505 <counters+0x21>
		}
	
		if(counters.rtc_int_count >= 500){ //if half a second has passed
    411e:	80 91 ea 24 	lds	r24, 0x24EA	; 0x8024ea <counters+0x6>
    4122:	90 91 eb 24 	lds	r25, 0x24EB	; 0x8024eb <counters+0x7>
    4126:	a0 91 ec 24 	lds	r26, 0x24EC	; 0x8024ec <counters+0x8>
    412a:	b0 91 ed 24 	lds	r27, 0x24ED	; 0x8024ed <counters+0x9>
    412e:	84 3f       	cpi	r24, 0xF4	; 244
    4130:	91 40       	sbci	r25, 0x01	; 1
    4132:	a1 05       	cpc	r26, r1
    4134:	b1 05       	cpc	r27, r1
    4136:	a8 f1       	brcs	.+106    	; 0x41a2 <__vector_10+0x5d4>
		
		
			if(program_state.output->set_current_state == INVISIBLE || program_state.output->set_current_state == VISIBLE)
    4138:	e0 91 17 24 	lds	r30, 0x2417	; 0x802417 <program_state+0x33>
    413c:	f0 91 18 24 	lds	r31, 0x2418	; 0x802418 <program_state+0x34>
    4140:	97 85       	ldd	r25, Z+15	; 0x0f
    4142:	92 30       	cpi	r25, 0x02	; 2
    4144:	18 f4       	brcc	.+6      	; 0x414c <__vector_10+0x57e>
			{
				program_state.output->set_current_state ^= 1; //flips value
    4146:	81 e0       	ldi	r24, 0x01	; 1
    4148:	89 27       	eor	r24, r25
    414a:	87 87       	std	Z+15, r24	; 0x0f
			}
		
			blink_led();
    414c:	0e 94 41 24 	call	0x4882	; 0x4882 <blink_led>
		
			if(counters.backlight_timer > 0)
    4150:	80 91 e4 24 	lds	r24, 0x24E4	; 0x8024e4 <counters>
    4154:	90 91 e5 24 	lds	r25, 0x24E5	; 0x8024e5 <counters+0x1>
    4158:	00 97       	sbiw	r24, 0x00	; 0
    415a:	89 f0       	breq	.+34     	; 0x417e <__vector_10+0x5b0>
			{
				--counters.backlight_timer;
    415c:	01 97       	sbiw	r24, 0x01	; 1
    415e:	80 93 e4 24 	sts	0x24E4, r24	; 0x8024e4 <counters>
    4162:	90 93 e5 24 	sts	0x24E5, r25	; 0x8024e5 <counters+0x1>
				if(counters.backlight_timer == 0)
    4166:	89 2b       	or	r24, r25
    4168:	51 f4       	brne	.+20     	; 0x417e <__vector_10+0x5b0>
				{
					program_state.mode = STARTUP_MODE;
    416a:	82 e0       	ldi	r24, 0x02	; 2
    416c:	80 93 e7 23 	sts	0x23E7, r24	; 0x8023e7 <program_state+0x3>
					LCD_BCKLGHT_OFF;
    4170:	40 e0       	ldi	r20, 0x00	; 0
    4172:	64 ed       	ldi	r22, 0xD4	; 212
    4174:	70 e2       	ldi	r23, 0x20	; 32
    4176:	80 e3       	ldi	r24, 0x30	; 48
    4178:	90 e0       	ldi	r25, 0x00	; 0
    417a:	0e 94 c7 01 	call	0x38e	; 0x38e <wr8>
				}
			}
		
			if(program_state.changing_settings > 0)
    417e:	80 91 e6 23 	lds	r24, 0x23E6	; 0x8023e6 <program_state+0x2>
    4182:	88 23       	and	r24, r24
    4184:	31 f0       	breq	.+12     	; 0x4192 <__vector_10+0x5c4>
			{
				--program_state.changing_settings;
    4186:	81 50       	subi	r24, 0x01	; 1
    4188:	80 93 e6 23 	sts	0x23E6, r24	; 0x8023e6 <program_state+0x2>
				program_state.need_to_save_target_current = TRUE;
    418c:	81 e0       	ldi	r24, 0x01	; 1
    418e:	80 93 16 24 	sts	0x2416, r24	; 0x802416 <program_state+0x32>
			}
		
			counters.rtc_int_count = 0;
    4192:	10 92 ea 24 	sts	0x24EA, r1	; 0x8024ea <counters+0x6>
    4196:	10 92 eb 24 	sts	0x24EB, r1	; 0x8024eb <counters+0x7>
    419a:	10 92 ec 24 	sts	0x24EC, r1	; 0x8024ec <counters+0x8>
    419e:	10 92 ed 24 	sts	0x24ED, r1	; 0x8024ed <counters+0x9>
		}
	}
	
	RTC_INTFLAGS = 1; //clear OVF interrupt flag
    41a2:	81 e0       	ldi	r24, 0x01	; 1
    41a4:	80 93 03 04 	sts	0x0403, r24	; 0x800403 <__TEXT_REGION_LENGTH__+0x700403>
}
    41a8:	ff 91       	pop	r31
    41aa:	ef 91       	pop	r30
    41ac:	cf 91       	pop	r28
    41ae:	bf 91       	pop	r27
    41b0:	af 91       	pop	r26
    41b2:	9f 91       	pop	r25
    41b4:	8f 91       	pop	r24
    41b6:	7f 91       	pop	r23
    41b8:	6f 91       	pop	r22
    41ba:	5f 91       	pop	r21
    41bc:	4f 91       	pop	r20
    41be:	3f 91       	pop	r19
    41c0:	2f 91       	pop	r18
    41c2:	1f 91       	pop	r17
    41c4:	0f 91       	pop	r16
    41c6:	ff 90       	pop	r15
    41c8:	ef 90       	pop	r14
    41ca:	df 90       	pop	r13
    41cc:	cf 90       	pop	r12
    41ce:	bf 90       	pop	r11
    41d0:	af 90       	pop	r10
    41d2:	0f 90       	pop	r0
    41d4:	0f be       	out	0x3f, r0	; 63
    41d6:	0f 90       	pop	r0
    41d8:	1f 90       	pop	r1
    41da:	18 95       	reti

000041dc <__vector_13>:


ISR(TWIC_TWIM_vect)
{
    41dc:	1f 92       	push	r1
    41de:	0f 92       	push	r0
    41e0:	0f b6       	in	r0, 0x3f	; 63
    41e2:	0f 92       	push	r0
    41e4:	11 24       	eor	r1, r1
    41e6:	2f 93       	push	r18
    41e8:	3f 93       	push	r19
    41ea:	4f 93       	push	r20
    41ec:	5f 93       	push	r21
    41ee:	6f 93       	push	r22
    41f0:	7f 93       	push	r23
    41f2:	8f 93       	push	r24
    41f4:	9f 93       	push	r25
    41f6:	af 93       	push	r26
    41f8:	bf 93       	push	r27
    41fa:	ef 93       	push	r30
    41fc:	ff 93       	push	r31
	if (powerGood)
    41fe:	80 91 e3 23 	lds	r24, 0x23E3	; 0x8023e3 <powerGood>
    4202:	88 23       	and	r24, r24
    4204:	21 f0       	breq	.+8      	; 0x420e <__vector_13+0x32>
	{
		TWI_MasterInterruptHandler(&twiMaster);
    4206:	88 e6       	ldi	r24, 0x68	; 104
    4208:	94 e2       	ldi	r25, 0x24	; 36
    420a:	0e 94 b5 34 	call	0x696a	; 0x696a <TWI_MasterInterruptHandler>
	}
}
    420e:	ff 91       	pop	r31
    4210:	ef 91       	pop	r30
    4212:	bf 91       	pop	r27
    4214:	af 91       	pop	r26
    4216:	9f 91       	pop	r25
    4218:	8f 91       	pop	r24
    421a:	7f 91       	pop	r23
    421c:	6f 91       	pop	r22
    421e:	5f 91       	pop	r21
    4220:	4f 91       	pop	r20
    4222:	3f 91       	pop	r19
    4224:	2f 91       	pop	r18
    4226:	0f 90       	pop	r0
    4228:	0f be       	out	0x3f, r0	; 63
    422a:	0f 90       	pop	r0
    422c:	1f 90       	pop	r1
    422e:	18 95       	reti

00004230 <__vector_46>:
ISR(TWIE_TWIM_vect)
{
    4230:	1f 92       	push	r1
    4232:	0f 92       	push	r0
    4234:	0f b6       	in	r0, 0x3f	; 63
    4236:	0f 92       	push	r0
    4238:	11 24       	eor	r1, r1
    423a:	2f 93       	push	r18
    423c:	3f 93       	push	r19
    423e:	4f 93       	push	r20
    4240:	5f 93       	push	r21
    4242:	6f 93       	push	r22
    4244:	7f 93       	push	r23
    4246:	8f 93       	push	r24
    4248:	9f 93       	push	r25
    424a:	af 93       	push	r26
    424c:	bf 93       	push	r27
    424e:	ef 93       	push	r30
    4250:	ff 93       	push	r31
	if (powerGood)
    4252:	80 91 e3 23 	lds	r24, 0x23E3	; 0x8023e3 <powerGood>
    4256:	88 23       	and	r24, r24
    4258:	21 f0       	breq	.+8      	; 0x4262 <__vector_46+0x32>
	{
		TWI_MasterInterruptHandler(&twiMasterForEEPROM);
    425a:	84 e5       	ldi	r24, 0x54	; 84
    425c:	95 e2       	ldi	r25, 0x25	; 37
    425e:	0e 94 b5 34 	call	0x696a	; 0x696a <TWI_MasterInterruptHandler>
	}
}
    4262:	ff 91       	pop	r31
    4264:	ef 91       	pop	r30
    4266:	bf 91       	pop	r27
    4268:	af 91       	pop	r26
    426a:	9f 91       	pop	r25
    426c:	8f 91       	pop	r24
    426e:	7f 91       	pop	r23
    4270:	6f 91       	pop	r22
    4272:	5f 91       	pop	r21
    4274:	4f 91       	pop	r20
    4276:	3f 91       	pop	r19
    4278:	2f 91       	pop	r18
    427a:	0f 90       	pop	r0
    427c:	0f be       	out	0x3f, r0	; 63
    427e:	0f 90       	pop	r0
    4280:	1f 90       	pop	r1
    4282:	18 95       	reti

00004284 <debounce>:
/*          6 times more than @precisionUs)                             */
/* @return - whether the function debounced pin correctly (If running   */
/*           time of the function reached @maxUs returns false(0))      */
/************************************************************************/
uint8_t debounce(volatile unsigned char *port, uint8_t pin, uint8_t precisionUs, uint8_t maxUs)
{
    4284:	dc 01       	movw	r26, r24
    4286:	e1 e0       	ldi	r30, 0x01	; 1
    4288:	f0 e0       	ldi	r31, 0x00	; 0
    428a:	02 c0       	rjmp	.+4      	; 0x4290 <debounce+0xc>
    428c:	ee 0f       	add	r30, r30
    428e:	ff 1f       	adc	r31, r31
    4290:	6a 95       	dec	r22
    4292:	e2 f7       	brpl	.-8      	; 0x428c <debounce+0x8>
	uint8_t counter = 0;
	uint8_t counterUs = 0;
	uint8_t isHigh = FALSE;
    4294:	30 e0       	ldi	r19, 0x00	; 0
/*           time of the function reached @maxUs returns false(0))      */
/************************************************************************/
uint8_t debounce(volatile unsigned char *port, uint8_t pin, uint8_t precisionUs, uint8_t maxUs)
{
	uint8_t counter = 0;
	uint8_t counterUs = 0;
    4296:	50 e0       	ldi	r21, 0x00	; 0
/* @return - whether the function debounced pin correctly (If running   */
/*           time of the function reached @maxUs returns false(0))      */
/************************************************************************/
uint8_t debounce(volatile unsigned char *port, uint8_t pin, uint8_t precisionUs, uint8_t maxUs)
{
	uint8_t counter = 0;
    4298:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t counterUs = 0;
	uint8_t isHigh = FALSE;
	
	while(counter != precisionUs && counterUs != maxUs)
    429a:	94 13       	cpse	r25, r20
    429c:	05 c0       	rjmp	.+10     	; 0x42a8 <debounce+0x24>
		}
		_delay_us(1);
		counterUs++;
	}
	
	return counterUs != maxUs;
    429e:	81 e0       	ldi	r24, 0x01	; 1
    42a0:	25 13       	cpse	r18, r21
    42a2:	1d c0       	rjmp	.+58     	; 0x42de <debounce+0x5a>
    42a4:	80 e0       	ldi	r24, 0x00	; 0
    42a6:	08 95       	ret
{
	uint8_t counter = 0;
	uint8_t counterUs = 0;
	uint8_t isHigh = FALSE;
	
	while(counter != precisionUs && counterUs != maxUs)
    42a8:	52 17       	cp	r21, r18
    42aa:	c9 f3       	breq	.-14     	; 0x429e <debounce+0x1a>
	{
		// *(volatile uint8_t *)(port) - is a dereference of a port's address, therefore, we read directly from memory
		if(*(volatile uint8_t *)(port) & (1 << pin))
    42ac:	6c 91       	ld	r22, X
    42ae:	70 e0       	ldi	r23, 0x00	; 0
    42b0:	6e 23       	and	r22, r30
    42b2:	7f 23       	and	r23, r31
    42b4:	67 2b       	or	r22, r23
    42b6:	29 f0       	breq	.+10     	; 0x42c2 <debounce+0x3e>
		{
			counter = isHigh ? counter + 1 : 0;
    42b8:	33 23       	and	r19, r19
    42ba:	39 f0       	breq	.+14     	; 0x42ca <debounce+0x46>
    42bc:	9f 5f       	subi	r25, 0xFF	; 255
			isHigh = TRUE;
    42be:	31 e0       	ldi	r19, 0x01	; 1
    42c0:	08 c0       	rjmp	.+16     	; 0x42d2 <debounce+0x4e>
		}
		else
		{
			counter = isHigh ? 0 : counter + 1;
    42c2:	31 11       	cpse	r19, r1
    42c4:	04 c0       	rjmp	.+8      	; 0x42ce <debounce+0x4a>
    42c6:	9f 5f       	subi	r25, 0xFF	; 255
    42c8:	04 c0       	rjmp	.+8      	; 0x42d2 <debounce+0x4e>
	{
		// *(volatile uint8_t *)(port) - is a dereference of a port's address, therefore, we read directly from memory
		if(*(volatile uint8_t *)(port) & (1 << pin))
		{
			counter = isHigh ? counter + 1 : 0;
			isHigh = TRUE;
    42ca:	31 e0       	ldi	r19, 0x01	; 1
    42cc:	01 c0       	rjmp	.+2      	; 0x42d0 <debounce+0x4c>
		}
		else
		{
			counter = isHigh ? 0 : counter + 1;
			isHigh = FALSE;
    42ce:	30 e0       	ldi	r19, 0x00	; 0
			counter = isHigh ? counter + 1 : 0;
			isHigh = TRUE;
		}
		else
		{
			counter = isHigh ? 0 : counter + 1;
    42d0:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    42d2:	86 e0       	ldi	r24, 0x06	; 6
    42d4:	8a 95       	dec	r24
    42d6:	f1 f7       	brne	.-4      	; 0x42d4 <debounce+0x50>
    42d8:	00 c0       	rjmp	.+0      	; 0x42da <debounce+0x56>
			isHigh = FALSE;
		}
		_delay_us(1);
		counterUs++;
    42da:	5f 5f       	subi	r21, 0xFF	; 255
    42dc:	de cf       	rjmp	.-68     	; 0x429a <debounce+0x16>
	}
	
	return counterUs != maxUs;
}
    42de:	08 95       	ret

000042e0 <__vector_66>:

ISR(PORTA_INT0_vect)//interrupts from an encoder turn or push
{
    42e0:	1f 92       	push	r1
    42e2:	0f 92       	push	r0
    42e4:	0f b6       	in	r0, 0x3f	; 63
    42e6:	0f 92       	push	r0
    42e8:	11 24       	eor	r1, r1
    42ea:	0f 93       	push	r16
    42ec:	1f 93       	push	r17
    42ee:	2f 93       	push	r18
    42f0:	3f 93       	push	r19
    42f2:	4f 93       	push	r20
    42f4:	5f 93       	push	r21
    42f6:	6f 93       	push	r22
    42f8:	7f 93       	push	r23
    42fa:	8f 93       	push	r24
    42fc:	9f 93       	push	r25
    42fe:	af 93       	push	r26
    4300:	bf 93       	push	r27
    4302:	cf 93       	push	r28
    4304:	df 93       	push	r29
    4306:	ef 93       	push	r30
    4308:	ff 93       	push	r31
	if (powerGood)
    430a:	80 91 e3 23 	lds	r24, 0x23E3	; 0x8023e3 <powerGood>
    430e:	88 23       	and	r24, r24
    4310:	09 f4       	brne	.+2      	; 0x4314 <__vector_66+0x34>
    4312:	c4 c1       	rjmp	.+904    	; 0x469c <__vector_66+0x3bc>
	{
	
		output_one.pson_was_low = FALSE;
    4314:	10 92 d1 24 	sts	0x24D1, r1	; 0x8024d1 <output_one+0x2e>
		output_two.pson_was_low = FALSE;
    4318:	10 92 4f 24 	sts	0x244F, r1	; 0x80244f <output_two+0x2e>
		output_one.set_current_tries = 0;
    431c:	10 92 c1 24 	sts	0x24C1, r1	; 0x8024c1 <output_one+0x1e>
		output_two.set_current_tries = 0;
    4320:	10 92 3f 24 	sts	0x243F, r1	; 0x80243f <output_two+0x1e>
			output_one.set_current_tries = 0;
			output_two.set_current_tries = 0;
		}
		
		bool is_debounce_successful = TRUE;
		is_debounce_successful &= debounce(&PORTA_IN, ENCDR_SW, 10, 60);
    4324:	2c e3       	ldi	r18, 0x3C	; 60
    4326:	4a e0       	ldi	r20, 0x0A	; 10
    4328:	63 e0       	ldi	r22, 0x03	; 3
    432a:	88 e0       	ldi	r24, 0x08	; 8
    432c:	96 e0       	ldi	r25, 0x06	; 6
    432e:	0e 94 42 21 	call	0x4284	; 0x4284 <debounce>
    4332:	d8 2f       	mov	r29, r24
		is_debounce_successful &= debounce(&PORTA_IN, ENCDR_A, 10, 60);
    4334:	2c e3       	ldi	r18, 0x3C	; 60
    4336:	4a e0       	ldi	r20, 0x0A	; 10
    4338:	61 e0       	ldi	r22, 0x01	; 1
    433a:	88 e0       	ldi	r24, 0x08	; 8
    433c:	96 e0       	ldi	r25, 0x06	; 6
    433e:	0e 94 42 21 	call	0x4284	; 0x4284 <debounce>
    4342:	c8 2f       	mov	r28, r24
		is_debounce_successful &= debounce(&PORTA_IN, ENCDR_B, 10, 60);
    4344:	2c e3       	ldi	r18, 0x3C	; 60
    4346:	4a e0       	ldi	r20, 0x0A	; 10
    4348:	62 e0       	ldi	r22, 0x02	; 2
    434a:	88 e0       	ldi	r24, 0x08	; 8
    434c:	96 e0       	ldi	r25, 0x06	; 6
    434e:	0e 94 42 21 	call	0x4284	; 0x4284 <debounce>
		
		if (is_debounce_successful)
    4352:	8c 23       	and	r24, r28
    4354:	90 e0       	ldi	r25, 0x00	; 0
    4356:	0d 2f       	mov	r16, r29
    4358:	01 70       	andi	r16, 0x01	; 1
    435a:	10 e0       	ldi	r17, 0x00	; 0
    435c:	80 23       	and	r24, r16
    435e:	91 23       	and	r25, r17
    4360:	89 2b       	or	r24, r25
    4362:	09 f4       	brne	.+2      	; 0x4366 <__vector_66+0x86>
    4364:	9b c1       	rjmp	.+822    	; 0x469c <__vector_66+0x3bc>
		{
			if(!(PORTA_IN & (1 << ENCDR_SW)))//if switch pin is low
    4366:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
    436a:	83 fd       	sbrc	r24, 3
    436c:	28 c0       	rjmp	.+80     	; 0x43be <__vector_66+0xde>
			{ 
				if(counters.backlight_timer > 0)
    436e:	80 91 e4 24 	lds	r24, 0x24E4	; 0x8024e4 <counters>
    4372:	90 91 e5 24 	lds	r25, 0x24E5	; 0x8024e5 <counters+0x1>
    4376:	e0 91 17 24 	lds	r30, 0x2417	; 0x802417 <program_state+0x33>
    437a:	f0 91 18 24 	lds	r31, 0x2418	; 0x802418 <program_state+0x34>
    437e:	89 2b       	or	r24, r25
    4380:	31 f4       	brne	.+12     	; 0x438e <__vector_66+0xae>
				{
					program_state.output->set_current_state = VISIBLE_LOCKED;
				}
				else
				{
					counters.start_up_screen_timeout = STARTUP_SCREEN_TIME;
    4382:	88 eb       	ldi	r24, 0xB8	; 184
    4384:	9b e0       	ldi	r25, 0x0B	; 11
    4386:	80 93 02 25 	sts	0x2502, r24	; 0x802502 <counters+0x1e>
    438a:	90 93 03 25 	sts	0x2503, r25	; 0x802503 <counters+0x1f>
					program_state.output->set_current_state = VISIBLE_LOCKED;
    438e:	82 e0       	ldi	r24, 0x02	; 2
    4390:	87 87       	std	Z+15, r24	; 0x0f
				}
		
		
				if(!encoder_state.holding_click)
    4392:	80 91 63 24 	lds	r24, 0x2463	; 0x802463 <encoder_state+0x3>
    4396:	81 11       	cpse	r24, r1
    4398:	0b c0       	rjmp	.+22     	; 0x43b0 <__vector_66+0xd0>
				{
					counters.periodic_int_count = 0;
    439a:	10 92 e6 24 	sts	0x24E6, r1	; 0x8024e6 <counters+0x2>
    439e:	10 92 e7 24 	sts	0x24E7, r1	; 0x8024e7 <counters+0x3>
    43a2:	10 92 e8 24 	sts	0x24E8, r1	; 0x8024e8 <counters+0x4>
    43a6:	10 92 e9 24 	sts	0x24E9, r1	; 0x8024e9 <counters+0x5>
					encoder_state.holding_click = TRUE;
    43aa:	81 e0       	ldi	r24, 0x01	; 1
    43ac:	80 93 63 24 	sts	0x2463, r24	; 0x802463 <encoder_state+0x3>
				}
				counters.backlight_timer = BCKLGHT_DFLT_TIME;
    43b0:	80 e4       	ldi	r24, 0x40	; 64
    43b2:	99 e1       	ldi	r25, 0x19	; 25
    43b4:	80 93 e4 24 	sts	0x24E4, r24	; 0x8024e4 <counters>
    43b8:	90 93 e5 24 	sts	0x24E5, r25	; 0x8024e5 <counters+0x1>
    43bc:	49 c1       	rjmp	.+658    	; 0x4650 <__vector_66+0x370>
			}
			else if(encoder_state.both_low)
    43be:	80 91 62 24 	lds	r24, 0x2462	; 0x802462 <encoder_state+0x2>
    43c2:	88 23       	and	r24, r24
    43c4:	09 f4       	brne	.+2      	; 0x43c8 <__vector_66+0xe8>
    43c6:	06 c1       	rjmp	.+524    	; 0x45d4 <__vector_66+0x2f4>
			{
				if(counters.backlight_timer > 0)
    43c8:	80 91 e4 24 	lds	r24, 0x24E4	; 0x8024e4 <counters>
    43cc:	90 91 e5 24 	lds	r25, 0x24E5	; 0x8024e5 <counters+0x1>
    43d0:	89 2b       	or	r24, r25
    43d2:	09 f4       	brne	.+2      	; 0x43d6 <__vector_66+0xf6>
    43d4:	d0 c0       	rjmp	.+416    	; 0x4576 <__vector_66+0x296>
				{
					if((PORTA_IN & (1 << ENCDR_B)))//left turn
    43d6:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
    43da:	82 ff       	sbrs	r24, 2
    43dc:	5d c0       	rjmp	.+186    	; 0x4498 <__vector_66+0x1b8>
					{ 
						if(program_state.mode == NORMAL_MODE && program_state.output->set_current_state != VISIBLE_LOCKED)
    43de:	80 91 e7 23 	lds	r24, 0x23E7	; 0x8023e7 <program_state+0x3>
    43e2:	81 11       	cpse	r24, r1
    43e4:	12 c0       	rjmp	.+36     	; 0x440a <__vector_66+0x12a>
    43e6:	80 91 17 24 	lds	r24, 0x2417	; 0x802417 <program_state+0x33>
    43ea:	90 91 18 24 	lds	r25, 0x2418	; 0x802418 <program_state+0x34>
    43ee:	fc 01       	movw	r30, r24
    43f0:	27 85       	ldd	r18, Z+15	; 0x0f
    43f2:	22 30       	cpi	r18, 0x02	; 2
    43f4:	51 f0       	breq	.+20     	; 0x440a <__vector_66+0x12a>
						{
							decrease_target_current(program_state.output);
    43f6:	0e 94 66 23 	call	0x46cc	; 0x46cc <decrease_target_current>
					
							counters.debug_clicks_counter = 0;
    43fa:	10 92 14 25 	sts	0x2514, r1	; 0x802514 <counters+0x30>
    43fe:	10 92 15 25 	sts	0x2515, r1	; 0x802515 <counters+0x31>
							counters.calibrate_clicks_counter = 0;
    4402:	10 92 16 25 	sts	0x2516, r1	; 0x802516 <counters+0x32>
    4406:	10 92 17 25 	sts	0x2517, r1	; 0x802517 <counters+0x33>
						}
				
						if (program_state.mode == SETTINGS_MODE)
    440a:	20 91 e7 23 	lds	r18, 0x23E7	; 0x8023e7 <program_state+0x3>
    440e:	21 30       	cpi	r18, 0x01	; 1
    4410:	09 f0       	breq	.+2      	; 0x4414 <__vector_66+0x134>
    4412:	bd c0       	rjmp	.+378    	; 0x458e <__vector_66+0x2ae>
						{
							if (program_state.testing_mode)
    4414:	80 91 12 24 	lds	r24, 0x2412	; 0x802412 <program_state+0x2e>
    4418:	88 23       	and	r24, r24
    441a:	d1 f0       	breq	.+52     	; 0x4450 <__vector_66+0x170>
							{
								if (program_state.settings_row_num == 0)
    441c:	80 91 ff 23 	lds	r24, 0x23FF	; 0x8023ff <program_state+0x1b>
    4420:	81 11       	cpse	r24, r1
    4422:	06 c0       	rjmp	.+12     	; 0x4430 <__vector_66+0x150>
								{
									OVER_TEMP_VALUE--;
    4424:	80 91 19 24 	lds	r24, 0x2419	; 0x802419 <OVER_TEMP_VALUE>
    4428:	90 91 1a 24 	lds	r25, 0x241A	; 0x80241a <OVER_TEMP_VALUE+0x1>
    442c:	01 97       	sbiw	r24, 0x01	; 1
    442e:	60 c0       	rjmp	.+192    	; 0x44f0 <__vector_66+0x210>
								}
								else if (program_state.settings_row_num == 1)
    4430:	81 30       	cpi	r24, 0x01	; 1
    4432:	09 f0       	breq	.+2      	; 0x4436 <__vector_66+0x156>
    4434:	ac c0       	rjmp	.+344    	; 0x458e <__vector_66+0x2ae>
								{
									TIME_TO_CHECK_TEMP -= 1000;
    4436:	80 91 1d 24 	lds	r24, 0x241D	; 0x80241d <TIME_TO_CHECK_TEMP>
    443a:	90 91 1e 24 	lds	r25, 0x241E	; 0x80241e <TIME_TO_CHECK_TEMP+0x1>
    443e:	a0 91 1f 24 	lds	r26, 0x241F	; 0x80241f <TIME_TO_CHECK_TEMP+0x2>
    4442:	b0 91 20 24 	lds	r27, 0x2420	; 0x802420 <TIME_TO_CHECK_TEMP+0x3>
    4446:	88 5e       	subi	r24, 0xE8	; 232
    4448:	93 40       	sbci	r25, 0x03	; 3
    444a:	a1 09       	sbc	r26, r1
    444c:	b1 09       	sbc	r27, r1
    444e:	64 c0       	rjmp	.+200    	; 0x4518 <__vector_66+0x238>
								}
							}
							else
							{
								counters.debug_clicks_counter = 0;
    4450:	10 92 14 25 	sts	0x2514, r1	; 0x802514 <counters+0x30>
    4454:	10 92 15 25 	sts	0x2515, r1	; 0x802515 <counters+0x31>
								counters.calibrate_clicks_counter++;
    4458:	80 91 16 25 	lds	r24, 0x2516	; 0x802516 <counters+0x32>
    445c:	90 91 17 25 	lds	r25, 0x2517	; 0x802517 <counters+0x33>
    4460:	01 96       	adiw	r24, 0x01	; 1
    4462:	80 93 16 25 	sts	0x2516, r24	; 0x802516 <counters+0x32>
    4466:	90 93 17 25 	sts	0x2517, r25	; 0x802517 <counters+0x33>
								
								if (counters.calibrate_clicks_counter > 30)
    446a:	4f 97       	sbiw	r24, 0x1f	; 31
    446c:	20 f0       	brcs	.+8      	; 0x4476 <__vector_66+0x196>
								{
									program_state.calibrating_mode = TRUE;
    446e:	20 93 14 24 	sts	0x2414, r18	; 0x802414 <program_state+0x30>
									program_state.debug_mode = FALSE;
    4472:	10 92 13 24 	sts	0x2413, r1	; 0x802413 <program_state+0x2f>
								}
								
								if (program_state.calibrating_mode)
    4476:	80 91 14 24 	lds	r24, 0x2414	; 0x802414 <program_state+0x30>
    447a:	81 11       	cpse	r24, r1
								{
									program_state.settings_row_num = 0;
    447c:	10 92 ff 23 	sts	0x23FF, r1	; 0x8023ff <program_state+0x1b>
								}
								
								if (program_state.debug_mode)
    4480:	80 91 13 24 	lds	r24, 0x2413	; 0x802413 <program_state+0x2f>
    4484:	88 23       	and	r24, r24
    4486:	09 f4       	brne	.+2      	; 0x448a <__vector_66+0x1aa>
    4488:	82 c0       	rjmp	.+260    	; 0x458e <__vector_66+0x2ae>
								{
									if (program_state.settings_row_num > 0)
    448a:	80 91 ff 23 	lds	r24, 0x23FF	; 0x8023ff <program_state+0x1b>
    448e:	88 23       	and	r24, r24
    4490:	09 f4       	brne	.+2      	; 0x4494 <__vector_66+0x1b4>
    4492:	7d c0       	rjmp	.+250    	; 0x458e <__vector_66+0x2ae>
									{
										program_state.settings_row_num--;
    4494:	81 50       	subi	r24, 0x01	; 1
    4496:	6c c0       	rjmp	.+216    	; 0x4570 <__vector_66+0x290>
									}
								}
							}
						}
					}
					else if((PORTA_IN & (1 << ENCDR_A))) //right turn
    4498:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
    449c:	81 ff       	sbrs	r24, 1
    449e:	77 c0       	rjmp	.+238    	; 0x458e <__vector_66+0x2ae>
					{
						if(program_state.mode == NORMAL_MODE && program_state.output->set_current_state != VISIBLE_LOCKED)
    44a0:	80 91 e7 23 	lds	r24, 0x23E7	; 0x8023e7 <program_state+0x3>
    44a4:	81 11       	cpse	r24, r1
    44a6:	12 c0       	rjmp	.+36     	; 0x44cc <__vector_66+0x1ec>
    44a8:	80 91 17 24 	lds	r24, 0x2417	; 0x802417 <program_state+0x33>
    44ac:	90 91 18 24 	lds	r25, 0x2418	; 0x802418 <program_state+0x34>
    44b0:	fc 01       	movw	r30, r24
    44b2:	27 85       	ldd	r18, Z+15	; 0x0f
    44b4:	22 30       	cpi	r18, 0x02	; 2
    44b6:	51 f0       	breq	.+20     	; 0x44cc <__vector_66+0x1ec>
						{
							increase_target_current(program_state.output);
    44b8:	0e 94 a3 23 	call	0x4746	; 0x4746 <increase_target_current>
					
							counters.debug_clicks_counter = 0;
    44bc:	10 92 14 25 	sts	0x2514, r1	; 0x802514 <counters+0x30>
    44c0:	10 92 15 25 	sts	0x2515, r1	; 0x802515 <counters+0x31>
							counters.calibrate_clicks_counter = 0;
    44c4:	10 92 16 25 	sts	0x2516, r1	; 0x802516 <counters+0x32>
    44c8:	10 92 17 25 	sts	0x2517, r1	; 0x802517 <counters+0x33>
						}
				
						if (program_state.mode == SETTINGS_MODE)
    44cc:	20 91 e7 23 	lds	r18, 0x23E7	; 0x8023e7 <program_state+0x3>
    44d0:	21 30       	cpi	r18, 0x01	; 1
    44d2:	09 f0       	breq	.+2      	; 0x44d6 <__vector_66+0x1f6>
    44d4:	5c c0       	rjmp	.+184    	; 0x458e <__vector_66+0x2ae>
						{
							if (program_state.testing_mode)
    44d6:	80 91 12 24 	lds	r24, 0x2412	; 0x802412 <program_state+0x2e>
    44da:	88 23       	and	r24, r24
    44dc:	31 f1       	breq	.+76     	; 0x452a <__vector_66+0x24a>
							{
								if (program_state.settings_row_num == 0)
    44de:	80 91 ff 23 	lds	r24, 0x23FF	; 0x8023ff <program_state+0x1b>
    44e2:	81 11       	cpse	r24, r1
    44e4:	0a c0       	rjmp	.+20     	; 0x44fa <__vector_66+0x21a>
								{
									OVER_TEMP_VALUE++;
    44e6:	80 91 19 24 	lds	r24, 0x2419	; 0x802419 <OVER_TEMP_VALUE>
    44ea:	90 91 1a 24 	lds	r25, 0x241A	; 0x80241a <OVER_TEMP_VALUE+0x1>
    44ee:	01 96       	adiw	r24, 0x01	; 1
    44f0:	80 93 19 24 	sts	0x2419, r24	; 0x802419 <OVER_TEMP_VALUE>
    44f4:	90 93 1a 24 	sts	0x241A, r25	; 0x80241a <OVER_TEMP_VALUE+0x1>
    44f8:	4a c0       	rjmp	.+148    	; 0x458e <__vector_66+0x2ae>
								}
								else if (program_state.settings_row_num == 1)
    44fa:	81 30       	cpi	r24, 0x01	; 1
    44fc:	09 f0       	breq	.+2      	; 0x4500 <__vector_66+0x220>
    44fe:	47 c0       	rjmp	.+142    	; 0x458e <__vector_66+0x2ae>
								{
									TIME_TO_CHECK_TEMP += 1000;
    4500:	80 91 1d 24 	lds	r24, 0x241D	; 0x80241d <TIME_TO_CHECK_TEMP>
    4504:	90 91 1e 24 	lds	r25, 0x241E	; 0x80241e <TIME_TO_CHECK_TEMP+0x1>
    4508:	a0 91 1f 24 	lds	r26, 0x241F	; 0x80241f <TIME_TO_CHECK_TEMP+0x2>
    450c:	b0 91 20 24 	lds	r27, 0x2420	; 0x802420 <TIME_TO_CHECK_TEMP+0x3>
    4510:	88 51       	subi	r24, 0x18	; 24
    4512:	9c 4f       	sbci	r25, 0xFC	; 252
    4514:	af 4f       	sbci	r26, 0xFF	; 255
    4516:	bf 4f       	sbci	r27, 0xFF	; 255
    4518:	80 93 1d 24 	sts	0x241D, r24	; 0x80241d <TIME_TO_CHECK_TEMP>
    451c:	90 93 1e 24 	sts	0x241E, r25	; 0x80241e <TIME_TO_CHECK_TEMP+0x1>
    4520:	a0 93 1f 24 	sts	0x241F, r26	; 0x80241f <TIME_TO_CHECK_TEMP+0x2>
    4524:	b0 93 20 24 	sts	0x2420, r27	; 0x802420 <TIME_TO_CHECK_TEMP+0x3>
    4528:	32 c0       	rjmp	.+100    	; 0x458e <__vector_66+0x2ae>
								}
							}
							else
							{
								counters.debug_clicks_counter++;
    452a:	80 91 14 25 	lds	r24, 0x2514	; 0x802514 <counters+0x30>
    452e:	90 91 15 25 	lds	r25, 0x2515	; 0x802515 <counters+0x31>
    4532:	01 96       	adiw	r24, 0x01	; 1
    4534:	80 93 14 25 	sts	0x2514, r24	; 0x802514 <counters+0x30>
    4538:	90 93 15 25 	sts	0x2515, r25	; 0x802515 <counters+0x31>
								counters.calibrate_clicks_counter = 0;
    453c:	10 92 16 25 	sts	0x2516, r1	; 0x802516 <counters+0x32>
    4540:	10 92 17 25 	sts	0x2517, r1	; 0x802517 <counters+0x33>
								
								if (counters.debug_clicks_counter > 30)
    4544:	4f 97       	sbiw	r24, 0x1f	; 31
    4546:	20 f0       	brcs	.+8      	; 0x4550 <__vector_66+0x270>
								{
									program_state.debug_mode = TRUE;
    4548:	20 93 13 24 	sts	0x2413, r18	; 0x802413 <program_state+0x2f>
									program_state.calibrating_mode = FALSE;
    454c:	10 92 14 24 	sts	0x2414, r1	; 0x802414 <program_state+0x30>
								}
								
								if (program_state.calibrating_mode)
    4550:	80 91 14 24 	lds	r24, 0x2414	; 0x802414 <program_state+0x30>
    4554:	88 23       	and	r24, r24
    4556:	19 f0       	breq	.+6      	; 0x455e <__vector_66+0x27e>
								{
									program_state.settings_row_num = 1;
    4558:	81 e0       	ldi	r24, 0x01	; 1
    455a:	80 93 ff 23 	sts	0x23FF, r24	; 0x8023ff <program_state+0x1b>
								}
								
								if (program_state.debug_mode)
    455e:	80 91 13 24 	lds	r24, 0x2413	; 0x802413 <program_state+0x2f>
    4562:	88 23       	and	r24, r24
    4564:	a1 f0       	breq	.+40     	; 0x458e <__vector_66+0x2ae>
								{
									if (program_state.settings_row_num < 2)
    4566:	80 91 ff 23 	lds	r24, 0x23FF	; 0x8023ff <program_state+0x1b>
    456a:	82 30       	cpi	r24, 0x02	; 2
    456c:	80 f4       	brcc	.+32     	; 0x458e <__vector_66+0x2ae>
									{
										program_state.settings_row_num++;
    456e:	8f 5f       	subi	r24, 0xFF	; 255
    4570:	80 93 ff 23 	sts	0x23FF, r24	; 0x8023ff <program_state+0x1b>
    4574:	0c c0       	rjmp	.+24     	; 0x458e <__vector_66+0x2ae>
						}
					}
				}
				else
				{
					counters.start_up_screen_timeout = STARTUP_SCREEN_TIME;
    4576:	88 eb       	ldi	r24, 0xB8	; 184
    4578:	9b e0       	ldi	r25, 0x0B	; 11
    457a:	80 93 02 25 	sts	0x2502, r24	; 0x802502 <counters+0x1e>
    457e:	90 93 03 25 	sts	0x2503, r25	; 0x802503 <counters+0x1f>
					program_state.output->set_current_state = VISIBLE_LOCKED;
    4582:	e0 91 17 24 	lds	r30, 0x2417	; 0x802417 <program_state+0x33>
    4586:	f0 91 18 24 	lds	r31, 0x2418	; 0x802418 <program_state+0x34>
    458a:	82 e0       	ldi	r24, 0x02	; 2
    458c:	87 87       	std	Z+15, r24	; 0x0f
				}
		
				if (counters.start_up_screen_timeout == 0)
    458e:	80 91 02 25 	lds	r24, 0x2502	; 0x802502 <counters+0x1e>
    4592:	90 91 03 25 	lds	r25, 0x2503	; 0x802503 <counters+0x1f>
    4596:	89 2b       	or	r24, r25
    4598:	11 f4       	brne	.+4      	; 0x459e <__vector_66+0x2be>
				{
					clear_all_errors();
    459a:	0e 94 6e 25 	call	0x4adc	; 0x4adc <clear_all_errors>
				}
		
				counters.backlight_timer = BCKLGHT_DFLT_TIME;
    459e:	80 e4       	ldi	r24, 0x40	; 64
    45a0:	99 e1       	ldi	r25, 0x19	; 25
    45a2:	80 93 e4 24 	sts	0x24E4, r24	; 0x8024e4 <counters>
    45a6:	90 93 e5 24 	sts	0x24E5, r25	; 0x8024e5 <counters+0x1>
		
				counters.periodic_int_count = 0;
    45aa:	10 92 e6 24 	sts	0x24E6, r1	; 0x8024e6 <counters+0x2>
    45ae:	10 92 e7 24 	sts	0x24E7, r1	; 0x8024e7 <counters+0x3>
    45b2:	10 92 e8 24 	sts	0x24E8, r1	; 0x8024e8 <counters+0x4>
    45b6:	10 92 e9 24 	sts	0x24E9, r1	; 0x8024e9 <counters+0x5>
				encoder_state.both_low = FALSE;
    45ba:	10 92 62 24 	sts	0x2462, r1	; 0x802462 <encoder_state+0x2>
				encoder_state.b_low = FALSE;
    45be:	10 92 61 24 	sts	0x2461, r1	; 0x802461 <encoder_state+0x1>
				encoder_state.a_low = FALSE;
    45c2:	10 92 60 24 	sts	0x2460, r1	; 0x802460 <encoder_state>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    45c6:	8f e0       	ldi	r24, 0x0F	; 15
    45c8:	97 e2       	ldi	r25, 0x27	; 39
    45ca:	01 97       	sbiw	r24, 0x01	; 1
    45cc:	f1 f7       	brne	.-4      	; 0x45ca <__vector_66+0x2ea>
    45ce:	00 c0       	rjmp	.+0      	; 0x45d0 <__vector_66+0x2f0>
    45d0:	00 00       	nop
    45d2:	3e c0       	rjmp	.+124    	; 0x4650 <__vector_66+0x370>
				_delay_ms(2);
			}
			else if(!(PORTA_IN & (1 << ENCDR_B)) && !encoder_state.b_low)
    45d4:	90 91 08 06 	lds	r25, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
    45d8:	80 91 61 24 	lds	r24, 0x2461	; 0x802461 <encoder_state+0x1>
    45dc:	92 fd       	sbrc	r25, 2
    45de:	17 c0       	rjmp	.+46     	; 0x460e <__vector_66+0x32e>
    45e0:	81 11       	cpse	r24, r1
    45e2:	15 c0       	rjmp	.+42     	; 0x460e <__vector_66+0x32e>
			{
				encoder_state.b_low = TRUE;
    45e4:	81 e0       	ldi	r24, 0x01	; 1
    45e6:	80 93 61 24 	sts	0x2461, r24	; 0x802461 <encoder_state+0x1>
				if(encoder_state.a_low)
    45ea:	80 91 60 24 	lds	r24, 0x2460	; 0x802460 <encoder_state>
    45ee:	88 23       	and	r24, r24
    45f0:	79 f1       	breq	.+94     	; 0x4650 <__vector_66+0x370>
				{
					encoder_state.both_low = TRUE;
    45f2:	81 e0       	ldi	r24, 0x01	; 1
    45f4:	80 93 62 24 	sts	0x2462, r24	; 0x802462 <encoder_state+0x2>
    45f8:	e7 e8       	ldi	r30, 0x87	; 135
    45fa:	f3 e1       	ldi	r31, 0x13	; 19
    45fc:	31 97       	sbiw	r30, 0x01	; 1
    45fe:	f1 f7       	brne	.-4      	; 0x45fc <__vector_66+0x31c>
    4600:	00 c0       	rjmp	.+0      	; 0x4602 <__vector_66+0x322>
    4602:	00 00       	nop
					_delay_ms(1);
					encoder_state.b_low = FALSE;
    4604:	10 92 61 24 	sts	0x2461, r1	; 0x802461 <encoder_state+0x1>
					encoder_state.a_low = FALSE;
    4608:	10 92 60 24 	sts	0x2460, r1	; 0x802460 <encoder_state>
    460c:	21 c0       	rjmp	.+66     	; 0x4650 <__vector_66+0x370>
				}
			}
			else if(!(PORTA_IN & (1 << ENCDR_A)) && !encoder_state.a_low)
    460e:	90 91 08 06 	lds	r25, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
    4612:	91 fd       	sbrc	r25, 1
    4614:	08 c0       	rjmp	.+16     	; 0x4626 <__vector_66+0x346>
    4616:	90 91 60 24 	lds	r25, 0x2460	; 0x802460 <encoder_state>
    461a:	91 11       	cpse	r25, r1
    461c:	04 c0       	rjmp	.+8      	; 0x4626 <__vector_66+0x346>
			{
				encoder_state.a_low = TRUE;
    461e:	91 e0       	ldi	r25, 0x01	; 1
    4620:	90 93 60 24 	sts	0x2460, r25	; 0x802460 <encoder_state>
    4624:	e4 cf       	rjmp	.-56     	; 0x45ee <__vector_66+0x30e>
					_delay_ms(1);
					encoder_state.b_low = FALSE;
					encoder_state.a_low = FALSE;
				}
			}
			else if(encoder_state.b_low && PORTA_IN & (1 << ENCDR_A))//if B is low and A is high
    4626:	88 23       	and	r24, r24
    4628:	59 f0       	breq	.+22     	; 0x4640 <__vector_66+0x360>
    462a:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
    462e:	81 ff       	sbrs	r24, 1
    4630:	07 c0       	rjmp	.+14     	; 0x4640 <__vector_66+0x360>
			{ 
				encoder_state.a_low = FALSE;
    4632:	10 92 60 24 	sts	0x2460, r1	; 0x802460 <encoder_state>
				encoder_state.b_low = FALSE;
    4636:	10 92 61 24 	sts	0x2461, r1	; 0x802461 <encoder_state+0x1>
				encoder_state.both_low = FALSE;
    463a:	10 92 62 24 	sts	0x2462, r1	; 0x802462 <encoder_state+0x2>
    463e:	08 c0       	rjmp	.+16     	; 0x4650 <__vector_66+0x370>
			}
			else if(encoder_state.a_low && PORTA_IN & (1 << ENCDR_B)) //if A is low and B is high
    4640:	80 91 60 24 	lds	r24, 0x2460	; 0x802460 <encoder_state>
    4644:	88 23       	and	r24, r24
    4646:	21 f0       	breq	.+8      	; 0x4650 <__vector_66+0x370>
    4648:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
    464c:	82 fd       	sbrc	r24, 2
    464e:	f1 cf       	rjmp	.-30     	; 0x4632 <__vector_66+0x352>
				encoder_state.a_low = FALSE;
				encoder_state.b_low = FALSE;
				encoder_state.both_low = FALSE;
			}
	
			program_state.output->need_to_set_current_voltage_pair = TRUE;
    4650:	e0 91 17 24 	lds	r30, 0x2417	; 0x802417 <program_state+0x33>
    4654:	f0 91 18 24 	lds	r31, 0x2418	; 0x802418 <program_state+0x34>
    4658:	81 e0       	ldi	r24, 0x01	; 1
    465a:	85 87       	std	Z+13, r24	; 0x0d
			counters.idle_time_counter = counters.real_time_counter;
    465c:	80 91 f8 24 	lds	r24, 0x24F8	; 0x8024f8 <counters+0x14>
    4660:	80 93 f0 24 	sts	0x24F0, r24	; 0x8024f0 <counters+0xc>
    4664:	80 91 f9 24 	lds	r24, 0x24F9	; 0x8024f9 <counters+0x15>
    4668:	80 93 f1 24 	sts	0x24F1, r24	; 0x8024f1 <counters+0xd>
    466c:	80 91 fa 24 	lds	r24, 0x24FA	; 0x8024fa <counters+0x16>
    4670:	80 93 f2 24 	sts	0x24F2, r24	; 0x8024f2 <counters+0xe>
    4674:	80 91 fb 24 	lds	r24, 0x24FB	; 0x8024fb <counters+0x17>
    4678:	80 93 f3 24 	sts	0x24F3, r24	; 0x8024f3 <counters+0xf>
    467c:	80 91 fc 24 	lds	r24, 0x24FC	; 0x8024fc <counters+0x18>
    4680:	80 93 f4 24 	sts	0x24F4, r24	; 0x8024f4 <counters+0x10>
    4684:	80 91 fd 24 	lds	r24, 0x24FD	; 0x8024fd <counters+0x19>
    4688:	80 93 f5 24 	sts	0x24F5, r24	; 0x8024f5 <counters+0x11>
    468c:	80 91 fe 24 	lds	r24, 0x24FE	; 0x8024fe <counters+0x1a>
    4690:	80 93 f6 24 	sts	0x24F6, r24	; 0x8024f6 <counters+0x12>
    4694:	80 91 ff 24 	lds	r24, 0x24FF	; 0x8024ff <counters+0x1b>
    4698:	80 93 f7 24 	sts	0x24F7, r24	; 0x8024f7 <counters+0x13>
		}
	}
	PORTA_INTFLAGS = 0xFF; //clear port interrupt flags
    469c:	8f ef       	ldi	r24, 0xFF	; 255
    469e:	80 93 0c 06 	sts	0x060C, r24	; 0x80060c <__TEXT_REGION_LENGTH__+0x70060c>
}
    46a2:	ff 91       	pop	r31
    46a4:	ef 91       	pop	r30
    46a6:	df 91       	pop	r29
    46a8:	cf 91       	pop	r28
    46aa:	bf 91       	pop	r27
    46ac:	af 91       	pop	r26
    46ae:	9f 91       	pop	r25
    46b0:	8f 91       	pop	r24
    46b2:	7f 91       	pop	r23
    46b4:	6f 91       	pop	r22
    46b6:	5f 91       	pop	r21
    46b8:	4f 91       	pop	r20
    46ba:	3f 91       	pop	r19
    46bc:	2f 91       	pop	r18
    46be:	1f 91       	pop	r17
    46c0:	0f 91       	pop	r16
    46c2:	0f 90       	pop	r0
    46c4:	0f be       	out	0x3f, r0	; 63
    46c6:	0f 90       	pop	r0
    46c8:	1f 90       	pop	r1
    46ca:	18 95       	reti

000046cc <decrease_target_current>:

/*************************************************************************
Decreases the target current variably depending on the speed of the turn
**************************************************************************/
void decrease_target_current(OutputState* output)
{
    46cc:	ef 92       	push	r14
    46ce:	ff 92       	push	r15
    46d0:	0f 93       	push	r16
    46d2:	1f 93       	push	r17
    46d4:	cf 93       	push	r28
    46d6:	df 93       	push	r29
    46d8:	7c 01       	movw	r14, r24
	int new_target_current = output->target_current;
    46da:	fc 01       	movw	r30, r24
    46dc:	c0 89       	ldd	r28, Z+16	; 0x10
    46de:	d1 89       	ldd	r29, Z+17	; 0x11
	if(output->target_current >= 10)
    46e0:	ca 30       	cpi	r28, 0x0A	; 10
    46e2:	d1 05       	cpc	r29, r1
    46e4:	48 f1       	brcs	.+82     	; 0x4738 <decrease_target_current+0x6c>
	{
		program_state.changing_settings = CHANGING_SETTINGS_TIME;
    46e6:	82 e0       	ldi	r24, 0x02	; 2
    46e8:	80 93 e6 23 	sts	0x23E6, r24	; 0x8023e6 <program_state+0x2>
		if(counters.periodic_int_count < 15)
    46ec:	20 91 e6 24 	lds	r18, 0x24E6	; 0x8024e6 <counters+0x2>
    46f0:	30 91 e7 24 	lds	r19, 0x24E7	; 0x8024e7 <counters+0x3>
    46f4:	40 91 e8 24 	lds	r20, 0x24E8	; 0x8024e8 <counters+0x4>
    46f8:	50 91 e9 24 	lds	r21, 0x24E9	; 0x8024e9 <counters+0x5>
    46fc:	2f 30       	cpi	r18, 0x0F	; 15
    46fe:	31 05       	cpc	r19, r1
    4700:	41 05       	cpc	r20, r1
    4702:	51 05       	cpc	r21, r1
    4704:	88 f4       	brcc	.+34     	; 0x4728 <decrease_target_current+0x5c>
		{
			int current_to_remove = 200/counters.periodic_int_count;
    4706:	68 ec       	ldi	r22, 0xC8	; 200
    4708:	70 e0       	ldi	r23, 0x00	; 0
    470a:	80 e0       	ldi	r24, 0x00	; 0
    470c:	90 e0       	ldi	r25, 0x00	; 0
    470e:	0e 94 fc 37 	call	0x6ff8	; 0x6ff8 <__udivmodsi4>
    4712:	89 01       	movw	r16, r18
    4714:	9a 01       	movw	r18, r20
			current_to_remove -= current_to_remove%10;
    4716:	c8 01       	movw	r24, r16
    4718:	6a e0       	ldi	r22, 0x0A	; 10
    471a:	70 e0       	ldi	r23, 0x00	; 0
    471c:	0e 94 e8 37 	call	0x6fd0	; 0x6fd0 <__divmodhi4>
			new_target_current -= current_to_remove;
    4720:	08 1b       	sub	r16, r24
    4722:	19 0b       	sbc	r17, r25
    4724:	c0 1b       	sub	r28, r16
    4726:	d1 0b       	sbc	r29, r17
		
		if(new_target_current < 0)
		{
			new_target_current = 0;
		}
		output->target_current = new_target_current;
    4728:	2a 97       	sbiw	r28, 0x0a	; 10
    472a:	d7 ff       	sbrs	r29, 7
    472c:	02 c0       	rjmp	.+4      	; 0x4732 <decrease_target_current+0x66>
    472e:	c0 e0       	ldi	r28, 0x00	; 0
    4730:	d0 e0       	ldi	r29, 0x00	; 0
    4732:	f7 01       	movw	r30, r14
    4734:	c0 8b       	std	Z+16, r28	; 0x10
    4736:	d1 8b       	std	Z+17, r29	; 0x11
	}
}
    4738:	df 91       	pop	r29
    473a:	cf 91       	pop	r28
    473c:	1f 91       	pop	r17
    473e:	0f 91       	pop	r16
    4740:	ff 90       	pop	r15
    4742:	ef 90       	pop	r14
    4744:	08 95       	ret

00004746 <increase_target_current>:

/***********************************************************************
Increases the target current variably depending on the speed of the turn
************************************************************************/
void increase_target_current(OutputState* output)
{
    4746:	8f 92       	push	r8
    4748:	9f 92       	push	r9
    474a:	af 92       	push	r10
    474c:	bf 92       	push	r11
    474e:	ef 92       	push	r14
    4750:	ff 92       	push	r15
    4752:	0f 93       	push	r16
    4754:	1f 93       	push	r17
    4756:	cf 93       	push	r28
    4758:	df 93       	push	r29
    475a:	8c 01       	movw	r16, r24
	int new_target_current = output->target_current;
    475c:	fc 01       	movw	r30, r24
    475e:	c0 89       	ldd	r28, Z+16	; 0x10
    4760:	d1 89       	ldd	r29, Z+17	; 0x11
	if(output->target_current <= output->max_current-10)//if it hasn't hit max resistance or max userset current of 20 A
    4762:	e2 88       	ldd	r14, Z+18	; 0x12
    4764:	f3 88       	ldd	r15, Z+19	; 0x13
    4766:	c7 01       	movw	r24, r14
    4768:	0a 97       	sbiw	r24, 0x0a	; 10
    476a:	8c 17       	cp	r24, r28
    476c:	9d 07       	cpc	r25, r29
    476e:	50 f1       	brcs	.+84     	; 0x47c4 <increase_target_current+0x7e>
	{ 
		program_state.changing_settings = CHANGING_SETTINGS_TIME;
    4770:	82 e0       	ldi	r24, 0x02	; 2
    4772:	80 93 e6 23 	sts	0x23E6, r24	; 0x8023e6 <program_state+0x2>
		if(counters.periodic_int_count < 15)
    4776:	20 91 e6 24 	lds	r18, 0x24E6	; 0x8024e6 <counters+0x2>
    477a:	30 91 e7 24 	lds	r19, 0x24E7	; 0x8024e7 <counters+0x3>
    477e:	40 91 e8 24 	lds	r20, 0x24E8	; 0x8024e8 <counters+0x4>
    4782:	50 91 e9 24 	lds	r21, 0x24E9	; 0x8024e9 <counters+0x5>
    4786:	2f 30       	cpi	r18, 0x0F	; 15
    4788:	31 05       	cpc	r19, r1
    478a:	41 05       	cpc	r20, r1
    478c:	51 05       	cpc	r21, r1
    478e:	88 f4       	brcc	.+34     	; 0x47b2 <increase_target_current+0x6c>
		{
			int current_to_add = 200/counters.periodic_int_count;
    4790:	68 ec       	ldi	r22, 0xC8	; 200
    4792:	70 e0       	ldi	r23, 0x00	; 0
    4794:	80 e0       	ldi	r24, 0x00	; 0
    4796:	90 e0       	ldi	r25, 0x00	; 0
    4798:	0e 94 fc 37 	call	0x6ff8	; 0x6ff8 <__udivmodsi4>
    479c:	49 01       	movw	r8, r18
    479e:	5a 01       	movw	r10, r20
			current_to_add -= current_to_add%10;
    47a0:	c9 01       	movw	r24, r18
    47a2:	6a e0       	ldi	r22, 0x0A	; 10
    47a4:	70 e0       	ldi	r23, 0x00	; 0
    47a6:	0e 94 e8 37 	call	0x6fd0	; 0x6fd0 <__divmodhi4>
			new_target_current += current_to_add;
    47aa:	88 1a       	sub	r8, r24
    47ac:	99 0a       	sbc	r9, r25
    47ae:	c8 0d       	add	r28, r8
    47b0:	d9 1d       	adc	r29, r9
		}
		new_target_current += 10;
    47b2:	2a 96       	adiw	r28, 0x0a	; 10
		
		if(new_target_current > output->max_current)
    47b4:	ec 16       	cp	r14, r28
    47b6:	fd 06       	cpc	r15, r29
    47b8:	08 f4       	brcc	.+2      	; 0x47bc <increase_target_current+0x76>
		{
			new_target_current = output->max_current;
    47ba:	e7 01       	movw	r28, r14
		}
		output->target_current = new_target_current;
    47bc:	f8 01       	movw	r30, r16
    47be:	c0 8b       	std	Z+16, r28	; 0x10
    47c0:	d1 8b       	std	Z+17, r29	; 0x11
    47c2:	06 c0       	rjmp	.+12     	; 0x47d0 <increase_target_current+0x8a>
	}
	else if(output->target_current == output->max_current)
    47c4:	ce 15       	cp	r28, r14
    47c6:	df 05       	cpc	r29, r15
    47c8:	19 f4       	brne	.+6      	; 0x47d0 <increase_target_current+0x8a>
	{
		output->hit_max_current = TRUE;
    47ca:	81 e0       	ldi	r24, 0x01	; 1
    47cc:	f8 01       	movw	r30, r16
    47ce:	85 83       	std	Z+5, r24	; 0x05
	}
}
    47d0:	df 91       	pop	r29
    47d2:	cf 91       	pop	r28
    47d4:	1f 91       	pop	r17
    47d6:	0f 91       	pop	r16
    47d8:	ff 90       	pop	r15
    47da:	ef 90       	pop	r14
    47dc:	bf 90       	pop	r11
    47de:	af 90       	pop	r10
    47e0:	9f 90       	pop	r9
    47e2:	8f 90       	pop	r8
    47e4:	08 95       	ret

000047e6 <get_ambient_brightness>:


uint8_t get_ambient_brightness()
{
    47e6:	cf 93       	push	r28
    47e8:	df 93       	push	r29
    47ea:	00 d0       	rcall	.+0      	; 0x47ec <get_ambient_brightness+0x6>
    47ec:	00 d0       	rcall	.+0      	; 0x47ee <get_ambient_brightness+0x8>
    47ee:	cd b7       	in	r28, 0x3d	; 61
    47f0:	de b7       	in	r29, 0x3e	; 62
	ADCA_CH0_CTRL |= 0b10000000;				//Start conversion
    47f2:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__TEXT_REGION_LENGTH__+0x700220>
    47f6:	80 68       	ori	r24, 0x80	; 128
    47f8:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <__TEXT_REGION_LENGTH__+0x700220>
	while(!(ADCA_CH0_INTFLAGS & 0b00000001));	//Wait for conversion to be complete
    47fc:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <__TEXT_REGION_LENGTH__+0x700223>
    4800:	80 ff       	sbrs	r24, 0
    4802:	fc cf       	rjmp	.-8      	; 0x47fc <get_ambient_brightness+0x16>
	volatile float x = ADCA_CH0_RES;
    4804:	60 91 24 02 	lds	r22, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
    4808:	70 91 25 02 	lds	r23, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
    480c:	80 e0       	ldi	r24, 0x00	; 0
    480e:	90 e0       	ldi	r25, 0x00	; 0
    4810:	0e 94 e4 35 	call	0x6bc8	; 0x6bc8 <__floatunsisf>
    4814:	69 83       	std	Y+1, r22	; 0x01
    4816:	7a 83       	std	Y+2, r23	; 0x02
    4818:	8b 83       	std	Y+3, r24	; 0x03
    481a:	9c 83       	std	Y+4, r25	; 0x04
	
	return (uint8_t) (ADCA_CH0_RES/30);
    481c:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
    4820:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
    4824:	6e e1       	ldi	r22, 0x1E	; 30
    4826:	70 e0       	ldi	r23, 0x00	; 0
    4828:	0e 94 d4 37 	call	0x6fa8	; 0x6fa8 <__udivmodhi4>
    482c:	86 2f       	mov	r24, r22
}
    482e:	24 96       	adiw	r28, 0x04	; 4
    4830:	cd bf       	out	0x3d, r28	; 61
    4832:	de bf       	out	0x3e, r29	; 62
    4834:	df 91       	pop	r29
    4836:	cf 91       	pop	r28
    4838:	08 95       	ret

0000483a <blink_red>:
	}
}

void blink_red()
{
	GRN_LED_OFF;
    483a:	80 e2       	ldi	r24, 0x20	; 32
    483c:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
	RED_LED_TGL;
    4840:	80 e1       	ldi	r24, 0x10	; 16
    4842:	80 93 07 06 	sts	0x0607, r24	; 0x800607 <__TEXT_REGION_LENGTH__+0x700607>
    4846:	08 95       	ret

00004848 <blink_yellow>:
}

void blink_yellow()
{
	if((PORTA_OUT & (1 << GRN_LED)) == (PORTA_OUT & (1 << RED_LED)))
    4848:	90 91 04 06 	lds	r25, 0x0604	; 0x800604 <__TEXT_REGION_LENGTH__+0x700604>
    484c:	80 91 04 06 	lds	r24, 0x0604	; 0x800604 <__TEXT_REGION_LENGTH__+0x700604>
    4850:	90 72       	andi	r25, 0x20	; 32
    4852:	80 71       	andi	r24, 0x10	; 16
    4854:	98 13       	cpse	r25, r24
    4856:	07 c0       	rjmp	.+14     	; 0x4866 <blink_yellow+0x1e>
	{
		GRN_LED_TGL;
    4858:	80 e2       	ldi	r24, 0x20	; 32
    485a:	80 93 07 06 	sts	0x0607, r24	; 0x800607 <__TEXT_REGION_LENGTH__+0x700607>
		RED_LED_TGL;
    485e:	80 e1       	ldi	r24, 0x10	; 16
    4860:	80 93 07 06 	sts	0x0607, r24	; 0x800607 <__TEXT_REGION_LENGTH__+0x700607>
    4864:	08 95       	ret
	}
	else
	{
		GRN_LED_ON;
    4866:	80 e2       	ldi	r24, 0x20	; 32
    4868:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
		RED_LED_ON;
    486c:	80 e1       	ldi	r24, 0x10	; 16
    486e:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
    4872:	08 95       	ret

00004874 <blink_green>:
	}
}

void blink_green()
{
	GRN_LED_TGL;
    4874:	80 e2       	ldi	r24, 0x20	; 32
    4876:	80 93 07 06 	sts	0x0607, r24	; 0x800607 <__TEXT_REGION_LENGTH__+0x700607>
	RED_LED_OFF;
    487a:	80 e1       	ldi	r24, 0x10	; 16
    487c:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
    4880:	08 95       	ret

00004882 <blink_led>:
/********************************************************************************
This program always requires a blinking LED. This function determines which color
should be blinked at the moment
*********************************************************************************/
void blink_led(){
	if (counters.real_time_counter < 5000) // Do not blick at the start of the program
    4882:	20 91 f8 24 	lds	r18, 0x24F8	; 0x8024f8 <counters+0x14>
    4886:	30 91 f9 24 	lds	r19, 0x24F9	; 0x8024f9 <counters+0x15>
    488a:	40 91 fa 24 	lds	r20, 0x24FA	; 0x8024fa <counters+0x16>
    488e:	50 91 fb 24 	lds	r21, 0x24FB	; 0x8024fb <counters+0x17>
    4892:	60 91 fc 24 	lds	r22, 0x24FC	; 0x8024fc <counters+0x18>
    4896:	70 91 fd 24 	lds	r23, 0x24FD	; 0x8024fd <counters+0x19>
    489a:	80 91 fe 24 	lds	r24, 0x24FE	; 0x8024fe <counters+0x1a>
    489e:	90 91 ff 24 	lds	r25, 0x24FF	; 0x8024ff <counters+0x1b>
    48a2:	27 38       	cpi	r18, 0x87	; 135
    48a4:	33 41       	sbci	r19, 0x13	; 19
    48a6:	41 05       	cpc	r20, r1
    48a8:	51 05       	cpc	r21, r1
    48aa:	61 05       	cpc	r22, r1
    48ac:	71 05       	cpc	r23, r1
    48ae:	81 05       	cpc	r24, r1
    48b0:	91 05       	cpc	r25, r1
    48b2:	09 f0       	breq	.+2      	; 0x48b6 <blink_led+0x34>
    48b4:	38 f4       	brcc	.+14     	; 0x48c4 <blink_led+0x42>
	{
		RED_LED_OFF;
    48b6:	80 e1       	ldi	r24, 0x10	; 16
    48b8:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
		GRN_LED_OFF;
    48bc:	80 e2       	ldi	r24, 0x20	; 32
    48be:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
		return;
    48c2:	08 95       	ret
	}
	else if(program_state.pson_low || output_one.current < 5 || (program_state.program == FOURTY_ONE_DUAL && output_two.current < 5))//current is zero or DC is off
    48c4:	80 91 e9 23 	lds	r24, 0x23E9	; 0x8023e9 <program_state+0x5>
    48c8:	81 11       	cpse	r24, r1
    48ca:	10 c0       	rjmp	.+32     	; 0x48ec <blink_led+0x6a>
    48cc:	80 91 b9 24 	lds	r24, 0x24B9	; 0x8024b9 <output_one+0x16>
    48d0:	90 91 ba 24 	lds	r25, 0x24BA	; 0x8024ba <output_one+0x17>
    48d4:	05 97       	sbiw	r24, 0x05	; 5
    48d6:	50 f0       	brcs	.+20     	; 0x48ec <blink_led+0x6a>
    48d8:	80 91 e8 23 	lds	r24, 0x23E8	; 0x8023e8 <program_state+0x4>
    48dc:	82 30       	cpi	r24, 0x02	; 2
    48de:	41 f4       	brne	.+16     	; 0x48f0 <blink_led+0x6e>
    48e0:	80 91 37 24 	lds	r24, 0x2437	; 0x802437 <output_two+0x16>
    48e4:	90 91 38 24 	lds	r25, 0x2438	; 0x802438 <output_two+0x17>
    48e8:	05 97       	sbiw	r24, 0x05	; 5
    48ea:	10 f4       	brcc	.+4      	; 0x48f0 <blink_led+0x6e>
	{ 
		blink_red();
    48ec:	0c 94 1d 24 	jmp	0x483a	; 0x483a <blink_red>
	}
	else if(program_state.uncleared_error)//if there's an uncleared error
    48f0:	80 91 ea 23 	lds	r24, 0x23EA	; 0x8023ea <program_state+0x6>
    48f4:	81 11       	cpse	r24, r1
	{ 
		blink_yellow();
    48f6:	0c 94 24 24 	jmp	0x4848	; 0x4848 <blink_yellow>
	}
	else
	{
		blink_green(); //if everything is fine
    48fa:	0c 94 3a 24 	jmp	0x4874	; 0x4874 <blink_green>

000048fe <load_values_from_eeprom>:
This function is necessary for new boards that have not loaded the proper values into
the EEPROM yet
*************************************************************************************/
void load_values_from_eeprom()
{
	output_one.target_current = read_external_eeprom(&twiMasterForEEPROM, EXTERNAL_EEPROM_ADDR, EEPROM_OUT1_CURRENT_VALUE_ADDR); //load last set target current
    48fe:	48 e2       	ldi	r20, 0x28	; 40
    4900:	5a e0       	ldi	r21, 0x0A	; 10
    4902:	61 e5       	ldi	r22, 0x51	; 81
    4904:	84 e5       	ldi	r24, 0x54	; 84
    4906:	95 e2       	ldi	r25, 0x25	; 37
    4908:	0e 94 6a 2d 	call	0x5ad4	; 0x5ad4 <read_external_eeprom>
    490c:	80 93 b3 24 	sts	0x24B3, r24	; 0x8024b3 <output_one+0x10>
    4910:	90 93 b4 24 	sts	0x24B4, r25	; 0x8024b4 <output_one+0x11>
	output_two.target_current = read_external_eeprom(&twiMasterForEEPROM, EXTERNAL_EEPROM_ADDR, EEPROM_OUT2_CURRENT_VALUE_ADDR); //load last set target current
    4914:	4a e2       	ldi	r20, 0x2A	; 42
    4916:	5a e0       	ldi	r21, 0x0A	; 10
    4918:	61 e5       	ldi	r22, 0x51	; 81
    491a:	84 e5       	ldi	r24, 0x54	; 84
    491c:	95 e2       	ldi	r25, 0x25	; 37
    491e:	0e 94 6a 2d 	call	0x5ad4	; 0x5ad4 <read_external_eeprom>
    4922:	80 93 31 24 	sts	0x2431, r24	; 0x802431 <output_two+0x10>
    4926:	90 93 32 24 	sts	0x2432, r25	; 0x802432 <output_two+0x11>
	program_state.num_outputs = read_external_eeprom(&twiMasterForEEPROM, EXTERNAL_EEPROM_ADDR, EEPROM_CHANELS_AMT_ADDR); //load last set target current
    492a:	4c e2       	ldi	r20, 0x2C	; 44
    492c:	5a e0       	ldi	r21, 0x0A	; 10
    492e:	61 e5       	ldi	r22, 0x51	; 81
    4930:	84 e5       	ldi	r24, 0x54	; 84
    4932:	95 e2       	ldi	r25, 0x25	; 37
    4934:	0e 94 6a 2d 	call	0x5ad4	; 0x5ad4 <read_external_eeprom>
    4938:	80 93 e4 23 	sts	0x23E4, r24	; 0x8023e4 <program_state>
    493c:	90 93 e5 23 	sts	0x23E5, r25	; 0x8023e5 <program_state+0x1>
	
	if(output_one.target_current > 5000)//if the previously loaded target current is somehow above 50 A, set it to 1 A. This is primarily to account for new IC's that have a random EEPROM value
    4940:	80 91 b3 24 	lds	r24, 0x24B3	; 0x8024b3 <output_one+0x10>
    4944:	90 91 b4 24 	lds	r25, 0x24B4	; 0x8024b4 <output_one+0x11>
    4948:	89 38       	cpi	r24, 0x89	; 137
    494a:	93 41       	sbci	r25, 0x13	; 19
    494c:	b0 f0       	brcs	.+44     	; 0x497a <load_values_from_eeprom+0x7c>
	{
		program_state.comm_error6++;
    494e:	80 91 0a 24 	lds	r24, 0x240A	; 0x80240a <program_state+0x26>
    4952:	90 91 0b 24 	lds	r25, 0x240B	; 0x80240b <program_state+0x27>
    4956:	01 96       	adiw	r24, 0x01	; 1
    4958:	80 93 0a 24 	sts	0x240A, r24	; 0x80240a <program_state+0x26>
    495c:	90 93 0b 24 	sts	0x240B, r25	; 0x80240b <program_state+0x27>
		output_one.target_current = 0;
    4960:	10 92 b3 24 	sts	0x24B3, r1	; 0x8024b3 <output_one+0x10>
    4964:	10 92 b4 24 	sts	0x24B4, r1	; 0x8024b4 <output_one+0x11>
		write_external_eeprom(&twiMasterForEEPROM, EXTERNAL_EEPROM_ADDR, EEPROM_OUT1_CURRENT_VALUE_ADDR, output_one.target_current);
    4968:	20 e0       	ldi	r18, 0x00	; 0
    496a:	30 e0       	ldi	r19, 0x00	; 0
    496c:	48 e2       	ldi	r20, 0x28	; 40
    496e:	5a e0       	ldi	r21, 0x0A	; 10
    4970:	61 e5       	ldi	r22, 0x51	; 81
    4972:	84 e5       	ldi	r24, 0x54	; 84
    4974:	95 e2       	ldi	r25, 0x25	; 37
    4976:	0e 94 20 32 	call	0x6440	; 0x6440 <write_external_eeprom>
	}
	if(output_two.target_current > 5000) //if the previously loaded target current is somehow above 50 A, set it to 1 A. This is primarily to account for new IC's that have a random EEPROM value
    497a:	80 91 31 24 	lds	r24, 0x2431	; 0x802431 <output_two+0x10>
    497e:	90 91 32 24 	lds	r25, 0x2432	; 0x802432 <output_two+0x11>
    4982:	89 38       	cpi	r24, 0x89	; 137
    4984:	93 41       	sbci	r25, 0x13	; 19
    4986:	c0 f0       	brcs	.+48     	; 0x49b8 <load_values_from_eeprom+0xba>
	{
		program_state.comm_error6++;
    4988:	80 91 0a 24 	lds	r24, 0x240A	; 0x80240a <program_state+0x26>
    498c:	90 91 0b 24 	lds	r25, 0x240B	; 0x80240b <program_state+0x27>
    4990:	01 96       	adiw	r24, 0x01	; 1
    4992:	80 93 0a 24 	sts	0x240A, r24	; 0x80240a <program_state+0x26>
    4996:	90 93 0b 24 	sts	0x240B, r25	; 0x80240b <program_state+0x27>
		output_two.target_current = 0;
    499a:	10 92 31 24 	sts	0x2431, r1	; 0x802431 <output_two+0x10>
    499e:	10 92 32 24 	sts	0x2432, r1	; 0x802432 <output_two+0x11>
		write_external_eeprom(&twiMasterForEEPROM, EXTERNAL_EEPROM_ADDR, EEPROM_OUT2_CURRENT_VALUE_ADDR, output_one.target_current);
    49a2:	20 91 b3 24 	lds	r18, 0x24B3	; 0x8024b3 <output_one+0x10>
    49a6:	30 91 b4 24 	lds	r19, 0x24B4	; 0x8024b4 <output_one+0x11>
    49aa:	4a e2       	ldi	r20, 0x2A	; 42
    49ac:	5a e0       	ldi	r21, 0x0A	; 10
    49ae:	61 e5       	ldi	r22, 0x51	; 81
    49b0:	84 e5       	ldi	r24, 0x54	; 84
    49b2:	95 e2       	ldi	r25, 0x25	; 37
    49b4:	0e 94 20 32 	call	0x6440	; 0x6440 <write_external_eeprom>
	}
	if(program_state.num_outputs != SINGLE && program_state.num_outputs != DOUBLE) //if the number of outputs is neither 1 or 2, set it to 1. This is primarily to account for new IC's that have a random EEPROM value
    49b8:	80 91 e4 23 	lds	r24, 0x23E4	; 0x8023e4 <program_state>
    49bc:	90 91 e5 23 	lds	r25, 0x23E5	; 0x8023e5 <program_state+0x1>
    49c0:	02 97       	sbiw	r24, 0x02	; 2
    49c2:	b0 f0       	brcs	.+44     	; 0x49f0 <load_values_from_eeprom+0xf2>
	{
		program_state.comm_error6++;
    49c4:	80 91 0a 24 	lds	r24, 0x240A	; 0x80240a <program_state+0x26>
    49c8:	90 91 0b 24 	lds	r25, 0x240B	; 0x80240b <program_state+0x27>
    49cc:	01 96       	adiw	r24, 0x01	; 1
    49ce:	80 93 0a 24 	sts	0x240A, r24	; 0x80240a <program_state+0x26>
    49d2:	90 93 0b 24 	sts	0x240B, r25	; 0x80240b <program_state+0x27>
		program_state.num_outputs = SINGLE;
    49d6:	10 92 e4 23 	sts	0x23E4, r1	; 0x8023e4 <program_state>
    49da:	10 92 e5 23 	sts	0x23E5, r1	; 0x8023e5 <program_state+0x1>
		write_external_eeprom(&twiMasterForEEPROM, EXTERNAL_EEPROM_ADDR, EEPROM_CHANELS_AMT_ADDR, program_state.num_outputs);
    49de:	20 e0       	ldi	r18, 0x00	; 0
    49e0:	30 e0       	ldi	r19, 0x00	; 0
    49e2:	4c e2       	ldi	r20, 0x2C	; 44
    49e4:	5a e0       	ldi	r21, 0x0A	; 10
    49e6:	61 e5       	ldi	r22, 0x51	; 81
    49e8:	84 e5       	ldi	r24, 0x54	; 84
    49ea:	95 e2       	ldi	r25, 0x25	; 37
    49ec:	0e 94 20 32 	call	0x6440	; 0x6440 <write_external_eeprom>
	}
	if (program_state.program == THIRTY_EIGHT)
    49f0:	80 91 e8 23 	lds	r24, 0x23E8	; 0x8023e8 <program_state+0x4>
    49f4:	81 11       	cpse	r24, r1
    49f6:	0d c0       	rjmp	.+26     	; 0x4a12 <load_values_from_eeprom+0x114>
	{
		program_state.num_outputs = SINGLE;
    49f8:	10 92 e4 23 	sts	0x23E4, r1	; 0x8023e4 <program_state>
    49fc:	10 92 e5 23 	sts	0x23E5, r1	; 0x8023e5 <program_state+0x1>
		write_external_eeprom(&twiMasterForEEPROM, EXTERNAL_EEPROM_ADDR, EEPROM_CHANELS_AMT_ADDR, program_state.num_outputs);
    4a00:	20 e0       	ldi	r18, 0x00	; 0
    4a02:	30 e0       	ldi	r19, 0x00	; 0
    4a04:	4c e2       	ldi	r20, 0x2C	; 44
    4a06:	5a e0       	ldi	r21, 0x0A	; 10
    4a08:	61 e5       	ldi	r22, 0x51	; 81
    4a0a:	84 e5       	ldi	r24, 0x54	; 84
    4a0c:	95 e2       	ldi	r25, 0x25	; 37
    4a0e:	0e 94 20 32 	call	0x6440	; 0x6440 <write_external_eeprom>
	}
	
	if (program_state.program == FOURTY_ONE || program_state.program == FOURTY_ONE_DUAL)
    4a12:	80 91 e8 23 	lds	r24, 0x23E8	; 0x8023e8 <program_state+0x4>
    4a16:	9f ef       	ldi	r25, 0xFF	; 255
    4a18:	98 0f       	add	r25, r24
    4a1a:	92 30       	cpi	r25, 0x02	; 2
    4a1c:	08 f0       	brcs	.+2      	; 0x4a20 <load_values_from_eeprom+0x122>
    4a1e:	41 c0       	rjmp	.+130    	; 0x4aa2 <load_values_from_eeprom+0x1a4>
	{
		if (program_state.num_outputs == DOUBLE)
    4a20:	80 91 e4 23 	lds	r24, 0x23E4	; 0x8023e4 <program_state>
    4a24:	90 91 e5 23 	lds	r25, 0x23E5	; 0x8023e5 <program_state+0x1>
    4a28:	81 30       	cpi	r24, 0x01	; 1
    4a2a:	91 05       	cpc	r25, r1
    4a2c:	e1 f4       	brne	.+56     	; 0x4a66 <load_values_from_eeprom+0x168>
		{
			output_one.max_current = 2500;
    4a2e:	24 ec       	ldi	r18, 0xC4	; 196
    4a30:	39 e0       	ldi	r19, 0x09	; 9
    4a32:	20 93 b5 24 	sts	0x24B5, r18	; 0x8024b5 <output_one+0x12>
    4a36:	30 93 b6 24 	sts	0x24B6, r19	; 0x8024b6 <output_one+0x13>
			output_one.max_voltage = 5000;
    4a3a:	88 e8       	ldi	r24, 0x88	; 136
    4a3c:	93 e1       	ldi	r25, 0x13	; 19
    4a3e:	80 93 b7 24 	sts	0x24B7, r24	; 0x8024b7 <output_one+0x14>
    4a42:	90 93 b8 24 	sts	0x24B8, r25	; 0x8024b8 <output_one+0x15>
			output_one.ina226_addr = OUTPUT1_INA226_ADDR; // 0x45 - THRIRTY_EIGTH, 0x41 - FOURTY_ONE
    4a46:	41 e4       	ldi	r20, 0x41	; 65
    4a48:	40 93 df 24 	sts	0x24DF, r20	; 0x8024df <output_one+0x3c>
			output_two.max_current = 2500;
    4a4c:	20 93 33 24 	sts	0x2433, r18	; 0x802433 <output_two+0x12>
    4a50:	30 93 34 24 	sts	0x2434, r19	; 0x802434 <output_two+0x13>
			output_two.max_voltage = 5000;
    4a54:	80 93 35 24 	sts	0x2435, r24	; 0x802435 <output_two+0x14>
    4a58:	90 93 36 24 	sts	0x2436, r25	; 0x802436 <output_two+0x15>
			output_two.ina226_addr = OUTPUT2_INA226_ADDR;
    4a5c:	80 e4       	ldi	r24, 0x40	; 64
    4a5e:	80 93 5d 24 	sts	0x245D, r24	; 0x80245d <output_two+0x3c>
			program_state.program = FOURTY_ONE_DUAL;
    4a62:	82 e0       	ldi	r24, 0x02	; 2
    4a64:	1b c0       	rjmp	.+54     	; 0x4a9c <load_values_from_eeprom+0x19e>
		}
		else if (program_state.num_outputs == SINGLE)
    4a66:	89 2b       	or	r24, r25
    4a68:	c1 f5       	brne	.+112    	; 0x4ada <load_values_from_eeprom+0x1dc>
		{
			output_one.max_current = 5000;
    4a6a:	88 e8       	ldi	r24, 0x88	; 136
    4a6c:	93 e1       	ldi	r25, 0x13	; 19
    4a6e:	80 93 b5 24 	sts	0x24B5, r24	; 0x8024b5 <output_one+0x12>
    4a72:	90 93 b6 24 	sts	0x24B6, r25	; 0x8024b6 <output_one+0x13>
			output_one.max_voltage = 5000;
    4a76:	80 93 b7 24 	sts	0x24B7, r24	; 0x8024b7 <output_one+0x14>
    4a7a:	90 93 b8 24 	sts	0x24B8, r25	; 0x8024b8 <output_one+0x15>
			output_one.ina226_addr = OUTPUT1_INA226_ADDR; // 0x45 - THRIRTY_EIGTH, 0x41 - FOURTY_ONE
    4a7e:	21 e4       	ldi	r18, 0x41	; 65
    4a80:	20 93 df 24 	sts	0x24DF, r18	; 0x8024df <output_one+0x3c>
			output_two.max_current = 5000;
    4a84:	80 93 33 24 	sts	0x2433, r24	; 0x802433 <output_two+0x12>
    4a88:	90 93 34 24 	sts	0x2434, r25	; 0x802434 <output_two+0x13>
			output_two.max_voltage = 5000;
    4a8c:	80 93 35 24 	sts	0x2435, r24	; 0x802435 <output_two+0x14>
    4a90:	90 93 36 24 	sts	0x2436, r25	; 0x802436 <output_two+0x15>
			output_two.ina226_addr = OUTPUT2_INA226_ADDR;
    4a94:	80 e4       	ldi	r24, 0x40	; 64
    4a96:	80 93 5d 24 	sts	0x245D, r24	; 0x80245d <output_two+0x3c>
			program_state.program = FOURTY_ONE;
    4a9a:	81 e0       	ldi	r24, 0x01	; 1
    4a9c:	80 93 e8 23 	sts	0x23E8, r24	; 0x8023e8 <program_state+0x4>
    4aa0:	08 95       	ret
		}
	}
	else if (program_state.program == THIRTY_EIGHT)
    4aa2:	81 11       	cpse	r24, r1
    4aa4:	1a c0       	rjmp	.+52     	; 0x4ada <load_values_from_eeprom+0x1dc>
	{
		output_one.max_current = 2000;
    4aa6:	20 ed       	ldi	r18, 0xD0	; 208
    4aa8:	37 e0       	ldi	r19, 0x07	; 7
    4aaa:	20 93 b5 24 	sts	0x24B5, r18	; 0x8024b5 <output_one+0x12>
    4aae:	30 93 b6 24 	sts	0x24B6, r19	; 0x8024b6 <output_one+0x13>
		output_one.max_voltage = 3000;
    4ab2:	88 eb       	ldi	r24, 0xB8	; 184
    4ab4:	9b e0       	ldi	r25, 0x0B	; 11
    4ab6:	80 93 b7 24 	sts	0x24B7, r24	; 0x8024b7 <output_one+0x14>
    4aba:	90 93 b8 24 	sts	0x24B8, r25	; 0x8024b8 <output_one+0x15>
		output_one.ina226_addr = OUTPUT1_INA226_ADDR; // 0x45 - THRIRTY_EIGTH, 0x41 - FOURTY_ONE
    4abe:	41 e4       	ldi	r20, 0x41	; 65
    4ac0:	40 93 df 24 	sts	0x24DF, r20	; 0x8024df <output_one+0x3c>
		output_two.max_current = 2000;
    4ac4:	20 93 33 24 	sts	0x2433, r18	; 0x802433 <output_two+0x12>
    4ac8:	30 93 34 24 	sts	0x2434, r19	; 0x802434 <output_two+0x13>
		output_two.max_voltage = 3000;
    4acc:	80 93 35 24 	sts	0x2435, r24	; 0x802435 <output_two+0x14>
    4ad0:	90 93 36 24 	sts	0x2436, r25	; 0x802436 <output_two+0x15>
		output_two.ina226_addr = OUTPUT2_INA226_ADDR;
    4ad4:	80 e4       	ldi	r24, 0x40	; 64
    4ad6:	80 93 5d 24 	sts	0x245D, r24	; 0x80245d <output_two+0x3c>
    4ada:	08 95       	ret

00004adc <clear_all_errors>:
	}
}

void clear_all_errors()
{
	program_state.uncleared_error = FALSE;
    4adc:	10 92 ea 23 	sts	0x23EA, r1	; 0x8023ea <program_state+0x6>
	output_one.voltage_drift_error = FALSE;
    4ae0:	a3 ea       	ldi	r26, 0xA3	; 163
    4ae2:	b4 e2       	ldi	r27, 0x24	; 36
    4ae4:	18 96       	adiw	r26, 0x08	; 8
    4ae6:	1c 92       	st	X, r1
    4ae8:	18 97       	sbiw	r26, 0x08	; 8
	output_one.over_temp_error1 = FALSE;
    4aea:	19 96       	adiw	r26, 0x09	; 9
    4aec:	1c 92       	st	X, r1
    4aee:	19 97       	sbiw	r26, 0x09	; 9
	output_one.over_temp_error_uncleared1 = FALSE;
    4af0:	1b 96       	adiw	r26, 0x0b	; 11
    4af2:	1c 92       	st	X, r1
    4af4:	1b 97       	sbiw	r26, 0x0b	; 11
	output_one.over_temp_error2 = FALSE;
    4af6:	1a 96       	adiw	r26, 0x0a	; 10
    4af8:	1c 92       	st	X, r1
    4afa:	1a 97       	sbiw	r26, 0x0a	; 10
	output_one.over_temp_error_uncleared2 = FALSE;
    4afc:	1c 96       	adiw	r26, 0x0c	; 12
    4afe:	1c 92       	st	X, r1
    4b00:	1c 97       	sbiw	r26, 0x0c	; 12
	output_one.current_voltage_pair[0] = 0;
	
	output_two.voltage_drift_error = FALSE;
    4b02:	e1 e2       	ldi	r30, 0x21	; 33
    4b04:	f4 e2       	ldi	r31, 0x24	; 36
    4b06:	10 86       	std	Z+8, r1	; 0x08
	output_two.over_temp_error1 = FALSE;
    4b08:	11 86       	std	Z+9, r1	; 0x09
	output_two.over_temp_error_uncleared1 = FALSE;
    4b0a:	13 86       	std	Z+11, r1	; 0x0b
	output_two.over_temp_error2 = FALSE;
    4b0c:	12 86       	std	Z+10, r1	; 0x0a
	output_two.over_temp_error_uncleared2 = FALSE;
    4b0e:	14 86       	std	Z+12, r1	; 0x0c
	output_two.current_voltage_pair[0] = 0;
	
	output_one.current_voltage_pair[0] = output_one.current;
    4b10:	56 96       	adiw	r26, 0x16	; 22
    4b12:	8d 91       	ld	r24, X+
    4b14:	9c 91       	ld	r25, X
    4b16:	57 97       	sbiw	r26, 0x17	; 23
    4b18:	d6 96       	adiw	r26, 0x36	; 54
    4b1a:	8d 93       	st	X+, r24
    4b1c:	9c 93       	st	X, r25
    4b1e:	d7 97       	sbiw	r26, 0x37	; 55
	output_one.current_voltage_pair[1] = output_one.voltage;
    4b20:	58 96       	adiw	r26, 0x18	; 24
    4b22:	8d 91       	ld	r24, X+
    4b24:	9c 91       	ld	r25, X
    4b26:	59 97       	sbiw	r26, 0x19	; 25
    4b28:	d8 96       	adiw	r26, 0x38	; 56
    4b2a:	8d 93       	st	X+, r24
    4b2c:	9c 93       	st	X, r25
    4b2e:	d9 97       	sbiw	r26, 0x39	; 57
	output_two.current_voltage_pair[0] = output_two.current;
    4b30:	86 89       	ldd	r24, Z+22	; 0x16
    4b32:	97 89       	ldd	r25, Z+23	; 0x17
    4b34:	86 ab       	std	Z+54, r24	; 0x36
    4b36:	97 ab       	std	Z+55, r25	; 0x37
	output_two.current_voltage_pair[1] = output_two.voltage;
    4b38:	80 8d       	ldd	r24, Z+24	; 0x18
    4b3a:	91 8d       	ldd	r25, Z+25	; 0x19
    4b3c:	80 af       	std	Z+56, r24	; 0x38
    4b3e:	91 af       	std	Z+57, r25	; 0x39
	output_one.need_to_set_current_voltage_pair = FALSE;
    4b40:	1d 96       	adiw	r26, 0x0d	; 13
    4b42:	1c 92       	st	X, r1
	output_two.need_to_set_current_voltage_pair = FALSE;
    4b44:	15 86       	std	Z+13, r1	; 0x0d
    4b46:	08 95       	ret

00004b48 <handle_encoder_clicks>:
/*******************************************************************************
This function handles what happens when a user clicks the encoder and holds it
********************************************************************************/
void handle_encoder_clicks()
{
	if(encoder_state.holding_click && (!(PORTA_IN & (1 << ENCDR_SW))))//if still holding click
    4b48:	80 91 63 24 	lds	r24, 0x2463	; 0x802463 <encoder_state+0x3>
    4b4c:	88 23       	and	r24, r24
    4b4e:	09 f4       	brne	.+2      	; 0x4b52 <handle_encoder_clicks+0xa>
    4b50:	ce c1       	rjmp	.+924    	; 0x4eee <handle_encoder_clicks+0x3a6>
    4b52:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
    4b56:	83 fd       	sbrc	r24, 3
    4b58:	a9 c0       	rjmp	.+338    	; 0x4cac <handle_encoder_clicks+0x164>
	{ 
		if(counters.periodic_int_count >= SETTINGS_HOLD_TIME)//5 seconds have passed
    4b5a:	80 91 e6 24 	lds	r24, 0x24E6	; 0x8024e6 <counters+0x2>
    4b5e:	90 91 e7 24 	lds	r25, 0x24E7	; 0x8024e7 <counters+0x3>
    4b62:	a0 91 e8 24 	lds	r26, 0x24E8	; 0x8024e8 <counters+0x4>
    4b66:	b0 91 e9 24 	lds	r27, 0x24E9	; 0x8024e9 <counters+0x5>
    4b6a:	80 3d       	cpi	r24, 0xD0	; 208
    4b6c:	27 e0       	ldi	r18, 0x07	; 7
    4b6e:	92 07       	cpc	r25, r18
    4b70:	a1 05       	cpc	r26, r1
    4b72:	b1 05       	cpc	r27, r1
    4b74:	20 f0       	brcs	.+8      	; 0x4b7e <handle_encoder_clicks+0x36>
		{ 
			program_state.mode = SETTINGS_MODE;
    4b76:	81 e0       	ldi	r24, 0x01	; 1
    4b78:	80 93 e7 23 	sts	0x23E7, r24	; 0x8023e7 <program_state+0x3>
    4b7c:	08 95       	ret
		}
		else if(counters.periodic_int_count >= EXIT_SETTINGS_HOLD_TIME)//2 seconds have passed
    4b7e:	88 3e       	cpi	r24, 0xE8	; 232
    4b80:	93 40       	sbci	r25, 0x03	; 3
    4b82:	a1 05       	cpc	r26, r1
    4b84:	b1 05       	cpc	r27, r1
    4b86:	08 f4       	brcc	.+2      	; 0x4b8a <handle_encoder_clicks+0x42>
    4b88:	b2 c1       	rjmp	.+868    	; 0x4eee <handle_encoder_clicks+0x3a6>
		{ 
			if(program_state.mode == SETTINGS_MODE)
    4b8a:	20 91 e7 23 	lds	r18, 0x23E7	; 0x8023e7 <program_state+0x3>
    4b8e:	21 30       	cpi	r18, 0x01	; 1
    4b90:	09 f0       	breq	.+2      	; 0x4b94 <handle_encoder_clicks+0x4c>
    4b92:	ad c1       	rjmp	.+858    	; 0x4eee <handle_encoder_clicks+0x3a6>
			{
				program_state.mode = NORMAL_MODE;
    4b94:	10 92 e7 23 	sts	0x23E7, r1	; 0x8023e7 <program_state+0x3>
				
				if (program_state.program == FOURTY_ONE || program_state.program == FOURTY_ONE_DUAL)
    4b98:	80 91 e8 23 	lds	r24, 0x23E8	; 0x8023e8 <program_state+0x4>
    4b9c:	9f ef       	ldi	r25, 0xFF	; 255
    4b9e:	98 0f       	add	r25, r24
    4ba0:	92 30       	cpi	r25, 0x02	; 2
    4ba2:	08 f0       	brcs	.+2      	; 0x4ba6 <handle_encoder_clicks+0x5e>
    4ba4:	42 c0       	rjmp	.+132    	; 0x4c2a <handle_encoder_clicks+0xe2>
				{
					if (program_state.num_outputs == DOUBLE)
    4ba6:	80 91 e4 23 	lds	r24, 0x23E4	; 0x8023e4 <program_state>
    4baa:	90 91 e5 23 	lds	r25, 0x23E5	; 0x8023e5 <program_state+0x1>
    4bae:	81 30       	cpi	r24, 0x01	; 1
    4bb0:	91 05       	cpc	r25, r1
    4bb2:	f1 f4       	brne	.+60     	; 0x4bf0 <handle_encoder_clicks+0xa8>
					{
						output_one.max_current = 2500;
    4bb4:	24 ec       	ldi	r18, 0xC4	; 196
    4bb6:	39 e0       	ldi	r19, 0x09	; 9
    4bb8:	20 93 b5 24 	sts	0x24B5, r18	; 0x8024b5 <output_one+0x12>
    4bbc:	30 93 b6 24 	sts	0x24B6, r19	; 0x8024b6 <output_one+0x13>
						output_one.max_voltage = 5000;
    4bc0:	88 e8       	ldi	r24, 0x88	; 136
    4bc2:	93 e1       	ldi	r25, 0x13	; 19
    4bc4:	80 93 b7 24 	sts	0x24B7, r24	; 0x8024b7 <output_one+0x14>
    4bc8:	90 93 b8 24 	sts	0x24B8, r25	; 0x8024b8 <output_one+0x15>
						output_one.ina226_addr = OUTPUT1_INA226_ADDR; // 0x45 - THRIRTY_EIGTH, 0x41 - FOURTY_ONE
    4bcc:	41 e4       	ldi	r20, 0x41	; 65
    4bce:	40 93 df 24 	sts	0x24DF, r20	; 0x8024df <output_one+0x3c>
						output_two.max_current = 2500;
    4bd2:	20 93 33 24 	sts	0x2433, r18	; 0x802433 <output_two+0x12>
    4bd6:	30 93 34 24 	sts	0x2434, r19	; 0x802434 <output_two+0x13>
						output_two.max_voltage = 5000;
    4bda:	80 93 35 24 	sts	0x2435, r24	; 0x802435 <output_two+0x14>
    4bde:	90 93 36 24 	sts	0x2436, r25	; 0x802436 <output_two+0x15>
						output_two.ina226_addr = OUTPUT2_INA226_ADDR;
    4be2:	80 e4       	ldi	r24, 0x40	; 64
    4be4:	80 93 5d 24 	sts	0x245D, r24	; 0x80245d <output_two+0x3c>
						program_state.program = FOURTY_ONE_DUAL;
    4be8:	82 e0       	ldi	r24, 0x02	; 2
    4bea:	80 93 e8 23 	sts	0x23E8, r24	; 0x8023e8 <program_state+0x4>
    4bee:	39 c0       	rjmp	.+114    	; 0x4c62 <handle_encoder_clicks+0x11a>
						
					}
					else if (program_state.num_outputs == SINGLE)
    4bf0:	89 2b       	or	r24, r25
    4bf2:	b9 f5       	brne	.+110    	; 0x4c62 <handle_encoder_clicks+0x11a>
					{
						output_one.max_current = 5000;
    4bf4:	88 e8       	ldi	r24, 0x88	; 136
    4bf6:	93 e1       	ldi	r25, 0x13	; 19
    4bf8:	80 93 b5 24 	sts	0x24B5, r24	; 0x8024b5 <output_one+0x12>
    4bfc:	90 93 b6 24 	sts	0x24B6, r25	; 0x8024b6 <output_one+0x13>
						output_one.max_voltage = 5000;
    4c00:	80 93 b7 24 	sts	0x24B7, r24	; 0x8024b7 <output_one+0x14>
    4c04:	90 93 b8 24 	sts	0x24B8, r25	; 0x8024b8 <output_one+0x15>
						output_one.ina226_addr = OUTPUT1_INA226_ADDR; // 0x45 - THRIRTY_EIGTH, 0x41 - FOURTY_ONE
    4c08:	31 e4       	ldi	r19, 0x41	; 65
    4c0a:	30 93 df 24 	sts	0x24DF, r19	; 0x8024df <output_one+0x3c>
						output_two.max_current = 5000;
    4c0e:	80 93 33 24 	sts	0x2433, r24	; 0x802433 <output_two+0x12>
    4c12:	90 93 34 24 	sts	0x2434, r25	; 0x802434 <output_two+0x13>
						output_two.max_voltage = 5000;
    4c16:	80 93 35 24 	sts	0x2435, r24	; 0x802435 <output_two+0x14>
    4c1a:	90 93 36 24 	sts	0x2436, r25	; 0x802436 <output_two+0x15>
						output_two.ina226_addr = OUTPUT2_INA226_ADDR;
    4c1e:	80 e4       	ldi	r24, 0x40	; 64
    4c20:	80 93 5d 24 	sts	0x245D, r24	; 0x80245d <output_two+0x3c>
						program_state.program = FOURTY_ONE;
    4c24:	20 93 e8 23 	sts	0x23E8, r18	; 0x8023e8 <program_state+0x4>
    4c28:	1c c0       	rjmp	.+56     	; 0x4c62 <handle_encoder_clicks+0x11a>
					}
				}
				else if (program_state.program == THIRTY_EIGHT)
    4c2a:	81 11       	cpse	r24, r1
    4c2c:	1a c0       	rjmp	.+52     	; 0x4c62 <handle_encoder_clicks+0x11a>
				{
					output_one.max_current = 2000;
    4c2e:	20 ed       	ldi	r18, 0xD0	; 208
    4c30:	37 e0       	ldi	r19, 0x07	; 7
    4c32:	20 93 b5 24 	sts	0x24B5, r18	; 0x8024b5 <output_one+0x12>
    4c36:	30 93 b6 24 	sts	0x24B6, r19	; 0x8024b6 <output_one+0x13>
					output_one.max_voltage = 3000;
    4c3a:	88 eb       	ldi	r24, 0xB8	; 184
    4c3c:	9b e0       	ldi	r25, 0x0B	; 11
    4c3e:	80 93 b7 24 	sts	0x24B7, r24	; 0x8024b7 <output_one+0x14>
    4c42:	90 93 b8 24 	sts	0x24B8, r25	; 0x8024b8 <output_one+0x15>
					output_one.ina226_addr = OUTPUT1_INA226_ADDR; // 0x45 - THRIRTY_EIGTH, 0x41 - FOURTY_ONE
    4c46:	41 e4       	ldi	r20, 0x41	; 65
    4c48:	40 93 df 24 	sts	0x24DF, r20	; 0x8024df <output_one+0x3c>
					output_two.max_current = 2000;
    4c4c:	20 93 33 24 	sts	0x2433, r18	; 0x802433 <output_two+0x12>
    4c50:	30 93 34 24 	sts	0x2434, r19	; 0x802434 <output_two+0x13>
					output_two.max_voltage = 3000;
    4c54:	80 93 35 24 	sts	0x2435, r24	; 0x802435 <output_two+0x14>
    4c58:	90 93 36 24 	sts	0x2436, r25	; 0x802436 <output_two+0x15>
					output_two.ina226_addr = OUTPUT2_INA226_ADDR;
    4c5c:	80 e4       	ldi	r24, 0x40	; 64
    4c5e:	80 93 5d 24 	sts	0x245D, r24	; 0x80245d <output_two+0x3c>
				}
				
				if (output_one.target_current > output_one.max_current)
    4c62:	80 91 b5 24 	lds	r24, 0x24B5	; 0x8024b5 <output_one+0x12>
    4c66:	90 91 b6 24 	lds	r25, 0x24B6	; 0x8024b6 <output_one+0x13>
    4c6a:	20 91 b3 24 	lds	r18, 0x24B3	; 0x8024b3 <output_one+0x10>
    4c6e:	30 91 b4 24 	lds	r19, 0x24B4	; 0x8024b4 <output_one+0x11>
    4c72:	82 17       	cp	r24, r18
    4c74:	93 07       	cpc	r25, r19
    4c76:	20 f4       	brcc	.+8      	; 0x4c80 <handle_encoder_clicks+0x138>
				{
					output_one.target_current = output_one.max_current;
    4c78:	80 93 b3 24 	sts	0x24B3, r24	; 0x8024b3 <output_one+0x10>
    4c7c:	90 93 b4 24 	sts	0x24B4, r25	; 0x8024b4 <output_one+0x11>
				}
				
				if (output_two.target_current > output_two.max_current)
    4c80:	80 91 33 24 	lds	r24, 0x2433	; 0x802433 <output_two+0x12>
    4c84:	90 91 34 24 	lds	r25, 0x2434	; 0x802434 <output_two+0x13>
    4c88:	20 91 31 24 	lds	r18, 0x2431	; 0x802431 <output_two+0x10>
    4c8c:	30 91 32 24 	lds	r19, 0x2432	; 0x802432 <output_two+0x11>
    4c90:	82 17       	cp	r24, r18
    4c92:	93 07       	cpc	r25, r19
    4c94:	20 f4       	brcc	.+8      	; 0x4c9e <handle_encoder_clicks+0x156>
				{
					output_two.target_current = output_two.max_current;
    4c96:	80 93 31 24 	sts	0x2431, r24	; 0x802431 <output_two+0x10>
    4c9a:	90 93 32 24 	sts	0x2432, r25	; 0x802432 <output_two+0x11>
				}
				program_state.output->isCurrentAdjusted = FALSE;
    4c9e:	e0 91 17 24 	lds	r30, 0x2417	; 0x802417 <program_state+0x33>
    4ca2:	f0 91 18 24 	lds	r31, 0x2418	; 0x802418 <program_state+0x34>
    4ca6:	11 a6       	std	Z+41, r1	; 0x29
				program_state.output->needsAdjusting = FALSE;
    4ca8:	12 a6       	std	Z+42, r1	; 0x2a
    4caa:	08 95       	ret
			}
		}
		
	}
	else if(encoder_state.holding_click && (PORTA_IN & (1 << ENCDR_SW)))//no longer holding click
    4cac:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
    4cb0:	83 ff       	sbrs	r24, 3
    4cb2:	1d c1       	rjmp	.+570    	; 0x4eee <handle_encoder_clicks+0x3a6>
	{ 
		if(program_state.mode == SETTINGS_MODE && counters.periodic_int_count < EXIT_SETTINGS_HOLD_TIME) 
    4cb4:	90 91 e7 23 	lds	r25, 0x23E7	; 0x8023e7 <program_state+0x3>
    4cb8:	91 30       	cpi	r25, 0x01	; 1
    4cba:	09 f0       	breq	.+2      	; 0x4cbe <handle_encoder_clicks+0x176>
    4cbc:	9f c0       	rjmp	.+318    	; 0x4dfc <handle_encoder_clicks+0x2b4>
    4cbe:	40 91 e6 24 	lds	r20, 0x24E6	; 0x8024e6 <counters+0x2>
    4cc2:	50 91 e7 24 	lds	r21, 0x24E7	; 0x8024e7 <counters+0x3>
    4cc6:	60 91 e8 24 	lds	r22, 0x24E8	; 0x8024e8 <counters+0x4>
    4cca:	70 91 e9 24 	lds	r23, 0x24E9	; 0x8024e9 <counters+0x5>
    4cce:	48 3e       	cpi	r20, 0xE8	; 232
    4cd0:	53 40       	sbci	r21, 0x03	; 3
    4cd2:	61 05       	cpc	r22, r1
    4cd4:	71 05       	cpc	r23, r1
    4cd6:	08 f0       	brcs	.+2      	; 0x4cda <handle_encoder_clicks+0x192>
    4cd8:	e7 c0       	rjmp	.+462    	; 0x4ea8 <handle_encoder_clicks+0x360>
		{
			if (program_state.testing_mode)
    4cda:	20 91 12 24 	lds	r18, 0x2412	; 0x802412 <program_state+0x2e>
    4cde:	80 91 ff 23 	lds	r24, 0x23FF	; 0x8023ff <program_state+0x1b>
    4ce2:	22 23       	and	r18, r18
    4ce4:	c9 f0       	breq	.+50     	; 0x4d18 <handle_encoder_clicks+0x1d0>
			{
				if (program_state.settings_row_num == 0)
    4ce6:	81 11       	cpse	r24, r1
    4ce8:	03 c0       	rjmp	.+6      	; 0x4cf0 <handle_encoder_clicks+0x1a8>
				{
					program_state.settings_row_num = 1;
    4cea:	90 93 ff 23 	sts	0x23FF, r25	; 0x8023ff <program_state+0x1b>
    4cee:	dc c0       	rjmp	.+440    	; 0x4ea8 <handle_encoder_clicks+0x360>
				}
				else if (program_state.settings_row_num == 1)
    4cf0:	81 30       	cpi	r24, 0x01	; 1
    4cf2:	21 f4       	brne	.+8      	; 0x4cfc <handle_encoder_clicks+0x1b4>
				{
					program_state.settings_row_num = 2;
    4cf4:	82 e0       	ldi	r24, 0x02	; 2
    4cf6:	80 93 ff 23 	sts	0x23FF, r24	; 0x8023ff <program_state+0x1b>
    4cfa:	d6 c0       	rjmp	.+428    	; 0x4ea8 <handle_encoder_clicks+0x360>
				}
				else if (program_state.settings_row_num == 2)
    4cfc:	82 30       	cpi	r24, 0x02	; 2
    4cfe:	09 f0       	breq	.+2      	; 0x4d02 <handle_encoder_clicks+0x1ba>
    4d00:	d3 c0       	rjmp	.+422    	; 0x4ea8 <handle_encoder_clicks+0x360>
				{
					program_state.mode = NORMAL_MODE;
    4d02:	10 92 e7 23 	sts	0x23E7, r1	; 0x8023e7 <program_state+0x3>
					program_state.settings_row_num = 0;
    4d06:	10 92 ff 23 	sts	0x23FF, r1	; 0x8023ff <program_state+0x1b>
					program_state.testing_mode = FALSE;
    4d0a:	10 92 12 24 	sts	0x2412, r1	; 0x802412 <program_state+0x2e>
					program_state.debug_mode = FALSE;
    4d0e:	10 92 13 24 	sts	0x2413, r1	; 0x802413 <program_state+0x2f>
					program_state.calibrating_mode = FALSE;
    4d12:	10 92 14 24 	sts	0x2414, r1	; 0x802414 <program_state+0x30>
    4d16:	c8 c0       	rjmp	.+400    	; 0x4ea8 <handle_encoder_clicks+0x360>
				}
			}
			else if(program_state.settings_row_num == 0 && program_state.program != THIRTY_EIGHT)
    4d18:	81 11       	cpse	r24, r1
    4d1a:	25 c0       	rjmp	.+74     	; 0x4d66 <handle_encoder_clicks+0x21e>
    4d1c:	80 91 e8 23 	lds	r24, 0x23E8	; 0x8023e8 <program_state+0x4>
    4d20:	88 23       	and	r24, r24
    4d22:	09 f4       	brne	.+2      	; 0x4d26 <handle_encoder_clicks+0x1de>
    4d24:	c1 c0       	rjmp	.+386    	; 0x4ea8 <handle_encoder_clicks+0x360>
			{
				if(program_state.num_outputs == SINGLE)
    4d26:	80 91 e4 23 	lds	r24, 0x23E4	; 0x8023e4 <program_state>
    4d2a:	90 91 e5 23 	lds	r25, 0x23E5	; 0x8023e5 <program_state+0x1>
    4d2e:	00 97       	sbiw	r24, 0x00	; 0
    4d30:	39 f4       	brne	.+14     	; 0x4d40 <handle_encoder_clicks+0x1f8>
				{
					program_state.num_outputs = DOUBLE;
    4d32:	81 e0       	ldi	r24, 0x01	; 1
    4d34:	90 e0       	ldi	r25, 0x00	; 0
    4d36:	80 93 e4 23 	sts	0x23E4, r24	; 0x8023e4 <program_state>
    4d3a:	90 93 e5 23 	sts	0x23E5, r25	; 0x8023e5 <program_state+0x1>
    4d3e:	0c c0       	rjmp	.+24     	; 0x4d58 <handle_encoder_clicks+0x210>
				}
				else if(program_state.num_outputs == DOUBLE)
    4d40:	01 97       	sbiw	r24, 0x01	; 1
    4d42:	51 f4       	brne	.+20     	; 0x4d58 <handle_encoder_clicks+0x210>
				{
					program_state.num_outputs = SINGLE;
    4d44:	10 92 e4 23 	sts	0x23E4, r1	; 0x8023e4 <program_state>
    4d48:	10 92 e5 23 	sts	0x23E5, r1	; 0x8023e5 <program_state+0x1>
					program_state.output = &output_one;
    4d4c:	83 ea       	ldi	r24, 0xA3	; 163
    4d4e:	94 e2       	ldi	r25, 0x24	; 36
    4d50:	80 93 17 24 	sts	0x2417, r24	; 0x802417 <program_state+0x33>
    4d54:	90 93 18 24 	sts	0x2418, r25	; 0x802418 <program_state+0x34>
				}
				write_external_eeprom(&twiMasterForEEPROM, EXTERNAL_EEPROM_ADDR, EEPROM_CHANELS_AMT_ADDR, program_state.num_outputs);
    4d58:	20 91 e4 23 	lds	r18, 0x23E4	; 0x8023e4 <program_state>
    4d5c:	30 91 e5 23 	lds	r19, 0x23E5	; 0x8023e5 <program_state+0x1>
    4d60:	4c e2       	ldi	r20, 0x2C	; 44
    4d62:	5a e0       	ldi	r21, 0x0A	; 10
    4d64:	38 c0       	rjmp	.+112    	; 0x4dd6 <handle_encoder_clicks+0x28e>
			}
			else if (program_state.settings_row_num == 1 && program_state.debug_mode)
    4d66:	81 30       	cpi	r24, 0x01	; 1
    4d68:	09 f0       	breq	.+2      	; 0x4d6c <handle_encoder_clicks+0x224>
    4d6a:	a9 c0       	rjmp	.+338    	; 0x4ebe <handle_encoder_clicks+0x376>
    4d6c:	80 91 13 24 	lds	r24, 0x2413	; 0x802413 <program_state+0x2f>
    4d70:	88 23       	and	r24, r24
    4d72:	b9 f1       	breq	.+110    	; 0x4de2 <handle_encoder_clicks+0x29a>
			{
				write_external_eeprom(&twiMasterForEEPROM, EXTERNAL_EEPROM_ADDR, EEPROM_COM_ERROR1_AMT_ADDR, 0);
    4d74:	20 e0       	ldi	r18, 0x00	; 0
    4d76:	30 e0       	ldi	r19, 0x00	; 0
    4d78:	4e e2       	ldi	r20, 0x2E	; 46
    4d7a:	5a e0       	ldi	r21, 0x0A	; 10
    4d7c:	61 e5       	ldi	r22, 0x51	; 81
    4d7e:	84 e5       	ldi	r24, 0x54	; 84
    4d80:	95 e2       	ldi	r25, 0x25	; 37
    4d82:	0e 94 20 32 	call	0x6440	; 0x6440 <write_external_eeprom>
				write_external_eeprom(&twiMasterForEEPROM, EXTERNAL_EEPROM_ADDR, EEPROM_COM_ERROR2_AMT_ADDR, 0);
    4d86:	20 e0       	ldi	r18, 0x00	; 0
    4d88:	30 e0       	ldi	r19, 0x00	; 0
    4d8a:	40 e3       	ldi	r20, 0x30	; 48
    4d8c:	5a e0       	ldi	r21, 0x0A	; 10
    4d8e:	61 e5       	ldi	r22, 0x51	; 81
    4d90:	84 e5       	ldi	r24, 0x54	; 84
    4d92:	95 e2       	ldi	r25, 0x25	; 37
    4d94:	0e 94 20 32 	call	0x6440	; 0x6440 <write_external_eeprom>
				write_external_eeprom(&twiMasterForEEPROM, EXTERNAL_EEPROM_ADDR, EEPROM_COM_ERROR3_AMT_ADDR, 0);
    4d98:	20 e0       	ldi	r18, 0x00	; 0
    4d9a:	30 e0       	ldi	r19, 0x00	; 0
    4d9c:	42 e3       	ldi	r20, 0x32	; 50
    4d9e:	5a e0       	ldi	r21, 0x0A	; 10
    4da0:	61 e5       	ldi	r22, 0x51	; 81
    4da2:	84 e5       	ldi	r24, 0x54	; 84
    4da4:	95 e2       	ldi	r25, 0x25	; 37
    4da6:	0e 94 20 32 	call	0x6440	; 0x6440 <write_external_eeprom>
				write_external_eeprom(&twiMasterForEEPROM, EXTERNAL_EEPROM_ADDR, EEPROM_COM_ERROR4_AMT_ADDR, 0);
    4daa:	20 e0       	ldi	r18, 0x00	; 0
    4dac:	30 e0       	ldi	r19, 0x00	; 0
    4dae:	44 e3       	ldi	r20, 0x34	; 52
    4db0:	5a e0       	ldi	r21, 0x0A	; 10
    4db2:	61 e5       	ldi	r22, 0x51	; 81
    4db4:	84 e5       	ldi	r24, 0x54	; 84
    4db6:	95 e2       	ldi	r25, 0x25	; 37
    4db8:	0e 94 20 32 	call	0x6440	; 0x6440 <write_external_eeprom>
				write_external_eeprom(&twiMasterForEEPROM, EXTERNAL_EEPROM_ADDR, EEPROM_COM_ERROR5_AMT_ADDR, 0);
    4dbc:	20 e0       	ldi	r18, 0x00	; 0
    4dbe:	30 e0       	ldi	r19, 0x00	; 0
    4dc0:	46 e3       	ldi	r20, 0x36	; 54
    4dc2:	5a e0       	ldi	r21, 0x0A	; 10
    4dc4:	61 e5       	ldi	r22, 0x51	; 81
    4dc6:	84 e5       	ldi	r24, 0x54	; 84
    4dc8:	95 e2       	ldi	r25, 0x25	; 37
    4dca:	0e 94 20 32 	call	0x6440	; 0x6440 <write_external_eeprom>
				write_external_eeprom(&twiMasterForEEPROM, EXTERNAL_EEPROM_ADDR, EEPROM_COM_ERROR6_AMT_ADDR, 0);
    4dce:	20 e0       	ldi	r18, 0x00	; 0
    4dd0:	30 e0       	ldi	r19, 0x00	; 0
    4dd2:	48 e3       	ldi	r20, 0x38	; 56
    4dd4:	5a e0       	ldi	r21, 0x0A	; 10
    4dd6:	61 e5       	ldi	r22, 0x51	; 81
    4dd8:	84 e5       	ldi	r24, 0x54	; 84
    4dda:	95 e2       	ldi	r25, 0x25	; 37
    4ddc:	0e 94 20 32 	call	0x6440	; 0x6440 <write_external_eeprom>
    4de0:	63 c0       	rjmp	.+198    	; 0x4ea8 <handle_encoder_clicks+0x360>
			{
				program_state.settings_row_num = 0;
				TIME_TO_CHECK_TEMP = 30000; // 30 sec default
				program_state.testing_mode = TRUE;
			}
			else if (program_state.settings_row_num == 1 && program_state.calibrating_mode)
    4de2:	80 91 14 24 	lds	r24, 0x2414	; 0x802414 <program_state+0x30>
    4de6:	88 23       	and	r24, r24
    4de8:	09 f4       	brne	.+2      	; 0x4dec <handle_encoder_clicks+0x2a4>
    4dea:	5e c0       	rjmp	.+188    	; 0x4ea8 <handle_encoder_clicks+0x360>
			{
				program_state.calibrating_mode_clicked = TRUE;
    4dec:	81 e0       	ldi	r24, 0x01	; 1
    4dee:	80 93 15 24 	sts	0x2415, r24	; 0x802415 <program_state+0x31>
				program_state.mode = NORMAL_MODE;
    4df2:	10 92 e7 23 	sts	0x23E7, r1	; 0x8023e7 <program_state+0x3>
				program_state.settings_row_num = 0;
    4df6:	10 92 ff 23 	sts	0x23FF, r1	; 0x8023ff <program_state+0x1b>
    4dfa:	56 c0       	rjmp	.+172    	; 0x4ea8 <handle_encoder_clicks+0x360>
			}
		}
		else if(program_state.mode == NORMAL_MODE && counters.periodic_int_count < EXIT_SETTINGS_HOLD_TIME)
    4dfc:	91 11       	cpse	r25, r1
    4dfe:	54 c0       	rjmp	.+168    	; 0x4ea8 <handle_encoder_clicks+0x360>
    4e00:	80 91 e6 24 	lds	r24, 0x24E6	; 0x8024e6 <counters+0x2>
    4e04:	90 91 e7 24 	lds	r25, 0x24E7	; 0x8024e7 <counters+0x3>
    4e08:	a0 91 e8 24 	lds	r26, 0x24E8	; 0x8024e8 <counters+0x4>
    4e0c:	b0 91 e9 24 	lds	r27, 0x24E9	; 0x8024e9 <counters+0x5>
    4e10:	88 3e       	cpi	r24, 0xE8	; 232
    4e12:	93 40       	sbci	r25, 0x03	; 3
    4e14:	a1 05       	cpc	r26, r1
    4e16:	b1 05       	cpc	r27, r1
    4e18:	08 f0       	brcs	.+2      	; 0x4e1c <handle_encoder_clicks+0x2d4>
    4e1a:	46 c0       	rjmp	.+140    	; 0x4ea8 <handle_encoder_clicks+0x360>
		{
			if(program_state.num_outputs == SINGLE)
    4e1c:	80 91 e4 23 	lds	r24, 0x23E4	; 0x8023e4 <program_state>
    4e20:	90 91 e5 23 	lds	r25, 0x23E5	; 0x8023e5 <program_state+0x1>
    4e24:	00 97       	sbiw	r24, 0x00	; 0
    4e26:	69 f4       	brne	.+26     	; 0x4e42 <handle_encoder_clicks+0x2fa>
			{
				program_state.output = &output_one;
    4e28:	83 ea       	ldi	r24, 0xA3	; 163
    4e2a:	94 e2       	ldi	r25, 0x24	; 36
    4e2c:	80 93 17 24 	sts	0x2417, r24	; 0x802417 <program_state+0x33>
    4e30:	90 93 18 24 	sts	0x2418, r25	; 0x802418 <program_state+0x34>
				output_two.set_current_state = VISIBLE_LOCKED;
    4e34:	82 e0       	ldi	r24, 0x02	; 2
    4e36:	80 93 30 24 	sts	0x2430, r24	; 0x802430 <output_two+0xf>
				output_one.set_current_state = VISIBLE;
    4e3a:	81 e0       	ldi	r24, 0x01	; 1
    4e3c:	80 93 b2 24 	sts	0x24B2, r24	; 0x8024b2 <output_one+0xf>
    4e40:	22 c0       	rjmp	.+68     	; 0x4e86 <handle_encoder_clicks+0x33e>
			}
			else if(program_state.num_outputs == DOUBLE)
    4e42:	01 97       	sbiw	r24, 0x01	; 1
    4e44:	01 f5       	brne	.+64     	; 0x4e86 <handle_encoder_clicks+0x33e>
			{
				if((program_state.output)->id == output_one.id && program_state.output->set_current_state == VISIBLE_LOCKED)
    4e46:	e0 91 17 24 	lds	r30, 0x2417	; 0x802417 <program_state+0x33>
    4e4a:	f0 91 18 24 	lds	r31, 0x2418	; 0x802418 <program_state+0x34>
    4e4e:	80 81       	ld	r24, Z
    4e50:	90 91 a3 24 	lds	r25, 0x24A3	; 0x8024a3 <output_one>
    4e54:	89 13       	cpse	r24, r25
    4e56:	10 c0       	rjmp	.+32     	; 0x4e78 <handle_encoder_clicks+0x330>
    4e58:	97 85       	ldd	r25, Z+15	; 0x0f
    4e5a:	92 30       	cpi	r25, 0x02	; 2
    4e5c:	69 f4       	brne	.+26     	; 0x4e78 <handle_encoder_clicks+0x330>
				{
					program_state.output = &output_two;
    4e5e:	81 e2       	ldi	r24, 0x21	; 33
    4e60:	94 e2       	ldi	r25, 0x24	; 36
    4e62:	80 93 17 24 	sts	0x2417, r24	; 0x802417 <program_state+0x33>
    4e66:	90 93 18 24 	sts	0x2418, r25	; 0x802418 <program_state+0x34>
					output_one.set_current_state = VISIBLE_LOCKED;
    4e6a:	82 e0       	ldi	r24, 0x02	; 2
    4e6c:	80 93 b2 24 	sts	0x24B2, r24	; 0x8024b2 <output_one+0xf>
					output_two.set_current_state = VISIBLE;
    4e70:	81 e0       	ldi	r24, 0x01	; 1
    4e72:	80 93 30 24 	sts	0x2430, r24	; 0x802430 <output_two+0xf>
    4e76:	07 c0       	rjmp	.+14     	; 0x4e86 <handle_encoder_clicks+0x33e>
				}
				else if(program_state.output->id == output_two.id && program_state.output->set_current_state == VISIBLE_LOCKED)
    4e78:	90 91 21 24 	lds	r25, 0x2421	; 0x802421 <output_two>
    4e7c:	89 13       	cpse	r24, r25
    4e7e:	03 c0       	rjmp	.+6      	; 0x4e86 <handle_encoder_clicks+0x33e>
    4e80:	87 85       	ldd	r24, Z+15	; 0x0f
    4e82:	82 30       	cpi	r24, 0x02	; 2
    4e84:	89 f2       	breq	.-94     	; 0x4e28 <handle_encoder_clicks+0x2e0>
					output_two.set_current_state = VISIBLE_LOCKED;
					output_one.set_current_state = VISIBLE;
				}
			}
			
			if(program_state.output->set_current_state == VISIBLE_LOCKED)
    4e86:	e0 91 17 24 	lds	r30, 0x2417	; 0x802417 <program_state+0x33>
    4e8a:	f0 91 18 24 	lds	r31, 0x2418	; 0x802418 <program_state+0x34>
    4e8e:	87 85       	ldd	r24, Z+15	; 0x0f
    4e90:	82 30       	cpi	r24, 0x02	; 2
    4e92:	11 f4       	brne	.+4      	; 0x4e98 <handle_encoder_clicks+0x350>
			{
				program_state.output->set_current_state = VISIBLE;
    4e94:	81 e0       	ldi	r24, 0x01	; 1
    4e96:	87 87       	std	Z+15, r24	; 0x0f
			}
			
			if (program_state.uncleared_error)
    4e98:	80 91 ea 23 	lds	r24, 0x23EA	; 0x8023ea <program_state+0x6>
    4e9c:	88 23       	and	r24, r24
    4e9e:	21 f0       	breq	.+8      	; 0x4ea8 <handle_encoder_clicks+0x360>
			{
				program_state.output->set_current_state = VISIBLE_LOCKED;
    4ea0:	82 e0       	ldi	r24, 0x02	; 2
    4ea2:	87 87       	std	Z+15, r24	; 0x0f
				clear_all_errors();
    4ea4:	0e 94 6e 25 	call	0x4adc	; 0x4adc <clear_all_errors>
			}
		}
		
		encoder_state.holding_click = FALSE;
    4ea8:	10 92 63 24 	sts	0x2463, r1	; 0x802463 <encoder_state+0x3>
		counters.periodic_int_count = 0;
    4eac:	10 92 e6 24 	sts	0x24E6, r1	; 0x8024e6 <counters+0x2>
    4eb0:	10 92 e7 24 	sts	0x24E7, r1	; 0x8024e7 <counters+0x3>
    4eb4:	10 92 e8 24 	sts	0x24E8, r1	; 0x8024e8 <counters+0x4>
    4eb8:	10 92 e9 24 	sts	0x24E9, r1	; 0x8024e9 <counters+0x5>
	}
}
    4ebc:	08 95       	ret
				write_external_eeprom(&twiMasterForEEPROM, EXTERNAL_EEPROM_ADDR, EEPROM_COM_ERROR3_AMT_ADDR, 0);
				write_external_eeprom(&twiMasterForEEPROM, EXTERNAL_EEPROM_ADDR, EEPROM_COM_ERROR4_AMT_ADDR, 0);
				write_external_eeprom(&twiMasterForEEPROM, EXTERNAL_EEPROM_ADDR, EEPROM_COM_ERROR5_AMT_ADDR, 0);
				write_external_eeprom(&twiMasterForEEPROM, EXTERNAL_EEPROM_ADDR, EEPROM_COM_ERROR6_AMT_ADDR, 0);
			}
			else if (program_state.settings_row_num == 2 && program_state.debug_mode)
    4ebe:	82 30       	cpi	r24, 0x02	; 2
    4ec0:	99 f7       	brne	.-26     	; 0x4ea8 <handle_encoder_clicks+0x360>
    4ec2:	80 91 13 24 	lds	r24, 0x2413	; 0x802413 <program_state+0x2f>
    4ec6:	88 23       	and	r24, r24
    4ec8:	79 f3       	breq	.-34     	; 0x4ea8 <handle_encoder_clicks+0x360>
			{
				program_state.settings_row_num = 0;
    4eca:	10 92 ff 23 	sts	0x23FF, r1	; 0x8023ff <program_state+0x1b>
				TIME_TO_CHECK_TEMP = 30000; // 30 sec default
    4ece:	80 e3       	ldi	r24, 0x30	; 48
    4ed0:	95 e7       	ldi	r25, 0x75	; 117
    4ed2:	a0 e0       	ldi	r26, 0x00	; 0
    4ed4:	b0 e0       	ldi	r27, 0x00	; 0
    4ed6:	80 93 1d 24 	sts	0x241D, r24	; 0x80241d <TIME_TO_CHECK_TEMP>
    4eda:	90 93 1e 24 	sts	0x241E, r25	; 0x80241e <TIME_TO_CHECK_TEMP+0x1>
    4ede:	a0 93 1f 24 	sts	0x241F, r26	; 0x80241f <TIME_TO_CHECK_TEMP+0x2>
    4ee2:	b0 93 20 24 	sts	0x2420, r27	; 0x802420 <TIME_TO_CHECK_TEMP+0x3>
				program_state.testing_mode = TRUE;
    4ee6:	81 e0       	ldi	r24, 0x01	; 1
    4ee8:	80 93 12 24 	sts	0x2412, r24	; 0x802412 <program_state+0x2e>
    4eec:	dd cf       	rjmp	.-70     	; 0x4ea8 <handle_encoder_clicks+0x360>
    4eee:	08 95       	ret

00004ef0 <handle_over_temperature>:

/**********************************************************************************************
Handles the state of the program if the temperature error has occurred and not been cleared yet
***********************************************************************************************/
void handle_over_temperature(OutputState* output)
{
    4ef0:	cf 92       	push	r12
    4ef2:	df 92       	push	r13
    4ef4:	ef 92       	push	r14
    4ef6:	ff 92       	push	r15
    4ef8:	0f 93       	push	r16
    4efa:	1f 93       	push	r17
    4efc:	cf 93       	push	r28
    4efe:	df 93       	push	r29
    4f00:	cd b7       	in	r28, 0x3d	; 61
    4f02:	de b7       	in	r29, 0x3e	; 62
    4f04:	29 97       	sbiw	r28, 0x09	; 9
    4f06:	cd bf       	out	0x3d, r28	; 61
    4f08:	de bf       	out	0x3e, r29	; 62
    4f0a:	8c 01       	movw	r16, r24
	if (counters.check_temp_counter >= TIME_TO_CHECK_TEMP)
    4f0c:	80 91 06 25 	lds	r24, 0x2506	; 0x802506 <counters+0x22>
    4f10:	90 91 07 25 	lds	r25, 0x2507	; 0x802507 <counters+0x23>
    4f14:	a0 e0       	ldi	r26, 0x00	; 0
    4f16:	b0 e0       	ldi	r27, 0x00	; 0
    4f18:	40 91 1d 24 	lds	r20, 0x241D	; 0x80241d <TIME_TO_CHECK_TEMP>
    4f1c:	50 91 1e 24 	lds	r21, 0x241E	; 0x80241e <TIME_TO_CHECK_TEMP+0x1>
    4f20:	60 91 1f 24 	lds	r22, 0x241F	; 0x80241f <TIME_TO_CHECK_TEMP+0x2>
    4f24:	70 91 20 24 	lds	r23, 0x2420	; 0x802420 <TIME_TO_CHECK_TEMP+0x3>
    4f28:	84 17       	cp	r24, r20
    4f2a:	95 07       	cpc	r25, r21
    4f2c:	a6 07       	cpc	r26, r22
    4f2e:	b7 07       	cpc	r27, r23
    4f30:	0c f4       	brge	.+2      	; 0x4f34 <handle_over_temperature+0x44>
    4f32:	8f c0       	rjmp	.+286    	; 0x5052 <handle_over_temperature+0x162>
	{
		counters.check_temp_counter = 0;
    4f34:	10 92 06 25 	sts	0x2506, r1	; 0x802506 <counters+0x22>
    4f38:	10 92 07 25 	sts	0x2507, r1	; 0x802507 <counters+0x23>
		
		char message[1];
		message[0] = 0x16;
    4f3c:	86 e1       	ldi	r24, 0x16	; 22
    4f3e:	89 87       	std	Y+9, r24	; 0x09
		TWI_MasterWrite(&twiMaster, BOARD_41EC_ADDR, (uint8_t *) message, 1);
    4f40:	21 e0       	ldi	r18, 0x01	; 1
    4f42:	ae 01       	movw	r20, r28
    4f44:	47 5f       	subi	r20, 0xF7	; 247
    4f46:	5f 4f       	sbci	r21, 0xFF	; 255
    4f48:	6c e4       	ldi	r22, 0x4C	; 76
    4f4a:	88 e6       	ldi	r24, 0x68	; 104
    4f4c:	94 e2       	ldi	r25, 0x24	; 36
    4f4e:	0e 94 62 33 	call	0x66c4	; 0x66c4 <TWI_MasterWrite>
		
		TWI_MasterRead(&twiMaster, BOARD_41EC_ADDR, 8);
    4f52:	48 e0       	ldi	r20, 0x08	; 8
    4f54:	6c e4       	ldi	r22, 0x4C	; 76
    4f56:	88 e6       	ldi	r24, 0x68	; 104
    4f58:	94 e2       	ldi	r25, 0x24	; 36
    4f5a:	0e 94 7f 33 	call	0x66fe	; 0x66fe <TWI_MasterRead>
    4f5e:	8f e4       	ldi	r24, 0x4F	; 79
    4f60:	93 ec       	ldi	r25, 0xC3	; 195
    4f62:	01 97       	sbiw	r24, 0x01	; 1
    4f64:	f1 f7       	brne	.-4      	; 0x4f62 <handle_over_temperature+0x72>
    4f66:	00 c0       	rjmp	.+0      	; 0x4f68 <handle_over_temperature+0x78>
    4f68:	00 00       	nop
		_delay_ms(10);
		
		uint16_t volatile t1 = ((uint16_t)twiMaster.readData[0] << 8) + twiMaster.readData[1];
    4f6a:	80 91 84 24 	lds	r24, 0x2484	; 0x802484 <twiMaster+0x1c>
    4f6e:	20 91 85 24 	lds	r18, 0x2485	; 0x802485 <twiMaster+0x1d>
    4f72:	90 e0       	ldi	r25, 0x00	; 0
    4f74:	98 2f       	mov	r25, r24
    4f76:	88 27       	eor	r24, r24
    4f78:	82 0f       	add	r24, r18
    4f7a:	91 1d       	adc	r25, r1
    4f7c:	8f 83       	std	Y+7, r24	; 0x07
    4f7e:	98 87       	std	Y+8, r25	; 0x08
		uint16_t volatile t2 = ((uint16_t)twiMaster.readData[2] << 8) + twiMaster.readData[3];
    4f80:	80 91 86 24 	lds	r24, 0x2486	; 0x802486 <twiMaster+0x1e>
    4f84:	20 91 87 24 	lds	r18, 0x2487	; 0x802487 <twiMaster+0x1f>
    4f88:	90 e0       	ldi	r25, 0x00	; 0
    4f8a:	98 2f       	mov	r25, r24
    4f8c:	88 27       	eor	r24, r24
    4f8e:	82 0f       	add	r24, r18
    4f90:	91 1d       	adc	r25, r1
    4f92:	8d 83       	std	Y+5, r24	; 0x05
    4f94:	9e 83       	std	Y+6, r25	; 0x06
		uint16_t volatile t3 = ((uint16_t)twiMaster.readData[4] << 8) + twiMaster.readData[5];
    4f96:	80 91 88 24 	lds	r24, 0x2488	; 0x802488 <twiMaster+0x20>
    4f9a:	20 91 89 24 	lds	r18, 0x2489	; 0x802489 <twiMaster+0x21>
    4f9e:	90 e0       	ldi	r25, 0x00	; 0
    4fa0:	98 2f       	mov	r25, r24
    4fa2:	88 27       	eor	r24, r24
    4fa4:	82 0f       	add	r24, r18
    4fa6:	91 1d       	adc	r25, r1
    4fa8:	8b 83       	std	Y+3, r24	; 0x03
    4faa:	9c 83       	std	Y+4, r25	; 0x04
		uint16_t volatile t4 = ((uint16_t)twiMaster.readData[6] << 8) + twiMaster.readData[7];
    4fac:	80 91 8a 24 	lds	r24, 0x248A	; 0x80248a <twiMaster+0x22>
    4fb0:	20 91 8b 24 	lds	r18, 0x248B	; 0x80248b <twiMaster+0x23>
    4fb4:	90 e0       	ldi	r25, 0x00	; 0
    4fb6:	98 2f       	mov	r25, r24
    4fb8:	88 27       	eor	r24, r24
    4fba:	82 0f       	add	r24, r18
    4fbc:	91 1d       	adc	r25, r1
    4fbe:	89 83       	std	Y+1, r24	; 0x01
    4fc0:	9a 83       	std	Y+2, r25	; 0x02
		
		if (t1 < OVER_TEMP_VALUE)
    4fc2:	2f 81       	ldd	r18, Y+7	; 0x07
    4fc4:	38 85       	ldd	r19, Y+8	; 0x08
    4fc6:	80 91 19 24 	lds	r24, 0x2419	; 0x802419 <OVER_TEMP_VALUE>
    4fca:	90 91 1a 24 	lds	r25, 0x241A	; 0x80241a <OVER_TEMP_VALUE+0x1>
    4fce:	28 17       	cp	r18, r24
    4fd0:	39 07       	cpc	r19, r25
    4fd2:	18 f4       	brcc	.+6      	; 0x4fda <handle_over_temperature+0xea>
		{
			output_one.over_temp_error1 = TRUE;
    4fd4:	21 e0       	ldi	r18, 0x01	; 1
    4fd6:	20 93 ac 24 	sts	0x24AC, r18	; 0x8024ac <output_one+0x9>
		}
		if (t1 > OVER_TEMP_VALUE + 10)
    4fda:	9c 01       	movw	r18, r24
    4fdc:	26 5f       	subi	r18, 0xF6	; 246
    4fde:	3f 4f       	sbci	r19, 0xFF	; 255
    4fe0:	4f 81       	ldd	r20, Y+7	; 0x07
    4fe2:	58 85       	ldd	r21, Y+8	; 0x08
    4fe4:	24 17       	cp	r18, r20
    4fe6:	35 07       	cpc	r19, r21
    4fe8:	10 f4       	brcc	.+4      	; 0x4fee <handle_over_temperature+0xfe>
		{
			output_one.over_temp_error1 = FALSE;
    4fea:	10 92 ac 24 	sts	0x24AC, r1	; 0x8024ac <output_one+0x9>
		}
		
		if (program_state.program == FOURTY_ONE || program_state.program == FOURTY_ONE_DUAL)
    4fee:	40 91 e8 23 	lds	r20, 0x23E8	; 0x8023e8 <program_state+0x4>
    4ff2:	41 50       	subi	r20, 0x01	; 1
    4ff4:	42 30       	cpi	r20, 0x02	; 2
    4ff6:	68 f5       	brcc	.+90     	; 0x5052 <handle_over_temperature+0x162>
		{
			if (t2 < OVER_TEMP_VALUE)
    4ff8:	4d 81       	ldd	r20, Y+5	; 0x05
    4ffa:	5e 81       	ldd	r21, Y+6	; 0x06
    4ffc:	48 17       	cp	r20, r24
    4ffe:	59 07       	cpc	r21, r25
    5000:	18 f4       	brcc	.+6      	; 0x5008 <handle_over_temperature+0x118>
			{
				output_one.over_temp_error2 = TRUE;
    5002:	41 e0       	ldi	r20, 0x01	; 1
    5004:	40 93 ad 24 	sts	0x24AD, r20	; 0x8024ad <output_one+0xa>
			}
			if (t2 > OVER_TEMP_VALUE + 10)
    5008:	4d 81       	ldd	r20, Y+5	; 0x05
    500a:	5e 81       	ldd	r21, Y+6	; 0x06
    500c:	24 17       	cp	r18, r20
    500e:	35 07       	cpc	r19, r21
    5010:	10 f4       	brcc	.+4      	; 0x5016 <handle_over_temperature+0x126>
			{
				output_one.over_temp_error2 = FALSE;
    5012:	10 92 ad 24 	sts	0x24AD, r1	; 0x8024ad <output_one+0xa>
			}
			
			if (t3 < OVER_TEMP_VALUE)
    5016:	4b 81       	ldd	r20, Y+3	; 0x03
    5018:	5c 81       	ldd	r21, Y+4	; 0x04
    501a:	48 17       	cp	r20, r24
    501c:	59 07       	cpc	r21, r25
    501e:	18 f4       	brcc	.+6      	; 0x5026 <handle_over_temperature+0x136>
			{
				output_two.over_temp_error1 = TRUE;
    5020:	41 e0       	ldi	r20, 0x01	; 1
    5022:	40 93 2a 24 	sts	0x242A, r20	; 0x80242a <output_two+0x9>
			}
			if (t3 > OVER_TEMP_VALUE + 10)
    5026:	4b 81       	ldd	r20, Y+3	; 0x03
    5028:	5c 81       	ldd	r21, Y+4	; 0x04
    502a:	24 17       	cp	r18, r20
    502c:	35 07       	cpc	r19, r21
    502e:	10 f4       	brcc	.+4      	; 0x5034 <handle_over_temperature+0x144>
			{
				output_two.over_temp_error1 = FALSE;
    5030:	10 92 2a 24 	sts	0x242A, r1	; 0x80242a <output_two+0x9>
			}
			
			if (t4 < OVER_TEMP_VALUE)
    5034:	49 81       	ldd	r20, Y+1	; 0x01
    5036:	5a 81       	ldd	r21, Y+2	; 0x02
    5038:	48 17       	cp	r20, r24
    503a:	59 07       	cpc	r21, r25
    503c:	18 f4       	brcc	.+6      	; 0x5044 <handle_over_temperature+0x154>
			{
				output_two.over_temp_error2 = TRUE;
    503e:	81 e0       	ldi	r24, 0x01	; 1
    5040:	80 93 2b 24 	sts	0x242B, r24	; 0x80242b <output_two+0xa>
			}
			if (t4 > OVER_TEMP_VALUE + 10)
    5044:	89 81       	ldd	r24, Y+1	; 0x01
    5046:	9a 81       	ldd	r25, Y+2	; 0x02
    5048:	28 17       	cp	r18, r24
    504a:	39 07       	cpc	r19, r25
    504c:	10 f4       	brcc	.+4      	; 0x5052 <handle_over_temperature+0x162>
			{
				output_two.over_temp_error2 = FALSE;
    504e:	10 92 2b 24 	sts	0x242B, r1	; 0x80242b <output_two+0xa>
			}
		}
	}
	
	if(output->over_temp_error1 || output->over_temp_error2)
    5052:	f8 01       	movw	r30, r16
    5054:	21 85       	ldd	r18, Z+9	; 0x09
    5056:	82 ad       	ldd	r24, Z+58	; 0x3a
    5058:	93 ad       	ldd	r25, Z+59	; 0x3b
    505a:	21 11       	cpse	r18, r1
    505c:	03 c0       	rjmp	.+6      	; 0x5064 <handle_over_temperature+0x174>
    505e:	32 85       	ldd	r19, Z+10	; 0x0a
    5060:	33 23       	and	r19, r19
    5062:	39 f0       	breq	.+14     	; 0x5072 <handle_over_temperature+0x182>
	{
		//wr8(REG_VOL_SOUND,0xFF); //set the volume to maximum
		//wr16(REG_SOUND, 0x08);
		//wr8(REG_PLAY, 1); // play the sound
		++(output->over_temp_half_second_count);
    5064:	01 96       	adiw	r24, 0x01	; 1
		if(output->over_temp_half_second_count > 90)
    5066:	8b 35       	cpi	r24, 0x5B	; 91
    5068:	91 05       	cpc	r25, r1
    506a:	50 f0       	brcs	.+20     	; 0x5080 <handle_over_temperature+0x190>
		{
			output->over_temp_half_second_count = 90;
    506c:	8a e5       	ldi	r24, 0x5A	; 90
    506e:	90 e0       	ldi	r25, 0x00	; 0
    5070:	07 c0       	rjmp	.+14     	; 0x5080 <handle_over_temperature+0x190>
		}
	}
	else if(output->over_temp_half_second_count > 0)
    5072:	00 97       	sbiw	r24, 0x00	; 0
    5074:	c9 f1       	breq	.+114    	; 0x50e8 <handle_over_temperature+0x1f8>
	{
		--(output->over_temp_half_second_count);
    5076:	01 97       	sbiw	r24, 0x01	; 1
    5078:	f8 01       	movw	r30, r16
    507a:	82 af       	std	Z+58, r24	; 0x3a
    507c:	93 af       	std	Z+59, r25	; 0x3b
    507e:	34 c0       	rjmp	.+104    	; 0x50e8 <handle_over_temperature+0x1f8>
	if(output->over_temp_error1 || output->over_temp_error2)
	{
		//wr8(REG_VOL_SOUND,0xFF); //set the volume to maximum
		//wr16(REG_SOUND, 0x08);
		//wr8(REG_PLAY, 1); // play the sound
		++(output->over_temp_half_second_count);
    5080:	f8 01       	movw	r30, r16
    5082:	82 af       	std	Z+58, r24	; 0x3a
    5084:	93 af       	std	Z+59, r25	; 0x3b
	{
		--(output->over_temp_half_second_count);
	}
	
	
	if(output->over_temp_error1 || output->over_temp_half_second_count)
    5086:	22 23       	and	r18, r18
    5088:	79 f1       	breq	.+94     	; 0x50e8 <handle_over_temperature+0x1f8>
	{
		program_state.uncleared_error = TRUE;
    508a:	81 e0       	ldi	r24, 0x01	; 1
    508c:	80 93 ea 23 	sts	0x23EA, r24	; 0x8023ea <program_state+0x6>
		output->over_temp_error_uncleared1 = TRUE;
    5090:	f8 01       	movw	r30, r16
    5092:	83 87       	std	Z+11, r24	; 0x0b
		output->reduced_current_fraction = (float)((9 - output->over_temp_half_second_count/10)/10.0);
    5094:	82 ad       	ldd	r24, Z+58	; 0x3a
    5096:	93 ad       	ldd	r25, Z+59	; 0x3b
    5098:	6a e0       	ldi	r22, 0x0A	; 10
    509a:	70 e0       	ldi	r23, 0x00	; 0
    509c:	0e 94 d4 37 	call	0x6fa8	; 0x6fa8 <__udivmodhi4>
    50a0:	cb 01       	movw	r24, r22
    50a2:	69 e0       	ldi	r22, 0x09	; 9
    50a4:	70 e0       	ldi	r23, 0x00	; 0
    50a6:	68 1b       	sub	r22, r24
    50a8:	79 0b       	sbc	r23, r25
    50aa:	80 e0       	ldi	r24, 0x00	; 0
    50ac:	90 e0       	ldi	r25, 0x00	; 0
    50ae:	0e 94 e4 35 	call	0x6bc8	; 0x6bc8 <__floatunsisf>
    50b2:	20 e0       	ldi	r18, 0x00	; 0
    50b4:	30 e0       	ldi	r19, 0x00	; 0
    50b6:	40 e2       	ldi	r20, 0x20	; 32
    50b8:	51 e4       	ldi	r21, 0x41	; 65
    50ba:	0e 94 3c 35 	call	0x6a78	; 0x6a78 <__divsf3>
    50be:	6b 01       	movw	r12, r22
    50c0:	7c 01       	movw	r14, r24
		if (output->reduced_current_fraction < 0.4)
    50c2:	2d ec       	ldi	r18, 0xCD	; 205
    50c4:	3c ec       	ldi	r19, 0xCC	; 204
    50c6:	4c ec       	ldi	r20, 0xCC	; 204
    50c8:	5e e3       	ldi	r21, 0x3E	; 62
    50ca:	0e 94 37 35 	call	0x6a6e	; 0x6a6e <__cmpsf2>
		{
			output->reduced_current_fraction = 0;
    50ce:	f8 01       	movw	r30, r16
	if(output->over_temp_error1 || output->over_temp_half_second_count)
	{
		program_state.uncleared_error = TRUE;
		output->over_temp_error_uncleared1 = TRUE;
		output->reduced_current_fraction = (float)((9 - output->over_temp_half_second_count/10)/10.0);
		if (output->reduced_current_fraction < 0.4)
    50d0:	87 fd       	sbrc	r24, 7
    50d2:	05 c0       	rjmp	.+10     	; 0x50de <handle_over_temperature+0x1ee>
	
	if(output->over_temp_error1 || output->over_temp_half_second_count)
	{
		program_state.uncleared_error = TRUE;
		output->over_temp_error_uncleared1 = TRUE;
		output->reduced_current_fraction = (float)((9 - output->over_temp_half_second_count/10)/10.0);
    50d4:	c3 a2       	std	Z+35, r12	; 0x23
    50d6:	d4 a2       	std	Z+36, r13	; 0x24
    50d8:	e5 a2       	std	Z+37, r14	; 0x25
    50da:	f6 a2       	std	Z+38, r15	; 0x26
    50dc:	20 c0       	rjmp	.+64     	; 0x511e <handle_over_temperature+0x22e>
		if (output->reduced_current_fraction < 0.4)
		{
			output->reduced_current_fraction = 0;
    50de:	13 a2       	std	Z+35, r1	; 0x23
    50e0:	14 a2       	std	Z+36, r1	; 0x24
    50e2:	15 a2       	std	Z+37, r1	; 0x25
    50e4:	16 a2       	std	Z+38, r1	; 0x26
    50e6:	1b c0       	rjmp	.+54     	; 0x511e <handle_over_temperature+0x22e>
	{
		--(output->over_temp_half_second_count);
	}
	
	
	if(output->over_temp_error1 || output->over_temp_half_second_count)
    50e8:	f8 01       	movw	r30, r16
    50ea:	82 ad       	ldd	r24, Z+58	; 0x3a
    50ec:	93 ad       	ldd	r25, Z+59	; 0x3b
    50ee:	89 2b       	or	r24, r25
    50f0:	61 f6       	brne	.-104    	; 0x508a <handle_over_temperature+0x19a>
		if (output->reduced_current_fraction < 0.4)
		{
			output->reduced_current_fraction = 0;
		}
	}
	else if(output->over_temp_error2 || output->over_temp_half_second_count)
    50f2:	f8 01       	movw	r30, r16
    50f4:	82 85       	ldd	r24, Z+10	; 0x0a
    50f6:	88 23       	and	r24, r24
    50f8:	49 f0       	breq	.+18     	; 0x510c <handle_over_temperature+0x21c>
	{
		program_state.uncleared_error = TRUE;
    50fa:	81 e0       	ldi	r24, 0x01	; 1
    50fc:	80 93 ea 23 	sts	0x23EA, r24	; 0x8023ea <program_state+0x6>
		output->over_temp_error_uncleared2 = TRUE;
    5100:	84 87       	std	Z+12, r24	; 0x0c
		output->reduced_current_fraction = (float)((9 - output->over_temp_half_second_count/10)/10.0);
    5102:	86 e6       	ldi	r24, 0x66	; 102
    5104:	96 e6       	ldi	r25, 0x66	; 102
    5106:	a6 e6       	ldi	r26, 0x66	; 102
    5108:	bf e3       	ldi	r27, 0x3F	; 63
    510a:	05 c0       	rjmp	.+10     	; 0x5116 <handle_over_temperature+0x226>
			output->reduced_current_fraction = 0;
		}
	}
	else
	{
		output->reduced_current_fraction = 1.00;
    510c:	80 e0       	ldi	r24, 0x00	; 0
    510e:	90 e0       	ldi	r25, 0x00	; 0
    5110:	a0 e8       	ldi	r26, 0x80	; 128
    5112:	bf e3       	ldi	r27, 0x3F	; 63
    5114:	f8 01       	movw	r30, r16
    5116:	83 a3       	std	Z+35, r24	; 0x23
    5118:	94 a3       	std	Z+36, r25	; 0x24
    511a:	a5 a3       	std	Z+37, r26	; 0x25
    511c:	b6 a3       	std	Z+38, r27	; 0x26
	}
}
    511e:	29 96       	adiw	r28, 0x09	; 9
    5120:	cd bf       	out	0x3d, r28	; 61
    5122:	de bf       	out	0x3e, r29	; 62
    5124:	df 91       	pop	r29
    5126:	cf 91       	pop	r28
    5128:	1f 91       	pop	r17
    512a:	0f 91       	pop	r16
    512c:	ff 90       	pop	r15
    512e:	ef 90       	pop	r14
    5130:	df 90       	pop	r13
    5132:	cf 90       	pop	r12
    5134:	08 95       	ret

00005136 <check_voltage_drift>:
/**********************************************************************
This function sets the voltage-current pair and also checks whether the
voltage has strayed by more than a certain percentage
***********************************************************************/
void check_voltage_drift(OutputState* output)
{
    5136:	8f 92       	push	r8
    5138:	9f 92       	push	r9
    513a:	af 92       	push	r10
    513c:	bf 92       	push	r11
    513e:	cf 92       	push	r12
    5140:	df 92       	push	r13
    5142:	ef 92       	push	r14
    5144:	ff 92       	push	r15
    5146:	cf 93       	push	r28
    5148:	df 93       	push	r29
    514a:	ec 01       	movw	r28, r24
		//if >15% in voltage
		if(!output_one.over_temp_error1 && !output_one.over_temp_error2 && !output_one.over_temp_half_second_count && output_one.current_voltage_pair[0] && 
    514c:	80 91 ac 24 	lds	r24, 0x24AC	; 0x8024ac <output_one+0x9>
    5150:	81 11       	cpse	r24, r1
    5152:	4d c0       	rjmp	.+154    	; 0x51ee <check_voltage_drift+0xb8>
    5154:	80 91 ad 24 	lds	r24, 0x24AD	; 0x8024ad <output_one+0xa>
    5158:	81 11       	cpse	r24, r1
    515a:	49 c0       	rjmp	.+146    	; 0x51ee <check_voltage_drift+0xb8>
    515c:	80 91 dd 24 	lds	r24, 0x24DD	; 0x8024dd <output_one+0x3a>
    5160:	90 91 de 24 	lds	r25, 0x24DE	; 0x8024de <output_one+0x3b>
    5164:	89 2b       	or	r24, r25
    5166:	09 f0       	breq	.+2      	; 0x516a <check_voltage_drift+0x34>
    5168:	42 c0       	rjmp	.+132    	; 0x51ee <check_voltage_drift+0xb8>
    516a:	80 91 d9 24 	lds	r24, 0x24D9	; 0x8024d9 <output_one+0x36>
    516e:	90 91 da 24 	lds	r25, 0x24DA	; 0x8024da <output_one+0x37>
    5172:	89 2b       	or	r24, r25
    5174:	e1 f1       	breq	.+120    	; 0x51ee <check_voltage_drift+0xb8>
			(output_one.voltage > output_one.current_voltage_pair[1] * 1.15 || output_one.voltage < output_one.current_voltage_pair[1] * 0.85))
    5176:	60 91 bb 24 	lds	r22, 0x24BB	; 0x8024bb <output_one+0x18>
    517a:	70 91 bc 24 	lds	r23, 0x24BC	; 0x8024bc <output_one+0x19>
    517e:	80 e0       	ldi	r24, 0x00	; 0
    5180:	90 e0       	ldi	r25, 0x00	; 0
    5182:	0e 94 e4 35 	call	0x6bc8	; 0x6bc8 <__floatunsisf>
    5186:	6b 01       	movw	r12, r22
    5188:	7c 01       	movw	r14, r24
    518a:	60 91 db 24 	lds	r22, 0x24DB	; 0x8024db <output_one+0x38>
    518e:	70 91 dc 24 	lds	r23, 0x24DC	; 0x8024dc <output_one+0x39>
    5192:	80 e0       	ldi	r24, 0x00	; 0
    5194:	90 e0       	ldi	r25, 0x00	; 0
    5196:	0e 94 e4 35 	call	0x6bc8	; 0x6bc8 <__floatunsisf>
    519a:	4b 01       	movw	r8, r22
    519c:	5c 01       	movw	r10, r24
voltage has strayed by more than a certain percentage
***********************************************************************/
void check_voltage_drift(OutputState* output)
{
		//if >15% in voltage
		if(!output_one.over_temp_error1 && !output_one.over_temp_error2 && !output_one.over_temp_half_second_count && output_one.current_voltage_pair[0] && 
    519e:	23 e3       	ldi	r18, 0x33	; 51
    51a0:	33 e3       	ldi	r19, 0x33	; 51
    51a2:	43 e9       	ldi	r20, 0x93	; 147
    51a4:	5f e3       	ldi	r21, 0x3F	; 63
    51a6:	0e 94 f3 36 	call	0x6de6	; 0x6de6 <__mulsf3>
    51aa:	9b 01       	movw	r18, r22
    51ac:	ac 01       	movw	r20, r24
    51ae:	c7 01       	movw	r24, r14
    51b0:	b6 01       	movw	r22, r12
    51b2:	0e 94 96 36 	call	0x6d2c	; 0x6d2c <__gesf2>
    51b6:	18 16       	cp	r1, r24
    51b8:	84 f0       	brlt	.+32     	; 0x51da <check_voltage_drift+0xa4>
			(output_one.voltage > output_one.current_voltage_pair[1] * 1.15 || output_one.voltage < output_one.current_voltage_pair[1] * 0.85))
    51ba:	2a e9       	ldi	r18, 0x9A	; 154
    51bc:	39 e9       	ldi	r19, 0x99	; 153
    51be:	49 e5       	ldi	r20, 0x59	; 89
    51c0:	5f e3       	ldi	r21, 0x3F	; 63
    51c2:	c5 01       	movw	r24, r10
    51c4:	b4 01       	movw	r22, r8
    51c6:	0e 94 f3 36 	call	0x6de6	; 0x6de6 <__mulsf3>
    51ca:	9b 01       	movw	r18, r22
    51cc:	ac 01       	movw	r20, r24
    51ce:	c7 01       	movw	r24, r14
    51d0:	b6 01       	movw	r22, r12
    51d2:	0e 94 37 35 	call	0x6a6e	; 0x6a6e <__cmpsf2>
    51d6:	87 ff       	sbrs	r24, 7
    51d8:	0a c0       	rjmp	.+20     	; 0x51ee <check_voltage_drift+0xb8>
		{ 
			output_one.voltage_drift_counter++;
    51da:	80 91 d3 24 	lds	r24, 0x24D3	; 0x8024d3 <output_one+0x30>
    51de:	90 91 d4 24 	lds	r25, 0x24D4	; 0x8024d4 <output_one+0x31>
    51e2:	01 96       	adiw	r24, 0x01	; 1
    51e4:	80 93 d3 24 	sts	0x24D3, r24	; 0x8024d3 <output_one+0x30>
    51e8:	90 93 d4 24 	sts	0x24D4, r25	; 0x8024d4 <output_one+0x31>
    51ec:	04 c0       	rjmp	.+8      	; 0x51f6 <check_voltage_drift+0xc0>
		}
		else
		{
			output_one.voltage_drift_counter = 0;
    51ee:	10 92 d3 24 	sts	0x24D3, r1	; 0x8024d3 <output_one+0x30>
    51f2:	10 92 d4 24 	sts	0x24D4, r1	; 0x8024d4 <output_one+0x31>
		}
		
		if (output_one.voltage_drift_counter > 120)
    51f6:	80 91 d3 24 	lds	r24, 0x24D3	; 0x8024d3 <output_one+0x30>
    51fa:	90 91 d4 24 	lds	r25, 0x24D4	; 0x8024d4 <output_one+0x31>
    51fe:	89 37       	cpi	r24, 0x79	; 121
    5200:	91 05       	cpc	r25, r1
    5202:	28 f0       	brcs	.+10     	; 0x520e <check_voltage_drift+0xd8>
		{
			output_one.voltage_drift_error = TRUE;
    5204:	81 e0       	ldi	r24, 0x01	; 1
    5206:	80 93 ab 24 	sts	0x24AB, r24	; 0x8024ab <output_one+0x8>
			program_state.uncleared_error = TRUE;
    520a:	80 93 ea 23 	sts	0x23EA, r24	; 0x8023ea <program_state+0x6>
		}
		
		//if >15% in voltage
		if(output->id != output_one.id && !output_two.over_temp_error1 && !output_two.over_temp_error2 && !output_two.over_temp_half_second_count && output_two.current_voltage_pair[0] && 
    520e:	98 81       	ld	r25, Y
    5210:	80 91 a3 24 	lds	r24, 0x24A3	; 0x8024a3 <output_one>
    5214:	98 17       	cp	r25, r24
    5216:	09 f4       	brne	.+2      	; 0x521a <check_voltage_drift+0xe4>
    5218:	51 c0       	rjmp	.+162    	; 0x52bc <check_voltage_drift+0x186>
    521a:	80 91 2a 24 	lds	r24, 0x242A	; 0x80242a <output_two+0x9>
    521e:	81 11       	cpse	r24, r1
    5220:	4d c0       	rjmp	.+154    	; 0x52bc <check_voltage_drift+0x186>
    5222:	80 91 2b 24 	lds	r24, 0x242B	; 0x80242b <output_two+0xa>
    5226:	81 11       	cpse	r24, r1
    5228:	49 c0       	rjmp	.+146    	; 0x52bc <check_voltage_drift+0x186>
    522a:	80 91 5b 24 	lds	r24, 0x245B	; 0x80245b <output_two+0x3a>
    522e:	90 91 5c 24 	lds	r25, 0x245C	; 0x80245c <output_two+0x3b>
    5232:	89 2b       	or	r24, r25
    5234:	09 f0       	breq	.+2      	; 0x5238 <check_voltage_drift+0x102>
    5236:	42 c0       	rjmp	.+132    	; 0x52bc <check_voltage_drift+0x186>
    5238:	80 91 57 24 	lds	r24, 0x2457	; 0x802457 <output_two+0x36>
    523c:	90 91 58 24 	lds	r25, 0x2458	; 0x802458 <output_two+0x37>
    5240:	89 2b       	or	r24, r25
    5242:	e1 f1       	breq	.+120    	; 0x52bc <check_voltage_drift+0x186>
			(output_two.voltage > output_two.current_voltage_pair[1] * 1.15 || output_two.voltage < output_two.current_voltage_pair[1] * 0.85))
    5244:	60 91 39 24 	lds	r22, 0x2439	; 0x802439 <output_two+0x18>
    5248:	70 91 3a 24 	lds	r23, 0x243A	; 0x80243a <output_two+0x19>
    524c:	80 e0       	ldi	r24, 0x00	; 0
    524e:	90 e0       	ldi	r25, 0x00	; 0
    5250:	0e 94 e4 35 	call	0x6bc8	; 0x6bc8 <__floatunsisf>
    5254:	6b 01       	movw	r12, r22
    5256:	7c 01       	movw	r14, r24
    5258:	60 91 59 24 	lds	r22, 0x2459	; 0x802459 <output_two+0x38>
    525c:	70 91 5a 24 	lds	r23, 0x245A	; 0x80245a <output_two+0x39>
    5260:	80 e0       	ldi	r24, 0x00	; 0
    5262:	90 e0       	ldi	r25, 0x00	; 0
    5264:	0e 94 e4 35 	call	0x6bc8	; 0x6bc8 <__floatunsisf>
    5268:	4b 01       	movw	r8, r22
    526a:	5c 01       	movw	r10, r24
			output_one.voltage_drift_error = TRUE;
			program_state.uncleared_error = TRUE;
		}
		
		//if >15% in voltage
		if(output->id != output_one.id && !output_two.over_temp_error1 && !output_two.over_temp_error2 && !output_two.over_temp_half_second_count && output_two.current_voltage_pair[0] && 
    526c:	23 e3       	ldi	r18, 0x33	; 51
    526e:	33 e3       	ldi	r19, 0x33	; 51
    5270:	43 e9       	ldi	r20, 0x93	; 147
    5272:	5f e3       	ldi	r21, 0x3F	; 63
    5274:	0e 94 f3 36 	call	0x6de6	; 0x6de6 <__mulsf3>
    5278:	9b 01       	movw	r18, r22
    527a:	ac 01       	movw	r20, r24
    527c:	c7 01       	movw	r24, r14
    527e:	b6 01       	movw	r22, r12
    5280:	0e 94 96 36 	call	0x6d2c	; 0x6d2c <__gesf2>
    5284:	18 16       	cp	r1, r24
    5286:	84 f0       	brlt	.+32     	; 0x52a8 <check_voltage_drift+0x172>
			(output_two.voltage > output_two.current_voltage_pair[1] * 1.15 || output_two.voltage < output_two.current_voltage_pair[1] * 0.85))
    5288:	2a e9       	ldi	r18, 0x9A	; 154
    528a:	39 e9       	ldi	r19, 0x99	; 153
    528c:	49 e5       	ldi	r20, 0x59	; 89
    528e:	5f e3       	ldi	r21, 0x3F	; 63
    5290:	c5 01       	movw	r24, r10
    5292:	b4 01       	movw	r22, r8
    5294:	0e 94 f3 36 	call	0x6de6	; 0x6de6 <__mulsf3>
    5298:	9b 01       	movw	r18, r22
    529a:	ac 01       	movw	r20, r24
    529c:	c7 01       	movw	r24, r14
    529e:	b6 01       	movw	r22, r12
    52a0:	0e 94 37 35 	call	0x6a6e	; 0x6a6e <__cmpsf2>
    52a4:	87 ff       	sbrs	r24, 7
    52a6:	0a c0       	rjmp	.+20     	; 0x52bc <check_voltage_drift+0x186>
		{ 
			output_two.voltage_drift_counter++;
    52a8:	80 91 51 24 	lds	r24, 0x2451	; 0x802451 <output_two+0x30>
    52ac:	90 91 52 24 	lds	r25, 0x2452	; 0x802452 <output_two+0x31>
    52b0:	01 96       	adiw	r24, 0x01	; 1
    52b2:	80 93 51 24 	sts	0x2451, r24	; 0x802451 <output_two+0x30>
    52b6:	90 93 52 24 	sts	0x2452, r25	; 0x802452 <output_two+0x31>
    52ba:	04 c0       	rjmp	.+8      	; 0x52c4 <check_voltage_drift+0x18e>
		}
		else
		{
			output_two.voltage_drift_counter = 0;
    52bc:	10 92 51 24 	sts	0x2451, r1	; 0x802451 <output_two+0x30>
    52c0:	10 92 52 24 	sts	0x2452, r1	; 0x802452 <output_two+0x31>
		}
		
		if (output_two.voltage_drift_counter > 120)
    52c4:	80 91 51 24 	lds	r24, 0x2451	; 0x802451 <output_two+0x30>
    52c8:	90 91 52 24 	lds	r25, 0x2452	; 0x802452 <output_two+0x31>
    52cc:	89 37       	cpi	r24, 0x79	; 121
    52ce:	91 05       	cpc	r25, r1
    52d0:	28 f0       	brcs	.+10     	; 0x52dc <check_voltage_drift+0x1a6>
		{
			output_two.voltage_drift_error = TRUE;
    52d2:	81 e0       	ldi	r24, 0x01	; 1
    52d4:	80 93 29 24 	sts	0x2429, r24	; 0x802429 <output_two+0x8>
			program_state.uncleared_error = TRUE;
    52d8:	80 93 ea 23 	sts	0x23EA, r24	; 0x8023ea <program_state+0x6>
		}
		
}
    52dc:	df 91       	pop	r29
    52de:	cf 91       	pop	r28
    52e0:	ff 90       	pop	r15
    52e2:	ef 90       	pop	r14
    52e4:	df 90       	pop	r13
    52e6:	cf 90       	pop	r12
    52e8:	bf 90       	pop	r11
    52ea:	af 90       	pop	r10
    52ec:	9f 90       	pop	r9
    52ee:	8f 90       	pop	r8
    52f0:	08 95       	ret

000052f2 <check_save_voltage>:

/*
This function sets the saving_voltage state for a couple seconds, and then saves the voltage afterwards
*/
void check_save_voltage(OutputState* output)
{
    52f2:	af 92       	push	r10
    52f4:	bf 92       	push	r11
    52f6:	cf 92       	push	r12
    52f8:	df 92       	push	r13
    52fa:	ef 92       	push	r14
    52fc:	ff 92       	push	r15
    52fe:	0f 93       	push	r16
    5300:	1f 93       	push	r17
    5302:	fc 01       	movw	r30, r24
	if(counters.real_time_counter - counters.idle_time_counter >= 5000 && output->need_to_set_current_voltage_pair)
    5304:	20 91 f8 24 	lds	r18, 0x24F8	; 0x8024f8 <counters+0x14>
    5308:	30 91 f9 24 	lds	r19, 0x24F9	; 0x8024f9 <counters+0x15>
    530c:	40 91 fa 24 	lds	r20, 0x24FA	; 0x8024fa <counters+0x16>
    5310:	50 91 fb 24 	lds	r21, 0x24FB	; 0x8024fb <counters+0x17>
    5314:	60 91 fc 24 	lds	r22, 0x24FC	; 0x8024fc <counters+0x18>
    5318:	70 91 fd 24 	lds	r23, 0x24FD	; 0x8024fd <counters+0x19>
    531c:	80 91 fe 24 	lds	r24, 0x24FE	; 0x8024fe <counters+0x1a>
    5320:	90 91 ff 24 	lds	r25, 0x24FF	; 0x8024ff <counters+0x1b>
    5324:	a0 90 f0 24 	lds	r10, 0x24F0	; 0x8024f0 <counters+0xc>
    5328:	b0 90 f1 24 	lds	r11, 0x24F1	; 0x8024f1 <counters+0xd>
    532c:	c0 90 f2 24 	lds	r12, 0x24F2	; 0x8024f2 <counters+0xe>
    5330:	d0 90 f3 24 	lds	r13, 0x24F3	; 0x8024f3 <counters+0xf>
    5334:	e0 90 f4 24 	lds	r14, 0x24F4	; 0x8024f4 <counters+0x10>
    5338:	f0 90 f5 24 	lds	r15, 0x24F5	; 0x8024f5 <counters+0x11>
    533c:	00 91 f6 24 	lds	r16, 0x24F6	; 0x8024f6 <counters+0x12>
    5340:	10 91 f7 24 	lds	r17, 0x24F7	; 0x8024f7 <counters+0x13>
    5344:	0e 94 ae 38 	call	0x715c	; 0x715c <__subdi3>
    5348:	27 38       	cpi	r18, 0x87	; 135
    534a:	33 41       	sbci	r19, 0x13	; 19
    534c:	41 05       	cpc	r20, r1
    534e:	51 05       	cpc	r21, r1
    5350:	61 05       	cpc	r22, r1
    5352:	71 05       	cpc	r23, r1
    5354:	81 05       	cpc	r24, r1
    5356:	91 05       	cpc	r25, r1
    5358:	41 f1       	breq	.+80     	; 0x53aa <check_save_voltage+0xb8>
    535a:	38 f1       	brcs	.+78     	; 0x53aa <check_save_voltage+0xb8>
    535c:	85 85       	ldd	r24, Z+13	; 0x0d
    535e:	88 23       	and	r24, r24
    5360:	21 f1       	breq	.+72     	; 0x53aa <check_save_voltage+0xb8>
	{
		output_one.current_voltage_pair[0] = output_one.current;
    5362:	80 91 b9 24 	lds	r24, 0x24B9	; 0x8024b9 <output_one+0x16>
    5366:	90 91 ba 24 	lds	r25, 0x24BA	; 0x8024ba <output_one+0x17>
    536a:	80 93 d9 24 	sts	0x24D9, r24	; 0x8024d9 <output_one+0x36>
    536e:	90 93 da 24 	sts	0x24DA, r25	; 0x8024da <output_one+0x37>
		output_one.current_voltage_pair[1] = output_one.voltage;
    5372:	80 91 bb 24 	lds	r24, 0x24BB	; 0x8024bb <output_one+0x18>
    5376:	90 91 bc 24 	lds	r25, 0x24BC	; 0x8024bc <output_one+0x19>
    537a:	80 93 db 24 	sts	0x24DB, r24	; 0x8024db <output_one+0x38>
    537e:	90 93 dc 24 	sts	0x24DC, r25	; 0x8024dc <output_one+0x39>
		output_two.current_voltage_pair[0] = output_two.current;
    5382:	80 91 37 24 	lds	r24, 0x2437	; 0x802437 <output_two+0x16>
    5386:	90 91 38 24 	lds	r25, 0x2438	; 0x802438 <output_two+0x17>
    538a:	80 93 57 24 	sts	0x2457, r24	; 0x802457 <output_two+0x36>
    538e:	90 93 58 24 	sts	0x2458, r25	; 0x802458 <output_two+0x37>
		output_two.current_voltage_pair[1] = output_two.voltage;
    5392:	80 91 39 24 	lds	r24, 0x2439	; 0x802439 <output_two+0x18>
    5396:	90 91 3a 24 	lds	r25, 0x243A	; 0x80243a <output_two+0x19>
    539a:	80 93 59 24 	sts	0x2459, r24	; 0x802459 <output_two+0x38>
    539e:	90 93 5a 24 	sts	0x245A, r25	; 0x80245a <output_two+0x39>
		output_one.need_to_set_current_voltage_pair = FALSE;
    53a2:	10 92 b0 24 	sts	0x24B0, r1	; 0x8024b0 <output_one+0xd>
		output_two.need_to_set_current_voltage_pair = FALSE;
    53a6:	10 92 2e 24 	sts	0x242E, r1	; 0x80242e <output_two+0xd>
	}
}
    53aa:	1f 91       	pop	r17
    53ac:	0f 91       	pop	r16
    53ae:	ff 90       	pop	r15
    53b0:	ef 90       	pop	r14
    53b2:	df 90       	pop	r13
    53b4:	cf 90       	pop	r12
    53b6:	bf 90       	pop	r11
    53b8:	af 90       	pop	r10
    53ba:	08 95       	ret

000053bc <read_pson>:

void read_pson()
{
	bool temp = program_state.pson_low;
    53bc:	20 91 e9 23 	lds	r18, 0x23E9	; 0x8023e9 <program_state+0x5>
	program_state.pson_low = !(PORTA_IN & (1 << PSON));
    53c0:	90 91 08 06 	lds	r25, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
    53c4:	89 2f       	mov	r24, r25
    53c6:	80 95       	com	r24
    53c8:	88 1f       	adc	r24, r24
    53ca:	88 27       	eor	r24, r24
    53cc:	88 1f       	adc	r24, r24
    53ce:	80 93 e9 23 	sts	0x23E9, r24	; 0x8023e9 <program_state+0x5>
	if (temp != program_state.pson_low)
    53d2:	28 17       	cp	r18, r24
    53d4:	31 f0       	breq	.+12     	; 0x53e2 <read_pson+0x26>
	{
		counters.clear_errors_pson_counter = 1000;
    53d6:	28 ee       	ldi	r18, 0xE8	; 232
    53d8:	33 e0       	ldi	r19, 0x03	; 3
    53da:	20 93 0a 25 	sts	0x250A, r18	; 0x80250a <counters+0x26>
    53de:	30 93 0b 25 	sts	0x250B, r19	; 0x80250b <counters+0x27>
	}
	if (program_state.pson_low)
    53e2:	97 fd       	sbrc	r25, 7
    53e4:	05 c0       	rjmp	.+10     	; 0x53f0 <read_pson+0x34>
	{
		output_one.set_current_state = VISIBLE_LOCKED;
    53e6:	82 e0       	ldi	r24, 0x02	; 2
    53e8:	80 93 b2 24 	sts	0x24B2, r24	; 0x8024b2 <output_one+0xf>
		output_two.set_current_state = VISIBLE_LOCKED;
    53ec:	80 93 30 24 	sts	0x2430, r24	; 0x802430 <output_two+0xf>
    53f0:	08 95       	ret

000053f2 <calibrate_unit>:
	}
}

void calibrate_unit(OutputState* output) {
    53f2:	2f 92       	push	r2
    53f4:	3f 92       	push	r3
    53f6:	4f 92       	push	r4
    53f8:	5f 92       	push	r5
    53fa:	6f 92       	push	r6
    53fc:	7f 92       	push	r7
    53fe:	8f 92       	push	r8
    5400:	9f 92       	push	r9
    5402:	af 92       	push	r10
    5404:	bf 92       	push	r11
    5406:	cf 92       	push	r12
    5408:	df 92       	push	r13
    540a:	ef 92       	push	r14
    540c:	ff 92       	push	r15
    540e:	0f 93       	push	r16
    5410:	1f 93       	push	r17
    5412:	cf 93       	push	r28
    5414:	df 93       	push	r29
    5416:	ec 01       	movw	r28, r24
	output->pwm_value = 0;
    5418:	1a 8e       	std	Y+26, r1	; 0x1a
    541a:	1b 8e       	std	Y+27, r1	; 0x1b
	output->dac_value = 0;
    541c:	1c 8e       	std	Y+28, r1	; 0x1c
    541e:	1d 8e       	std	Y+29, r1	; 0x1d
	
	int dac_start_value = 0;
	uint16_t pwm_eeprom_start_address;
	
	if (program_state.program == THIRTY_EIGHT)
    5420:	80 91 e8 23 	lds	r24, 0x23E8	; 0x8023e8 <program_state+0x4>
    5424:	88 23       	and	r24, r24
    5426:	a9 f0       	breq	.+42     	; 0x5452 <calibrate_unit+0x60>
	{
		pwm_eeprom_start_address = 0;
		dac_start_value = 120;
	}
	else if (program_state.program == FOURTY_ONE_DUAL)
    5428:	82 30       	cpi	r24, 0x02	; 2
    542a:	51 f4       	brne	.+20     	; 0x5440 <calibrate_unit+0x4e>
	{
		if (output->id == output_one.id)
    542c:	98 81       	ld	r25, Y
    542e:	80 91 a3 24 	lds	r24, 0x24A3	; 0x8024a3 <output_one>
    5432:	98 17       	cp	r25, r24
    5434:	99 f0       	breq	.+38     	; 0x545c <calibrate_unit+0x6a>
		{
			pwm_eeprom_start_address = 420;
		}
		else
		{
			pwm_eeprom_start_address = 940;
    5436:	7c ea       	ldi	r23, 0xAC	; 172
    5438:	e7 2e       	mov	r14, r23
    543a:	73 e0       	ldi	r23, 0x03	; 3
    543c:	f7 2e       	mov	r15, r23
    543e:	06 c0       	rjmp	.+12     	; 0x544c <calibrate_unit+0x5a>
		}
		
		dac_start_value = 100;
	}
	else if (program_state.program == FOURTY_ONE)
    5440:	81 30       	cpi	r24, 0x01	; 1
    5442:	89 f4       	brne	.+34     	; 0x5466 <calibrate_unit+0x74>
	{
		pwm_eeprom_start_address = 1460;
    5444:	64 eb       	ldi	r22, 0xB4	; 180
    5446:	e6 2e       	mov	r14, r22
    5448:	65 e0       	ldi	r22, 0x05	; 5
    544a:	f6 2e       	mov	r15, r22
		dac_start_value = 100;
    544c:	04 e6       	ldi	r16, 0x64	; 100
    544e:	10 e0       	ldi	r17, 0x00	; 0
    5450:	0c c0       	rjmp	.+24     	; 0x546a <calibrate_unit+0x78>
	int dac_start_value = 0;
	uint16_t pwm_eeprom_start_address;
	
	if (program_state.program == THIRTY_EIGHT)
	{
		pwm_eeprom_start_address = 0;
    5452:	e1 2c       	mov	r14, r1
    5454:	f1 2c       	mov	r15, r1
		dac_start_value = 120;
    5456:	08 e7       	ldi	r16, 0x78	; 120
    5458:	10 e0       	ldi	r17, 0x00	; 0
    545a:	07 c0       	rjmp	.+14     	; 0x546a <calibrate_unit+0x78>
	}
	else if (program_state.program == FOURTY_ONE_DUAL)
	{
		if (output->id == output_one.id)
		{
			pwm_eeprom_start_address = 420;
    545c:	54 ea       	ldi	r21, 0xA4	; 164
    545e:	e5 2e       	mov	r14, r21
    5460:	ff 24       	eor	r15, r15
    5462:	f3 94       	inc	r15
    5464:	f3 cf       	rjmp	.-26     	; 0x544c <calibrate_unit+0x5a>

void calibrate_unit(OutputState* output) {
	output->pwm_value = 0;
	output->dac_value = 0;
	
	int dac_start_value = 0;
    5466:	00 e0       	ldi	r16, 0x00	; 0
    5468:	10 e0       	ldi	r17, 0x00	; 0
	{
		pwm_eeprom_start_address = 1460;
		dac_start_value = 100;
	}
	
	for (int i = dac_start_value; i <= output->max_current; i += 10)
    546a:	68 01       	movw	r12, r16
    546c:	8a 89       	ldd	r24, Y+18	; 0x12
    546e:	9b 89       	ldd	r25, Y+19	; 0x13
    5470:	8c 15       	cp	r24, r12
    5472:	9d 05       	cpc	r25, r13
    5474:	08 f4       	brcc	.+2      	; 0x5478 <calibrate_unit+0x86>
    5476:	ba c0       	rjmp	.+372    	; 0x55ec <calibrate_unit+0x1fa>
	{
		output->target_current = i;
    5478:	c8 8a       	std	Y+16, r12	; 0x10
    547a:	d9 8a       	std	Y+17, r13	; 0x11
		
		//**************************************************
		wdt_reset(); // WATCH DOG TIMER RESET
    547c:	a8 95       	wdr
		//**************************************************
		
		int tries = 0;
		
		while(abs(MIN(output->target_current * output->reduced_current_fraction, output->max_current) - output->current) > MIN_ACCURACY)
    547e:	45 e6       	ldi	r20, 0x65	; 101
    5480:	a4 2e       	mov	r10, r20
    5482:	b1 2c       	mov	r11, r1
    5484:	68 89       	ldd	r22, Y+16	; 0x10
    5486:	79 89       	ldd	r23, Y+17	; 0x11
    5488:	80 e0       	ldi	r24, 0x00	; 0
    548a:	90 e0       	ldi	r25, 0x00	; 0
    548c:	0e 94 e4 35 	call	0x6bc8	; 0x6bc8 <__floatunsisf>
    5490:	2b a1       	ldd	r18, Y+35	; 0x23
    5492:	3c a1       	ldd	r19, Y+36	; 0x24
    5494:	4d a1       	ldd	r20, Y+37	; 0x25
    5496:	5e a1       	ldd	r21, Y+38	; 0x26
    5498:	0e 94 f3 36 	call	0x6de6	; 0x6de6 <__mulsf3>
    549c:	3b 01       	movw	r6, r22
    549e:	4c 01       	movw	r8, r24
    54a0:	6a 89       	ldd	r22, Y+18	; 0x12
    54a2:	7b 89       	ldd	r23, Y+19	; 0x13
    54a4:	80 e0       	ldi	r24, 0x00	; 0
    54a6:	90 e0       	ldi	r25, 0x00	; 0
    54a8:	0e 94 e4 35 	call	0x6bc8	; 0x6bc8 <__floatunsisf>
    54ac:	1b 01       	movw	r2, r22
    54ae:	2c 01       	movw	r4, r24
    54b0:	9b 01       	movw	r18, r22
    54b2:	ac 01       	movw	r20, r24
    54b4:	b3 01       	movw	r22, r6
    54b6:	c4 01       	movw	r24, r8
    54b8:	0e 94 37 35 	call	0x6a6e	; 0x6a6e <__cmpsf2>
    54bc:	87 fd       	sbrc	r24, 7
    54be:	02 c0       	rjmp	.+4      	; 0x54c4 <calibrate_unit+0xd2>
    54c0:	31 01       	movw	r6, r2
    54c2:	42 01       	movw	r8, r4
    54c4:	6e 89       	ldd	r22, Y+22	; 0x16
    54c6:	7f 89       	ldd	r23, Y+23	; 0x17
    54c8:	80 e0       	ldi	r24, 0x00	; 0
    54ca:	90 e0       	ldi	r25, 0x00	; 0
    54cc:	0e 94 e4 35 	call	0x6bc8	; 0x6bc8 <__floatunsisf>
    54d0:	9b 01       	movw	r18, r22
    54d2:	ac 01       	movw	r20, r24
    54d4:	b3 01       	movw	r22, r6
    54d6:	c4 01       	movw	r24, r8
    54d8:	0e 94 ca 34 	call	0x6994	; 0x6994 <__subsf3>
    54dc:	0e 94 ae 35 	call	0x6b5c	; 0x6b5c <__fixsfsi>
    54e0:	9b 01       	movw	r18, r22
    54e2:	77 ff       	sbrs	r23, 7
    54e4:	04 c0       	rjmp	.+8      	; 0x54ee <calibrate_unit+0xfc>
    54e6:	22 27       	eor	r18, r18
    54e8:	33 27       	eor	r19, r19
    54ea:	26 1b       	sub	r18, r22
    54ec:	37 0b       	sbc	r19, r23
    54ee:	22 30       	cpi	r18, 0x02	; 2
    54f0:	31 05       	cpc	r19, r1
    54f2:	5c f0       	brlt	.+22     	; 0x550a <calibrate_unit+0x118>
		{
			//**************************************************
			wdt_reset(); // WATCH DOG TIMER RESET
    54f4:	a8 95       	wdr
			//**************************************************
		
			set_current_calibrate(output, FALSE);
    54f6:	60 e0       	ldi	r22, 0x00	; 0
    54f8:	ce 01       	movw	r24, r28
    54fa:	0e 94 66 2f 	call	0x5ecc	; 0x5ecc <set_current_calibrate>
			//**************************************************
			wdt_reset(); // WATCH DOG TIMER RESET
    54fe:	a8 95       	wdr
    5500:	21 e0       	ldi	r18, 0x01	; 1
    5502:	a2 1a       	sub	r10, r18
    5504:	b1 08       	sbc	r11, r1
			//**************************************************
			
			tries++;
			
			if (tries > 100)
    5506:	09 f0       	breq	.+2      	; 0x550a <calibrate_unit+0x118>
    5508:	bd cf       	rjmp	.-134    	; 0x5484 <calibrate_unit+0x92>
    550a:	8f e7       	ldi	r24, 0x7F	; 127
    550c:	9a e1       	ldi	r25, 0x1A	; 26
    550e:	26 e0       	ldi	r18, 0x06	; 6
    5510:	81 50       	subi	r24, 0x01	; 1
    5512:	90 40       	sbci	r25, 0x00	; 0
    5514:	20 40       	sbci	r18, 0x00	; 0
    5516:	e1 f7       	brne	.-8      	; 0x5510 <calibrate_unit+0x11e>
    5518:	00 c0       	rjmp	.+0      	; 0x551a <calibrate_unit+0x128>
    551a:	00 00       	nop
		
			
		_delay_ms(100);
		
		//**************************************************
		wdt_reset(); // WATCH DOG TIMER RESET
    551c:	a8 95       	wdr
		//**************************************************
		
		read_current_and_voltage(output);
    551e:	ce 01       	movw	r24, r28
    5520:	0e 94 3b 1c 	call	0x3876	; 0x3876 <read_current_and_voltage>
		
		//**************************************************
		wdt_reset(); // WATCH DOG TIMER RESET
    5524:	a8 95       	wdr
    5526:	8f e7       	ldi	r24, 0x7F	; 127
    5528:	9a e1       	ldi	r25, 0x1A	; 26
    552a:	26 e0       	ldi	r18, 0x06	; 6
    552c:	81 50       	subi	r24, 0x01	; 1
    552e:	90 40       	sbci	r25, 0x00	; 0
    5530:	20 40       	sbci	r18, 0x00	; 0
    5532:	e1 f7       	brne	.-8      	; 0x552c <calibrate_unit+0x13a>
    5534:	00 c0       	rjmp	.+0      	; 0x5536 <calibrate_unit+0x144>
    5536:	00 00       	nop
		
		_delay_ms(100);
		
		tries = 0;
		
		while(abs(MIN(output->target_current * output->reduced_current_fraction, output->max_current) - output->current) > MIN_ACCURACY)
    5538:	35 e6       	ldi	r19, 0x65	; 101
    553a:	a3 2e       	mov	r10, r19
    553c:	b1 2c       	mov	r11, r1
    553e:	68 89       	ldd	r22, Y+16	; 0x10
    5540:	79 89       	ldd	r23, Y+17	; 0x11
    5542:	80 e0       	ldi	r24, 0x00	; 0
    5544:	90 e0       	ldi	r25, 0x00	; 0
    5546:	0e 94 e4 35 	call	0x6bc8	; 0x6bc8 <__floatunsisf>
    554a:	2b a1       	ldd	r18, Y+35	; 0x23
    554c:	3c a1       	ldd	r19, Y+36	; 0x24
    554e:	4d a1       	ldd	r20, Y+37	; 0x25
    5550:	5e a1       	ldd	r21, Y+38	; 0x26
    5552:	0e 94 f3 36 	call	0x6de6	; 0x6de6 <__mulsf3>
    5556:	3b 01       	movw	r6, r22
    5558:	4c 01       	movw	r8, r24
    555a:	6a 89       	ldd	r22, Y+18	; 0x12
    555c:	7b 89       	ldd	r23, Y+19	; 0x13
    555e:	80 e0       	ldi	r24, 0x00	; 0
    5560:	90 e0       	ldi	r25, 0x00	; 0
    5562:	0e 94 e4 35 	call	0x6bc8	; 0x6bc8 <__floatunsisf>
    5566:	1b 01       	movw	r2, r22
    5568:	2c 01       	movw	r4, r24
    556a:	9b 01       	movw	r18, r22
    556c:	ac 01       	movw	r20, r24
    556e:	b3 01       	movw	r22, r6
    5570:	c4 01       	movw	r24, r8
    5572:	0e 94 37 35 	call	0x6a6e	; 0x6a6e <__cmpsf2>
    5576:	87 fd       	sbrc	r24, 7
    5578:	02 c0       	rjmp	.+4      	; 0x557e <calibrate_unit+0x18c>
    557a:	31 01       	movw	r6, r2
    557c:	42 01       	movw	r8, r4
    557e:	6e 89       	ldd	r22, Y+22	; 0x16
    5580:	7f 89       	ldd	r23, Y+23	; 0x17
    5582:	80 e0       	ldi	r24, 0x00	; 0
    5584:	90 e0       	ldi	r25, 0x00	; 0
    5586:	0e 94 e4 35 	call	0x6bc8	; 0x6bc8 <__floatunsisf>
    558a:	9b 01       	movw	r18, r22
    558c:	ac 01       	movw	r20, r24
    558e:	b3 01       	movw	r22, r6
    5590:	c4 01       	movw	r24, r8
    5592:	0e 94 ca 34 	call	0x6994	; 0x6994 <__subsf3>
    5596:	0e 94 ae 35 	call	0x6b5c	; 0x6b5c <__fixsfsi>
    559a:	9b 01       	movw	r18, r22
    559c:	77 ff       	sbrs	r23, 7
    559e:	04 c0       	rjmp	.+8      	; 0x55a8 <calibrate_unit+0x1b6>
    55a0:	22 27       	eor	r18, r18
    55a2:	33 27       	eor	r19, r19
    55a4:	26 1b       	sub	r18, r22
    55a6:	37 0b       	sbc	r19, r23
    55a8:	22 30       	cpi	r18, 0x02	; 2
    55aa:	31 05       	cpc	r19, r1
    55ac:	5c f0       	brlt	.+22     	; 0x55c4 <calibrate_unit+0x1d2>
		{
			//**************************************************
			wdt_reset(); // WATCH DOG TIMER RESET
    55ae:	a8 95       	wdr
			//**************************************************
		
			set_current_calibrate(output, FALSE);
    55b0:	60 e0       	ldi	r22, 0x00	; 0
    55b2:	ce 01       	movw	r24, r28
    55b4:	0e 94 66 2f 	call	0x5ecc	; 0x5ecc <set_current_calibrate>
			//**************************************************
			wdt_reset(); // WATCH DOG TIMER RESET
    55b8:	a8 95       	wdr
    55ba:	81 e0       	ldi	r24, 0x01	; 1
    55bc:	a8 1a       	sub	r10, r24
    55be:	b1 08       	sbc	r11, r1
			//**************************************************
			
			tries++;
			
			if (tries > 100)
    55c0:	09 f0       	breq	.+2      	; 0x55c4 <calibrate_unit+0x1d2>
    55c2:	bd cf       	rjmp	.-134    	; 0x553e <calibrate_unit+0x14c>
			}
		}
		
		uint16_t pwm_eeprom_address = pwm_eeprom_start_address + i / 5;
		
		write_external_eeprom(&twiMasterForEEPROM, EXTERNAL_EEPROM_ADDR, pwm_eeprom_address, output->pwm_value);
    55c4:	2a 8d       	ldd	r18, Y+26	; 0x1a
    55c6:	3b 8d       	ldd	r19, Y+27	; 0x1b
    55c8:	c6 01       	movw	r24, r12
    55ca:	65 e0       	ldi	r22, 0x05	; 5
    55cc:	70 e0       	ldi	r23, 0x00	; 0
    55ce:	0e 94 e8 37 	call	0x6fd0	; 0x6fd0 <__divmodhi4>
    55d2:	ab 01       	movw	r20, r22
    55d4:	4e 0d       	add	r20, r14
    55d6:	5f 1d       	adc	r21, r15
    55d8:	61 e5       	ldi	r22, 0x51	; 81
    55da:	84 e5       	ldi	r24, 0x54	; 84
    55dc:	95 e2       	ldi	r25, 0x25	; 37
    55de:	0e 94 20 32 	call	0x6440	; 0x6440 <write_external_eeprom>
		
		//**************************************************
		wdt_reset(); // WATCH DOG TIMER RESET
    55e2:	a8 95       	wdr
	{
		pwm_eeprom_start_address = 1460;
		dac_start_value = 100;
	}
	
	for (int i = dac_start_value; i <= output->max_current; i += 10)
    55e4:	9a e0       	ldi	r25, 0x0A	; 10
    55e6:	c9 0e       	add	r12, r25
    55e8:	d1 1c       	adc	r13, r1
    55ea:	40 cf       	rjmp	.-384    	; 0x546c <calibrate_unit+0x7a>
		
		//**************************************************
		wdt_reset(); // WATCH DOG TIMER RESET
		//**************************************************
	}
	for (int i = dac_start_value - 10; i >= 0; i -= 10)
    55ec:	0a 50       	subi	r16, 0x0A	; 10
    55ee:	11 09       	sbc	r17, r1
		
		//**************************************************
		wdt_reset(); // WATCH DOG TIMER RESET
		//**************************************************
		
		write_external_eeprom(&twiMasterForEEPROM, EXTERNAL_EEPROM_ADDR, pwm_eeprom_address, output->dac_value);
    55f0:	25 e0       	ldi	r18, 0x05	; 5
    55f2:	a2 2e       	mov	r10, r18
    55f4:	b1 2c       	mov	r11, r1
		
		//**************************************************
		wdt_reset(); // WATCH DOG TIMER RESET
		//**************************************************
	}
	for (int i = dac_start_value - 10; i >= 0; i -= 10)
    55f6:	17 fd       	sbrc	r17, 7
    55f8:	d1 c0       	rjmp	.+418    	; 0x579c <calibrate_unit+0x3aa>
	{
		output->target_current = i;
    55fa:	08 8b       	std	Y+16, r16	; 0x10
    55fc:	19 8b       	std	Y+17, r17	; 0x11
		
		//**************************************************
		wdt_reset(); // WATCH DOG TIMER RESET
    55fe:	a8 95       	wdr
		//**************************************************
		
		int tries = 0;
		
		while(abs(MIN(output->target_current * output->reduced_current_fraction, output->max_current) - output->current) > MIN_ACCURACY)
    5600:	95 e6       	ldi	r25, 0x65	; 101
    5602:	c9 2e       	mov	r12, r25
    5604:	d1 2c       	mov	r13, r1
    5606:	68 89       	ldd	r22, Y+16	; 0x10
    5608:	79 89       	ldd	r23, Y+17	; 0x11
    560a:	80 e0       	ldi	r24, 0x00	; 0
    560c:	90 e0       	ldi	r25, 0x00	; 0
    560e:	0e 94 e4 35 	call	0x6bc8	; 0x6bc8 <__floatunsisf>
    5612:	2b a1       	ldd	r18, Y+35	; 0x23
    5614:	3c a1       	ldd	r19, Y+36	; 0x24
    5616:	4d a1       	ldd	r20, Y+37	; 0x25
    5618:	5e a1       	ldd	r21, Y+38	; 0x26
    561a:	0e 94 f3 36 	call	0x6de6	; 0x6de6 <__mulsf3>
    561e:	3b 01       	movw	r6, r22
    5620:	4c 01       	movw	r8, r24
    5622:	6a 89       	ldd	r22, Y+18	; 0x12
    5624:	7b 89       	ldd	r23, Y+19	; 0x13
    5626:	80 e0       	ldi	r24, 0x00	; 0
    5628:	90 e0       	ldi	r25, 0x00	; 0
    562a:	0e 94 e4 35 	call	0x6bc8	; 0x6bc8 <__floatunsisf>
    562e:	1b 01       	movw	r2, r22
    5630:	2c 01       	movw	r4, r24
    5632:	9b 01       	movw	r18, r22
    5634:	ac 01       	movw	r20, r24
    5636:	b3 01       	movw	r22, r6
    5638:	c4 01       	movw	r24, r8
    563a:	0e 94 37 35 	call	0x6a6e	; 0x6a6e <__cmpsf2>
    563e:	87 fd       	sbrc	r24, 7
    5640:	02 c0       	rjmp	.+4      	; 0x5646 <calibrate_unit+0x254>
    5642:	31 01       	movw	r6, r2
    5644:	42 01       	movw	r8, r4
    5646:	6e 89       	ldd	r22, Y+22	; 0x16
    5648:	7f 89       	ldd	r23, Y+23	; 0x17
    564a:	80 e0       	ldi	r24, 0x00	; 0
    564c:	90 e0       	ldi	r25, 0x00	; 0
    564e:	0e 94 e4 35 	call	0x6bc8	; 0x6bc8 <__floatunsisf>
    5652:	9b 01       	movw	r18, r22
    5654:	ac 01       	movw	r20, r24
    5656:	b3 01       	movw	r22, r6
    5658:	c4 01       	movw	r24, r8
    565a:	0e 94 ca 34 	call	0x6994	; 0x6994 <__subsf3>
    565e:	0e 94 ae 35 	call	0x6b5c	; 0x6b5c <__fixsfsi>
    5662:	9b 01       	movw	r18, r22
    5664:	77 ff       	sbrs	r23, 7
    5666:	04 c0       	rjmp	.+8      	; 0x5670 <calibrate_unit+0x27e>
    5668:	22 27       	eor	r18, r18
    566a:	33 27       	eor	r19, r19
    566c:	26 1b       	sub	r18, r22
    566e:	37 0b       	sbc	r19, r23
    5670:	22 30       	cpi	r18, 0x02	; 2
    5672:	31 05       	cpc	r19, r1
    5674:	bc f0       	brlt	.+46     	; 0x56a4 <calibrate_unit+0x2b2>
		{
			//**************************************************
			wdt_reset(); // WATCH DOG TIMER RESET
    5676:	a8 95       	wdr
			//**************************************************
		
			set_current_calibrate(output, FALSE);
    5678:	60 e0       	ldi	r22, 0x00	; 0
    567a:	ce 01       	movw	r24, r28
    567c:	0e 94 66 2f 	call	0x5ecc	; 0x5ecc <set_current_calibrate>
			//**************************************************
			wdt_reset(); // WATCH DOG TIMER RESET
    5680:	a8 95       	wdr
			//**************************************************
			output->write_to_dummy_dac(output->dac_value, output->dummy_dac_address);
    5682:	ec a9       	ldd	r30, Y+52	; 0x34
    5684:	fd a9       	ldd	r31, Y+53	; 0x35
    5686:	6e ad       	ldd	r22, Y+62	; 0x3e
    5688:	8c 8d       	ldd	r24, Y+28	; 0x1c
    568a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    568c:	09 95       	icall
    568e:	87 ea       	ldi	r24, 0xA7	; 167
    5690:	91 e6       	ldi	r25, 0x61	; 97
    5692:	01 97       	sbiw	r24, 0x01	; 1
    5694:	f1 f7       	brne	.-4      	; 0x5692 <calibrate_unit+0x2a0>
    5696:	00 c0       	rjmp	.+0      	; 0x5698 <calibrate_unit+0x2a6>
    5698:	00 00       	nop
    569a:	91 e0       	ldi	r25, 0x01	; 1
    569c:	c9 1a       	sub	r12, r25
    569e:	d1 08       	sbc	r13, r1
			_delay_ms(5);
			
			tries++;
			
			if (tries > 100)
    56a0:	09 f0       	breq	.+2      	; 0x56a4 <calibrate_unit+0x2b2>
    56a2:	b1 cf       	rjmp	.-158    	; 0x5606 <calibrate_unit+0x214>
    56a4:	2f e7       	ldi	r18, 0x7F	; 127
    56a6:	8a e1       	ldi	r24, 0x1A	; 26
    56a8:	96 e0       	ldi	r25, 0x06	; 6
    56aa:	21 50       	subi	r18, 0x01	; 1
    56ac:	80 40       	sbci	r24, 0x00	; 0
    56ae:	90 40       	sbci	r25, 0x00	; 0
    56b0:	e1 f7       	brne	.-8      	; 0x56aa <calibrate_unit+0x2b8>
    56b2:	00 c0       	rjmp	.+0      	; 0x56b4 <calibrate_unit+0x2c2>
    56b4:	00 00       	nop
		}
			
		_delay_ms(100);
		
		//**************************************************
		wdt_reset(); // WATCH DOG TIMER RESET
    56b6:	a8 95       	wdr
		//**************************************************
		
		read_current_and_voltage(output);
    56b8:	ce 01       	movw	r24, r28
    56ba:	0e 94 3b 1c 	call	0x3876	; 0x3876 <read_current_and_voltage>
		
		//**************************************************
		wdt_reset(); // WATCH DOG TIMER RESET
    56be:	a8 95       	wdr
    56c0:	2f e7       	ldi	r18, 0x7F	; 127
    56c2:	8a e1       	ldi	r24, 0x1A	; 26
    56c4:	96 e0       	ldi	r25, 0x06	; 6
    56c6:	21 50       	subi	r18, 0x01	; 1
    56c8:	80 40       	sbci	r24, 0x00	; 0
    56ca:	90 40       	sbci	r25, 0x00	; 0
    56cc:	e1 f7       	brne	.-8      	; 0x56c6 <calibrate_unit+0x2d4>
    56ce:	00 c0       	rjmp	.+0      	; 0x56d0 <calibrate_unit+0x2de>
    56d0:	00 00       	nop
    56d2:	85 e6       	ldi	r24, 0x65	; 101
    56d4:	c8 2e       	mov	r12, r24
    56d6:	d1 2c       	mov	r13, r1
		
		tries = 0;
		
		_delay_ms(100);
		
		while(abs(MIN(output->target_current * output->reduced_current_fraction, output->max_current) - output->current) > MIN_ACCURACY)
    56d8:	68 89       	ldd	r22, Y+16	; 0x10
    56da:	79 89       	ldd	r23, Y+17	; 0x11
    56dc:	80 e0       	ldi	r24, 0x00	; 0
    56de:	90 e0       	ldi	r25, 0x00	; 0
    56e0:	0e 94 e4 35 	call	0x6bc8	; 0x6bc8 <__floatunsisf>
    56e4:	2b a1       	ldd	r18, Y+35	; 0x23
    56e6:	3c a1       	ldd	r19, Y+36	; 0x24
    56e8:	4d a1       	ldd	r20, Y+37	; 0x25
    56ea:	5e a1       	ldd	r21, Y+38	; 0x26
    56ec:	0e 94 f3 36 	call	0x6de6	; 0x6de6 <__mulsf3>
    56f0:	3b 01       	movw	r6, r22
    56f2:	4c 01       	movw	r8, r24
    56f4:	6a 89       	ldd	r22, Y+18	; 0x12
    56f6:	7b 89       	ldd	r23, Y+19	; 0x13
    56f8:	80 e0       	ldi	r24, 0x00	; 0
    56fa:	90 e0       	ldi	r25, 0x00	; 0
    56fc:	0e 94 e4 35 	call	0x6bc8	; 0x6bc8 <__floatunsisf>
    5700:	1b 01       	movw	r2, r22
    5702:	2c 01       	movw	r4, r24
    5704:	9b 01       	movw	r18, r22
    5706:	ac 01       	movw	r20, r24
    5708:	b3 01       	movw	r22, r6
    570a:	c4 01       	movw	r24, r8
    570c:	0e 94 37 35 	call	0x6a6e	; 0x6a6e <__cmpsf2>
    5710:	87 fd       	sbrc	r24, 7
    5712:	02 c0       	rjmp	.+4      	; 0x5718 <calibrate_unit+0x326>
    5714:	31 01       	movw	r6, r2
    5716:	42 01       	movw	r8, r4
    5718:	6e 89       	ldd	r22, Y+22	; 0x16
    571a:	7f 89       	ldd	r23, Y+23	; 0x17
    571c:	80 e0       	ldi	r24, 0x00	; 0
    571e:	90 e0       	ldi	r25, 0x00	; 0
    5720:	0e 94 e4 35 	call	0x6bc8	; 0x6bc8 <__floatunsisf>
    5724:	9b 01       	movw	r18, r22
    5726:	ac 01       	movw	r20, r24
    5728:	b3 01       	movw	r22, r6
    572a:	c4 01       	movw	r24, r8
    572c:	0e 94 ca 34 	call	0x6994	; 0x6994 <__subsf3>
    5730:	0e 94 ae 35 	call	0x6b5c	; 0x6b5c <__fixsfsi>
    5734:	9b 01       	movw	r18, r22
    5736:	77 ff       	sbrs	r23, 7
    5738:	04 c0       	rjmp	.+8      	; 0x5742 <calibrate_unit+0x350>
    573a:	22 27       	eor	r18, r18
    573c:	33 27       	eor	r19, r19
    573e:	26 1b       	sub	r18, r22
    5740:	37 0b       	sbc	r19, r23
    5742:	22 30       	cpi	r18, 0x02	; 2
    5744:	31 05       	cpc	r19, r1
    5746:	bc f0       	brlt	.+46     	; 0x5776 <calibrate_unit+0x384>
		{
			//**************************************************
			wdt_reset(); // WATCH DOG TIMER RESET
    5748:	a8 95       	wdr
			//**************************************************
		
			set_current_calibrate(output, FALSE);
    574a:	60 e0       	ldi	r22, 0x00	; 0
    574c:	ce 01       	movw	r24, r28
    574e:	0e 94 66 2f 	call	0x5ecc	; 0x5ecc <set_current_calibrate>
			//**************************************************
			wdt_reset(); // WATCH DOG TIMER RESET
    5752:	a8 95       	wdr
			//**************************************************
			output->write_to_dummy_dac(output->dac_value, output->dummy_dac_address);
    5754:	ec a9       	ldd	r30, Y+52	; 0x34
    5756:	fd a9       	ldd	r31, Y+53	; 0x35
    5758:	6e ad       	ldd	r22, Y+62	; 0x3e
    575a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    575c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    575e:	09 95       	icall
    5760:	87 ea       	ldi	r24, 0xA7	; 167
    5762:	91 e6       	ldi	r25, 0x61	; 97
    5764:	01 97       	sbiw	r24, 0x01	; 1
    5766:	f1 f7       	brne	.-4      	; 0x5764 <calibrate_unit+0x372>
    5768:	00 c0       	rjmp	.+0      	; 0x576a <calibrate_unit+0x378>
    576a:	00 00       	nop
    576c:	91 e0       	ldi	r25, 0x01	; 1
    576e:	c9 1a       	sub	r12, r25
    5770:	d1 08       	sbc	r13, r1
			_delay_ms(5);
			
			tries++;
			
			if (tries > 100)
    5772:	09 f0       	breq	.+2      	; 0x5776 <calibrate_unit+0x384>
    5774:	b1 cf       	rjmp	.-158    	; 0x56d8 <calibrate_unit+0x2e6>
			}
		}
		uint16_t pwm_eeprom_address = pwm_eeprom_start_address + i / 5;
		
		//**************************************************
		wdt_reset(); // WATCH DOG TIMER RESET
    5776:	a8 95       	wdr
		//**************************************************
		
		write_external_eeprom(&twiMasterForEEPROM, EXTERNAL_EEPROM_ADDR, pwm_eeprom_address, output->dac_value);
    5778:	2c 8d       	ldd	r18, Y+28	; 0x1c
    577a:	3d 8d       	ldd	r19, Y+29	; 0x1d
    577c:	c8 01       	movw	r24, r16
    577e:	b5 01       	movw	r22, r10
    5780:	0e 94 e8 37 	call	0x6fd0	; 0x6fd0 <__divmodhi4>
    5784:	ab 01       	movw	r20, r22
    5786:	4e 0d       	add	r20, r14
    5788:	5f 1d       	adc	r21, r15
    578a:	61 e5       	ldi	r22, 0x51	; 81
    578c:	84 e5       	ldi	r24, 0x54	; 84
    578e:	95 e2       	ldi	r25, 0x25	; 37
    5790:	0e 94 20 32 	call	0x6440	; 0x6440 <write_external_eeprom>
		
		//**************************************************
		wdt_reset(); // WATCH DOG TIMER RESET
    5794:	a8 95       	wdr
		
		//**************************************************
		wdt_reset(); // WATCH DOG TIMER RESET
		//**************************************************
	}
	for (int i = dac_start_value - 10; i >= 0; i -= 10)
    5796:	0a 50       	subi	r16, 0x0A	; 10
    5798:	11 09       	sbc	r17, r1
    579a:	2d cf       	rjmp	.-422    	; 0x55f6 <calibrate_unit+0x204>
		
		//**************************************************
		wdt_reset(); // WATCH DOG TIMER RESET
		//**************************************************
	}
}
    579c:	df 91       	pop	r29
    579e:	cf 91       	pop	r28
    57a0:	1f 91       	pop	r17
    57a2:	0f 91       	pop	r16
    57a4:	ff 90       	pop	r15
    57a6:	ef 90       	pop	r14
    57a8:	df 90       	pop	r13
    57aa:	cf 90       	pop	r12
    57ac:	bf 90       	pop	r11
    57ae:	af 90       	pop	r10
    57b0:	9f 90       	pop	r9
    57b2:	8f 90       	pop	r8
    57b4:	7f 90       	pop	r7
    57b6:	6f 90       	pop	r6
    57b8:	5f 90       	pop	r5
    57ba:	4f 90       	pop	r4
    57bc:	3f 90       	pop	r3
    57be:	2f 90       	pop	r2
    57c0:	08 95       	ret

000057c2 <calibrate_value>:


void calibrate_value(OutputState *output)
{
    57c2:	8f 92       	push	r8
    57c4:	9f 92       	push	r9
    57c6:	af 92       	push	r10
    57c8:	bf 92       	push	r11
    57ca:	ef 92       	push	r14
    57cc:	ff 92       	push	r15
    57ce:	0f 93       	push	r16
    57d0:	1f 93       	push	r17
    57d2:	cf 93       	push	r28
    57d4:	df 93       	push	r29
    57d6:	00 d0       	rcall	.+0      	; 0x57d8 <calibrate_value+0x16>
    57d8:	cd b7       	in	r28, 0x3d	; 61
    57da:	de b7       	in	r29, 0x3e	; 62
    57dc:	8c 01       	movw	r16, r24
	//**************************************************
	wdt_reset(); // WATCH DOG TIMER RESET
    57de:	a8 95       	wdr
	//**************************************************
	
	uint16_t pwm_eeprom_start_address = 0;
	int dac_start_value = 0;
	int volatile desired_current = MIN(output->target_current * output->reduced_current_fraction, output->max_current);
    57e0:	dc 01       	movw	r26, r24
    57e2:	50 96       	adiw	r26, 0x10	; 16
    57e4:	6d 91       	ld	r22, X+
    57e6:	7c 91       	ld	r23, X
    57e8:	51 97       	sbiw	r26, 0x11	; 17
    57ea:	80 e0       	ldi	r24, 0x00	; 0
    57ec:	90 e0       	ldi	r25, 0x00	; 0
    57ee:	0e 94 e4 35 	call	0x6bc8	; 0x6bc8 <__floatunsisf>
    57f2:	f8 01       	movw	r30, r16
    57f4:	23 a1       	ldd	r18, Z+35	; 0x23
    57f6:	34 a1       	ldd	r19, Z+36	; 0x24
    57f8:	45 a1       	ldd	r20, Z+37	; 0x25
    57fa:	56 a1       	ldd	r21, Z+38	; 0x26
    57fc:	0e 94 f3 36 	call	0x6de6	; 0x6de6 <__mulsf3>
    5800:	4b 01       	movw	r8, r22
    5802:	5c 01       	movw	r10, r24
    5804:	d8 01       	movw	r26, r16
    5806:	52 96       	adiw	r26, 0x12	; 18
    5808:	ed 90       	ld	r14, X+
    580a:	fc 90       	ld	r15, X
    580c:	53 97       	sbiw	r26, 0x13	; 19
    580e:	b7 01       	movw	r22, r14
    5810:	80 e0       	ldi	r24, 0x00	; 0
    5812:	90 e0       	ldi	r25, 0x00	; 0
    5814:	0e 94 e4 35 	call	0x6bc8	; 0x6bc8 <__floatunsisf>
    5818:	9b 01       	movw	r18, r22
    581a:	ac 01       	movw	r20, r24
    581c:	c5 01       	movw	r24, r10
    581e:	b4 01       	movw	r22, r8
    5820:	0e 94 37 35 	call	0x6a6e	; 0x6a6e <__cmpsf2>
    5824:	87 ff       	sbrs	r24, 7
    5826:	05 c0       	rjmp	.+10     	; 0x5832 <calibrate_value+0x70>
    5828:	c5 01       	movw	r24, r10
    582a:	b4 01       	movw	r22, r8
    582c:	0e 94 ae 35 	call	0x6b5c	; 0x6b5c <__fixsfsi>
    5830:	01 c0       	rjmp	.+2      	; 0x5834 <calibrate_value+0x72>
    5832:	b7 01       	movw	r22, r14
    5834:	69 83       	std	Y+1, r22	; 0x01
    5836:	7a 83       	std	Y+2, r23	; 0x02
	
	if (program_state.program == THIRTY_EIGHT)
    5838:	80 91 e8 23 	lds	r24, 0x23E8	; 0x8023e8 <program_state+0x4>
    583c:	88 23       	and	r24, r24
    583e:	c1 f0       	breq	.+48     	; 0x5870 <calibrate_value+0xae>
	{
		pwm_eeprom_start_address = 0;
		dac_start_value = 120;
	}
	else if (program_state.program == FOURTY_ONE_DUAL)
    5840:	82 30       	cpi	r24, 0x02	; 2
    5842:	69 f4       	brne	.+26     	; 0x585e <calibrate_value+0x9c>
	{
		if (output->id == output_one.id)
    5844:	f8 01       	movw	r30, r16
    5846:	90 81       	ld	r25, Z
    5848:	80 91 a3 24 	lds	r24, 0x24A3	; 0x8024a3 <output_one>
    584c:	98 17       	cp	r25, r24
    584e:	99 f0       	breq	.+38     	; 0x5876 <calibrate_value+0xb4>
		}
		else
		{
			pwm_eeprom_start_address = 940;
		}
		dac_start_value = 100;
    5850:	84 e6       	ldi	r24, 0x64	; 100
    5852:	90 e0       	ldi	r25, 0x00	; 0
		{
			pwm_eeprom_start_address = 420;
		}
		else
		{
			pwm_eeprom_start_address = 940;
    5854:	4c ea       	ldi	r20, 0xAC	; 172
    5856:	e4 2e       	mov	r14, r20
    5858:	43 e0       	ldi	r20, 0x03	; 3
    585a:	f4 2e       	mov	r15, r20
    585c:	17 c0       	rjmp	.+46     	; 0x588c <calibrate_value+0xca>
		}
		dac_start_value = 100;
	}
	else if (program_state.program == FOURTY_ONE)
    585e:	81 30       	cpi	r24, 0x01	; 1
    5860:	89 f4       	brne	.+34     	; 0x5884 <calibrate_value+0xc2>
	{
		pwm_eeprom_start_address = 1460;
		dac_start_value = 100;
    5862:	84 e6       	ldi	r24, 0x64	; 100
    5864:	90 e0       	ldi	r25, 0x00	; 0
		}
		dac_start_value = 100;
	}
	else if (program_state.program == FOURTY_ONE)
	{
		pwm_eeprom_start_address = 1460;
    5866:	34 eb       	ldi	r19, 0xB4	; 180
    5868:	e3 2e       	mov	r14, r19
    586a:	35 e0       	ldi	r19, 0x05	; 5
    586c:	f3 2e       	mov	r15, r19
    586e:	0e c0       	rjmp	.+28     	; 0x588c <calibrate_value+0xca>
	int volatile desired_current = MIN(output->target_current * output->reduced_current_fraction, output->max_current);
	
	if (program_state.program == THIRTY_EIGHT)
	{
		pwm_eeprom_start_address = 0;
		dac_start_value = 120;
    5870:	88 e7       	ldi	r24, 0x78	; 120
    5872:	90 e0       	ldi	r25, 0x00	; 0
    5874:	09 c0       	rjmp	.+18     	; 0x5888 <calibrate_value+0xc6>
		}
		else
		{
			pwm_eeprom_start_address = 940;
		}
		dac_start_value = 100;
    5876:	84 e6       	ldi	r24, 0x64	; 100
    5878:	90 e0       	ldi	r25, 0x00	; 0
	}
	else if (program_state.program == FOURTY_ONE_DUAL)
	{
		if (output->id == output_one.id)
		{
			pwm_eeprom_start_address = 420;
    587a:	24 ea       	ldi	r18, 0xA4	; 164
    587c:	e2 2e       	mov	r14, r18
    587e:	ff 24       	eor	r15, r15
    5880:	f3 94       	inc	r15
    5882:	04 c0       	rjmp	.+8      	; 0x588c <calibrate_value+0xca>
	//**************************************************
	wdt_reset(); // WATCH DOG TIMER RESET
	//**************************************************
	
	uint16_t pwm_eeprom_start_address = 0;
	int dac_start_value = 0;
    5884:	80 e0       	ldi	r24, 0x00	; 0
    5886:	90 e0       	ldi	r25, 0x00	; 0
{
	//**************************************************
	wdt_reset(); // WATCH DOG TIMER RESET
	//**************************************************
	
	uint16_t pwm_eeprom_start_address = 0;
    5888:	e1 2c       	mov	r14, r1
    588a:	f1 2c       	mov	r15, r1
		pwm_eeprom_start_address = 1460;
		dac_start_value = 100;
	}
	
	//**************************************************
	wdt_reset(); // WATCH DOG TIMER RESET
    588c:	a8 95       	wdr
	//**************************************************
	
	if (desired_current >= dac_start_value)
    588e:	29 81       	ldd	r18, Y+1	; 0x01
    5890:	3a 81       	ldd	r19, Y+2	; 0x02
    5892:	28 17       	cp	r18, r24
    5894:	39 07       	cpc	r19, r25
    5896:	24 f1       	brlt	.+72     	; 0x58e0 <calibrate_value+0x11e>
	{
		//**************************************************
		wdt_reset(); // WATCH DOG TIMER RESET
    5898:	a8 95       	wdr
		//**************************************************
		if (abs(output->current - desired_current) <= 10)
    589a:	29 81       	ldd	r18, Y+1	; 0x01
    589c:	3a 81       	ldd	r19, Y+2	; 0x02
    589e:	d8 01       	movw	r26, r16
    58a0:	56 96       	adiw	r26, 0x16	; 22
    58a2:	8d 91       	ld	r24, X+
    58a4:	9c 91       	ld	r25, X
    58a6:	57 97       	sbiw	r26, 0x17	; 23
    58a8:	82 1b       	sub	r24, r18
    58aa:	93 0b       	sbc	r25, r19
    58ac:	97 ff       	sbrs	r25, 7
    58ae:	03 c0       	rjmp	.+6      	; 0x58b6 <calibrate_value+0xf4>
    58b0:	91 95       	neg	r25
    58b2:	81 95       	neg	r24
    58b4:	91 09       	sbc	r25, r1
    58b6:	0b 97       	sbiw	r24, 0x0b	; 11
    58b8:	14 f4       	brge	.+4      	; 0x58be <calibrate_value+0xfc>
		{
			set_current_calibrate(output, FALSE);
    58ba:	60 e0       	ldi	r22, 0x00	; 0
    58bc:	01 c0       	rjmp	.+2      	; 0x58c0 <calibrate_value+0xfe>
		}
		else
		{
			set_current_calibrate(output, TRUE);
    58be:	61 e0       	ldi	r22, 0x01	; 1
    58c0:	c8 01       	movw	r24, r16
    58c2:	0e 94 66 2f 	call	0x5ecc	; 0x5ecc <set_current_calibrate>
		}
		
		//**************************************************
		wdt_reset(); // WATCH DOG TIMER RESET
    58c6:	a8 95       	wdr
		//**************************************************
		
		uint16_t pwm_eeprom_address = pwm_eeprom_start_address + desired_current / 5;
    58c8:	89 81       	ldd	r24, Y+1	; 0x01
    58ca:	9a 81       	ldd	r25, Y+2	; 0x02
		
		if (output->over_temp_error1 == FALSE && output->over_temp_error2 == FALSE)
    58cc:	f8 01       	movw	r30, r16
    58ce:	21 85       	ldd	r18, Z+9	; 0x09
    58d0:	21 11       	cpse	r18, r1
    58d2:	44 c0       	rjmp	.+136    	; 0x595c <calibrate_value+0x19a>
    58d4:	22 85       	ldd	r18, Z+10	; 0x0a
    58d6:	21 11       	cpse	r18, r1
    58d8:	41 c0       	rjmp	.+130    	; 0x595c <calibrate_value+0x19a>
		{
			write_external_eeprom(&twiMasterForEEPROM, EXTERNAL_EEPROM_ADDR, pwm_eeprom_address, output->pwm_value);
    58da:	22 8d       	ldd	r18, Z+26	; 0x1a
    58dc:	33 8d       	ldd	r19, Z+27	; 0x1b
    58de:	32 c0       	rjmp	.+100    	; 0x5944 <calibrate_value+0x182>
		}
	}
	else
	{
		if (output->voltage < 700)
    58e0:	d8 01       	movw	r26, r16
    58e2:	58 96       	adiw	r26, 0x18	; 24
    58e4:	8d 91       	ld	r24, X+
    58e6:	9c 91       	ld	r25, X
    58e8:	59 97       	sbiw	r26, 0x19	; 25
    58ea:	8c 3b       	cpi	r24, 0xBC	; 188
    58ec:	92 40       	sbci	r25, 0x02	; 2
    58ee:	b0 f5       	brcc	.+108    	; 0x595c <calibrate_value+0x19a>
		{
			//**************************************************
			wdt_reset(); // WATCH DOG TIMER RESET
    58f0:	a8 95       	wdr
			//**************************************************
		
			set_current_calibrate(output, FALSE);
    58f2:	60 e0       	ldi	r22, 0x00	; 0
    58f4:	c8 01       	movw	r24, r16
    58f6:	0e 94 66 2f 	call	0x5ecc	; 0x5ecc <set_current_calibrate>
		
			//**************************************************
			wdt_reset(); // WATCH DOG TIMER RESET
    58fa:	a8 95       	wdr
			//**************************************************
		
			output->write_to_dummy_dac(output->dac_value, output->dummy_dac_address);
    58fc:	d8 01       	movw	r26, r16
    58fe:	d4 96       	adiw	r26, 0x34	; 52
    5900:	ed 91       	ld	r30, X+
    5902:	fc 91       	ld	r31, X
    5904:	d5 97       	sbiw	r26, 0x35	; 53
    5906:	de 96       	adiw	r26, 0x3e	; 62
    5908:	6c 91       	ld	r22, X
    590a:	de 97       	sbiw	r26, 0x3e	; 62
    590c:	5c 96       	adiw	r26, 0x1c	; 28
    590e:	8d 91       	ld	r24, X+
    5910:	9c 91       	ld	r25, X
    5912:	5d 97       	sbiw	r26, 0x1d	; 29
    5914:	09 95       	icall
    5916:	e7 ea       	ldi	r30, 0xA7	; 167
    5918:	f1 e6       	ldi	r31, 0x61	; 97
    591a:	31 97       	sbiw	r30, 0x01	; 1
    591c:	f1 f7       	brne	.-4      	; 0x591a <calibrate_value+0x158>
    591e:	00 c0       	rjmp	.+0      	; 0x5920 <calibrate_value+0x15e>
    5920:	00 00       	nop
			_delay_ms(5);
		
		
			uint16_t pwm_eeprom_address = pwm_eeprom_start_address + desired_current / 5;
    5922:	89 81       	ldd	r24, Y+1	; 0x01
    5924:	9a 81       	ldd	r25, Y+2	; 0x02
		
			if (output->over_temp_error1 == FALSE && output->over_temp_error2 == FALSE)
    5926:	d8 01       	movw	r26, r16
    5928:	19 96       	adiw	r26, 0x09	; 9
    592a:	2c 91       	ld	r18, X
    592c:	19 97       	sbiw	r26, 0x09	; 9
    592e:	21 11       	cpse	r18, r1
    5930:	15 c0       	rjmp	.+42     	; 0x595c <calibrate_value+0x19a>
    5932:	1a 96       	adiw	r26, 0x0a	; 10
    5934:	2c 91       	ld	r18, X
    5936:	1a 97       	sbiw	r26, 0x0a	; 10
    5938:	21 11       	cpse	r18, r1
    593a:	10 c0       	rjmp	.+32     	; 0x595c <calibrate_value+0x19a>
			{
				write_external_eeprom(&twiMasterForEEPROM, EXTERNAL_EEPROM_ADDR, pwm_eeprom_address, output->dac_value);
    593c:	5c 96       	adiw	r26, 0x1c	; 28
    593e:	2d 91       	ld	r18, X+
    5940:	3c 91       	ld	r19, X
    5942:	5d 97       	sbiw	r26, 0x1d	; 29
    5944:	65 e0       	ldi	r22, 0x05	; 5
    5946:	70 e0       	ldi	r23, 0x00	; 0
    5948:	0e 94 e8 37 	call	0x6fd0	; 0x6fd0 <__divmodhi4>
    594c:	ab 01       	movw	r20, r22
    594e:	4e 0d       	add	r20, r14
    5950:	5f 1d       	adc	r21, r15
    5952:	61 e5       	ldi	r22, 0x51	; 81
    5954:	84 e5       	ldi	r24, 0x54	; 84
    5956:	95 e2       	ldi	r25, 0x25	; 37
    5958:	0e 94 20 32 	call	0x6440	; 0x6440 <write_external_eeprom>
			}
		}
	}
    595c:	0f 90       	pop	r0
    595e:	0f 90       	pop	r0
    5960:	df 91       	pop	r29
    5962:	cf 91       	pop	r28
    5964:	1f 91       	pop	r17
    5966:	0f 91       	pop	r16
    5968:	ff 90       	pop	r15
    596a:	ef 90       	pop	r14
    596c:	bf 90       	pop	r11
    596e:	af 90       	pop	r10
    5970:	9f 90       	pop	r9
    5972:	8f 90       	pop	r8
    5974:	08 95       	ret

00005976 <write_pwm_to_41ec>:
{
	TWI_MasterRead(&twiMaster, slave_addr, 2);
	_delay_ms(5);
	int val = ((twiMaster.readData[0] << 8) + (twiMaster.readData[1]));
	return val;
}
    5976:	cf 92       	push	r12
    5978:	ef 92       	push	r14
    597a:	ff 92       	push	r15
    597c:	0f 93       	push	r16
    597e:	1f 93       	push	r17
    5980:	cf 93       	push	r28
    5982:	df 93       	push	r29
    5984:	cd b7       	in	r28, 0x3d	; 61
    5986:	de b7       	in	r29, 0x3e	; 62
    5988:	26 97       	sbiw	r28, 0x06	; 6
    598a:	cd bf       	out	0x3d, r28	; 61
    598c:	de bf       	out	0x3e, r29	; 62
    598e:	35 e1       	ldi	r19, 0x15	; 21
    5990:	39 83       	std	Y+1, r19	; 0x01
    5992:	8a 83       	std	Y+2, r24	; 0x02
    5994:	9b 83       	std	Y+3, r25	; 0x03
    5996:	6c 83       	std	Y+4, r22	; 0x04
    5998:	7d 83       	std	Y+5, r23	; 0x05
    599a:	84 e0       	ldi	r24, 0x04	; 4
    599c:	08 9f       	mul	r16, r24
    599e:	80 01       	movw	r16, r0
    59a0:	11 24       	eor	r1, r1
    59a2:	04 2b       	or	r16, r20
    59a4:	88 e0       	ldi	r24, 0x08	; 8
    59a6:	e8 9e       	mul	r14, r24
    59a8:	70 01       	movw	r14, r0
    59aa:	11 24       	eor	r1, r1
    59ac:	e0 2a       	or	r14, r16
    59ae:	22 0f       	add	r18, r18
    59b0:	e2 2a       	or	r14, r18
    59b2:	ee 82       	std	Y+6, r14	; 0x06
    59b4:	26 e0       	ldi	r18, 0x06	; 6
    59b6:	ae 01       	movw	r20, r28
    59b8:	4f 5f       	subi	r20, 0xFF	; 255
    59ba:	5f 4f       	sbci	r21, 0xFF	; 255
    59bc:	6c 2d       	mov	r22, r12
    59be:	88 e6       	ldi	r24, 0x68	; 104
    59c0:	94 e2       	ldi	r25, 0x24	; 36
    59c2:	0e 94 62 33 	call	0x66c4	; 0x66c4 <TWI_MasterWrite>
    59c6:	26 96       	adiw	r28, 0x06	; 6
    59c8:	cd bf       	out	0x3d, r28	; 61
    59ca:	de bf       	out	0x3e, r29	; 62
    59cc:	df 91       	pop	r29
    59ce:	cf 91       	pop	r28
    59d0:	1f 91       	pop	r17
    59d2:	0f 91       	pop	r16
    59d4:	ff 90       	pop	r15
    59d6:	ef 90       	pop	r14
    59d8:	cf 90       	pop	r12
    59da:	08 95       	ret

000059dc <write_to_dac101c085>:
    59dc:	cf 93       	push	r28
    59de:	df 93       	push	r29
    59e0:	00 d0       	rcall	.+0      	; 0x59e2 <write_to_dac101c085+0x6>
    59e2:	cd b7       	in	r28, 0x3d	; 61
    59e4:	de b7       	in	r29, 0x3e	; 62
    59e6:	99 83       	std	Y+1, r25	; 0x01
    59e8:	8a 83       	std	Y+2, r24	; 0x02
    59ea:	22 e0       	ldi	r18, 0x02	; 2
    59ec:	ae 01       	movw	r20, r28
    59ee:	4f 5f       	subi	r20, 0xFF	; 255
    59f0:	5f 4f       	sbci	r21, 0xFF	; 255
    59f2:	88 e6       	ldi	r24, 0x68	; 104
    59f4:	94 e2       	ldi	r25, 0x24	; 36
    59f6:	0e 94 62 33 	call	0x66c4	; 0x66c4 <TWI_MasterWrite>
    59fa:	0f 90       	pop	r0
    59fc:	0f 90       	pop	r0
    59fe:	df 91       	pop	r29
    5a00:	cf 91       	pop	r28
    5a02:	08 95       	ret

00005a04 <clear_pwms>:

/**********************************
* Zeros all the pwms on the 41ec board
***********************************/
void clear_pwms(uint8_t slave_addr)
{
    5a04:	cf 92       	push	r12
    5a06:	ef 92       	push	r14
    5a08:	0f 93       	push	r16
	write_pwm_to_41ec(0, 0, TRUE, TRUE, TRUE, TRUE, slave_addr);
    5a0a:	c8 2e       	mov	r12, r24
    5a0c:	ee 24       	eor	r14, r14
    5a0e:	e3 94       	inc	r14
    5a10:	01 e0       	ldi	r16, 0x01	; 1
    5a12:	21 e0       	ldi	r18, 0x01	; 1
    5a14:	41 e0       	ldi	r20, 0x01	; 1
    5a16:	60 e0       	ldi	r22, 0x00	; 0
    5a18:	70 e0       	ldi	r23, 0x00	; 0
    5a1a:	80 e0       	ldi	r24, 0x00	; 0
    5a1c:	90 e0       	ldi	r25, 0x00	; 0
    5a1e:	0e 94 bb 2c 	call	0x5976	; 0x5976 <write_pwm_to_41ec>
}
    5a22:	0f 91       	pop	r16
    5a24:	ef 90       	pop	r14
    5a26:	cf 90       	pop	r12
    5a28:	08 95       	ret

00005a2a <clear_dummy_dacs>:

/*
Zeros both dummy dacs
*/
void clear_dummy_dacs(uint8_t output1_dac_slave_addr, uint8_t output2_dac_slave_addr)
{
    5a2a:	cf 93       	push	r28
    5a2c:	c6 2f       	mov	r28, r22
	write_to_dac101c085(0, output1_dac_slave_addr);
    5a2e:	68 2f       	mov	r22, r24
    5a30:	80 e0       	ldi	r24, 0x00	; 0
    5a32:	90 e0       	ldi	r25, 0x00	; 0
    5a34:	0e 94 ee 2c 	call	0x59dc	; 0x59dc <write_to_dac101c085>
	if (program_state.program != THIRTY_EIGHT)
    5a38:	80 91 e8 23 	lds	r24, 0x23E8	; 0x8023e8 <program_state+0x4>
    5a3c:	88 23       	and	r24, r24
    5a3e:	31 f0       	breq	.+12     	; 0x5a4c <clear_dummy_dacs+0x22>
	{
		write_to_dac101c085(0, output2_dac_slave_addr);
    5a40:	6c 2f       	mov	r22, r28
    5a42:	80 e0       	ldi	r24, 0x00	; 0
    5a44:	90 e0       	ldi	r25, 0x00	; 0
	}
	
}
    5a46:	cf 91       	pop	r28
void clear_dummy_dacs(uint8_t output1_dac_slave_addr, uint8_t output2_dac_slave_addr)
{
	write_to_dac101c085(0, output1_dac_slave_addr);
	if (program_state.program != THIRTY_EIGHT)
	{
		write_to_dac101c085(0, output2_dac_slave_addr);
    5a48:	0c 94 ee 2c 	jmp	0x59dc	; 0x59dc <write_to_dac101c085>
	}
	
}
    5a4c:	cf 91       	pop	r28
    5a4e:	08 95       	ret

00005a50 <set_current_thirty_eight>:

void set_current_thirty_eight(OutputState *output) {
	output_one.isChanelused1 = TRUE;
    5a50:	e3 ea       	ldi	r30, 0xA3	; 163
    5a52:	f4 e2       	ldi	r31, 0x24	; 36
    5a54:	81 e0       	ldi	r24, 0x01	; 1
    5a56:	83 a7       	std	Z+43, r24	; 0x2b
	output_one.isChanelused2 = FALSE;
    5a58:	14 a6       	std	Z+44, r1	; 0x2c
	output_two.isChanelused1 = FALSE;
    5a5a:	e1 e2       	ldi	r30, 0x21	; 33
    5a5c:	f4 e2       	ldi	r31, 0x24	; 36
    5a5e:	13 a6       	std	Z+43, r1	; 0x2b
	output_two.isChanelused2 = FALSE;
    5a60:	14 a6       	std	Z+44, r1	; 0x2c
    5a62:	08 95       	ret

00005a64 <set_current_fourty_two_1>:
}

void set_current_fourty_two_1(OutputState *output, int desired_current) {
	if (desired_current < 250)
    5a64:	6a 3f       	cpi	r22, 0xFA	; 250
    5a66:	71 05       	cpc	r23, r1
    5a68:	34 f4       	brge	.+12     	; 0x5a76 <set_current_fourty_two_1+0x12>
	{
		output_one.isChanelused1 = TRUE;
    5a6a:	81 e0       	ldi	r24, 0x01	; 1
    5a6c:	80 93 ce 24 	sts	0x24CE, r24	; 0x8024ce <output_one+0x2b>
		output_one.isChanelused2 = FALSE;
    5a70:	10 92 cf 24 	sts	0x24CF, r1	; 0x8024cf <output_one+0x2c>
    5a74:	09 c0       	rjmp	.+18     	; 0x5a88 <set_current_fourty_two_1+0x24>
		output_two.isChanelused1 = FALSE;
		output_two.isChanelused2 = FALSE;
	}
	else if (desired_current < 500)
    5a76:	64 3f       	cpi	r22, 0xF4	; 244
    5a78:	81 e0       	ldi	r24, 0x01	; 1
    5a7a:	78 07       	cpc	r23, r24
    5a7c:	44 f4       	brge	.+16     	; 0x5a8e <set_current_fourty_two_1+0x2a>
	{
		output_one.isChanelused1 = TRUE;
    5a7e:	81 e0       	ldi	r24, 0x01	; 1
    5a80:	80 93 ce 24 	sts	0x24CE, r24	; 0x8024ce <output_one+0x2b>
		output_one.isChanelused2 = TRUE;
    5a84:	80 93 cf 24 	sts	0x24CF, r24	; 0x8024cf <output_one+0x2c>
		output_two.isChanelused1 = FALSE;
    5a88:	10 92 4c 24 	sts	0x244C, r1	; 0x80244c <output_two+0x2b>
    5a8c:	0a c0       	rjmp	.+20     	; 0x5aa2 <set_current_fourty_two_1+0x3e>
		output_two.isChanelused2 = FALSE;
	}
	else if (desired_current < 750)
    5a8e:	6e 3e       	cpi	r22, 0xEE	; 238
    5a90:	72 40       	sbci	r23, 0x02	; 2
    5a92:	54 f4       	brge	.+20     	; 0x5aa8 <set_current_fourty_two_1+0x44>
	{
		output_one.isChanelused1 = TRUE;
    5a94:	81 e0       	ldi	r24, 0x01	; 1
    5a96:	80 93 ce 24 	sts	0x24CE, r24	; 0x8024ce <output_one+0x2b>
		output_one.isChanelused2 = TRUE;
    5a9a:	80 93 cf 24 	sts	0x24CF, r24	; 0x8024cf <output_one+0x2c>
		output_two.isChanelused1 = TRUE;
    5a9e:	80 93 4c 24 	sts	0x244C, r24	; 0x80244c <output_two+0x2b>
		output_two.isChanelused2 = FALSE;
    5aa2:	10 92 4d 24 	sts	0x244D, r1	; 0x80244d <output_two+0x2c>
    5aa6:	08 95       	ret
	}
	else
	{
		output_one.isChanelused1 = TRUE;
    5aa8:	81 e0       	ldi	r24, 0x01	; 1
    5aaa:	80 93 ce 24 	sts	0x24CE, r24	; 0x8024ce <output_one+0x2b>
		output_one.isChanelused2 = TRUE;
    5aae:	80 93 cf 24 	sts	0x24CF, r24	; 0x8024cf <output_one+0x2c>
		output_two.isChanelused1 = TRUE;
    5ab2:	80 93 4c 24 	sts	0x244C, r24	; 0x80244c <output_two+0x2b>
		output_two.isChanelused2 = TRUE;
    5ab6:	80 93 4d 24 	sts	0x244D, r24	; 0x80244d <output_two+0x2c>
    5aba:	08 95       	ret

00005abc <set_current_fourty_two_2>:
	}
}

void set_current_fourty_two_2(OutputState *output, int desired_current) 
{
    5abc:	fc 01       	movw	r30, r24
	if (desired_current < 500)
    5abe:	64 3f       	cpi	r22, 0xF4	; 244
    5ac0:	71 40       	sbci	r23, 0x01	; 1
    5ac2:	24 f4       	brge	.+8      	; 0x5acc <set_current_fourty_two_2+0x10>
	{
		output->isChanelused1 = TRUE;
    5ac4:	81 e0       	ldi	r24, 0x01	; 1
    5ac6:	83 a7       	std	Z+43, r24	; 0x2b
		output->isChanelused2 = FALSE;
    5ac8:	14 a6       	std	Z+44, r1	; 0x2c
    5aca:	08 95       	ret
	}
	else
	{
		output->isChanelused2 = TRUE;
    5acc:	81 e0       	ldi	r24, 0x01	; 1
    5ace:	84 a7       	std	Z+44, r24	; 0x2c
		output->isChanelused1 = TRUE;
    5ad0:	83 a7       	std	Z+43, r24	; 0x2b
    5ad2:	08 95       	ret

00005ad4 <read_external_eeprom>:
	
	_delay_ms(5);
}

uint16_t read_external_eeprom(TWI_Master_t *twi, uint8_t eepromAddress, uint16_t dataAddress)
{
    5ad4:	df 92       	push	r13
    5ad6:	ef 92       	push	r14
    5ad8:	ff 92       	push	r15
    5ada:	0f 93       	push	r16
    5adc:	1f 93       	push	r17
    5ade:	cf 93       	push	r28
    5ae0:	df 93       	push	r29
    5ae2:	cd b7       	in	r28, 0x3d	; 61
    5ae4:	de b7       	in	r29, 0x3e	; 62
    5ae6:	28 97       	sbiw	r28, 0x08	; 8
    5ae8:	cd bf       	out	0x3d, r28	; 61
    5aea:	de bf       	out	0x3e, r29	; 62
    5aec:	7c 01       	movw	r14, r24
    5aee:	d6 2e       	mov	r13, r22
    5af0:	8a 01       	movw	r16, r20
	uint16_t received_data = 0;
	
	char message[8];
	message[0] = (uint8_t)(dataAddress >> 8);
    5af2:	19 83       	std	Y+1, r17	; 0x01
	message[1] = (uint8_t)(dataAddress);
    5af4:	4a 83       	std	Y+2, r20	; 0x02
	TWI_MasterWrite(&twiMasterForEEPROM, eepromAddress, (uint8_t *) message, 2);
    5af6:	22 e0       	ldi	r18, 0x02	; 2
    5af8:	ae 01       	movw	r20, r28
    5afa:	4f 5f       	subi	r20, 0xFF	; 255
    5afc:	5f 4f       	sbci	r21, 0xFF	; 255
    5afe:	84 e5       	ldi	r24, 0x54	; 84
    5b00:	95 e2       	ldi	r25, 0x25	; 37
    5b02:	0e 94 62 33 	call	0x66c4	; 0x66c4 <TWI_MasterWrite>
    5b06:	2f e7       	ldi	r18, 0x7F	; 127
    5b08:	38 e3       	ldi	r19, 0x38	; 56
    5b0a:	81 e0       	ldi	r24, 0x01	; 1
    5b0c:	21 50       	subi	r18, 0x01	; 1
    5b0e:	30 40       	sbci	r19, 0x00	; 0
    5b10:	80 40       	sbci	r24, 0x00	; 0
    5b12:	e1 f7       	brne	.-8      	; 0x5b0c <read_external_eeprom+0x38>
    5b14:	00 c0       	rjmp	.+0      	; 0x5b16 <read_external_eeprom+0x42>
    5b16:	00 00       	nop
    5b18:	80 91 0e 25 	lds	r24, 0x250E	; 0x80250e <counters+0x2a>
    5b1c:	90 91 0f 25 	lds	r25, 0x250F	; 0x80250f <counters+0x2b>
	_delay_ms(20);
	
	while(twi->status != TWIM_STATUS_READY)
    5b20:	f7 01       	movw	r30, r14
    5b22:	21 ad       	ldd	r18, Z+57	; 0x39
    5b24:	22 23       	and	r18, r18
    5b26:	19 f0       	breq	.+6      	; 0x5b2e <read_external_eeprom+0x5a>
	{
		if (counters.i2c_error_counter > 20)
    5b28:	85 31       	cpi	r24, 0x15	; 21
    5b2a:	91 05       	cpc	r25, r1
    5b2c:	10 f1       	brcs	.+68     	; 0x5b72 <read_external_eeprom+0x9e>
    5b2e:	80 93 0e 25 	sts	0x250E, r24	; 0x80250e <counters+0x2a>
    5b32:	90 93 0f 25 	sts	0x250F, r25	; 0x80250f <counters+0x2b>
    5b36:	e7 ea       	ldi	r30, 0xA7	; 167
    5b38:	f1 e6       	ldi	r31, 0x61	; 97
    5b3a:	31 97       	sbiw	r30, 0x01	; 1
    5b3c:	f1 f7       	brne	.-4      	; 0x5b3a <read_external_eeprom+0x66>
    5b3e:	00 c0       	rjmp	.+0      	; 0x5b40 <read_external_eeprom+0x6c>
    5b40:	00 00       	nop
		counters.i2c_error_counter++;
	}
	
	_delay_ms(5);
	
	counters.i2c_error_counter = 0;
    5b42:	10 92 0e 25 	sts	0x250E, r1	; 0x80250e <counters+0x2a>
    5b46:	10 92 0f 25 	sts	0x250F, r1	; 0x80250f <counters+0x2b>
	
	TWI_MasterRead(&twiMasterForEEPROM, eepromAddress, 1);
    5b4a:	41 e0       	ldi	r20, 0x01	; 1
    5b4c:	6d 2d       	mov	r22, r13
    5b4e:	84 e5       	ldi	r24, 0x54	; 84
    5b50:	95 e2       	ldi	r25, 0x25	; 37
    5b52:	0e 94 7f 33 	call	0x66fe	; 0x66fe <TWI_MasterRead>
    5b56:	ff e7       	ldi	r31, 0x7F	; 127
    5b58:	28 e3       	ldi	r18, 0x38	; 56
    5b5a:	31 e0       	ldi	r19, 0x01	; 1
    5b5c:	f1 50       	subi	r31, 0x01	; 1
    5b5e:	20 40       	sbci	r18, 0x00	; 0
    5b60:	30 40       	sbci	r19, 0x00	; 0
    5b62:	e1 f7       	brne	.-8      	; 0x5b5c <read_external_eeprom+0x88>
    5b64:	00 c0       	rjmp	.+0      	; 0x5b66 <read_external_eeprom+0x92>
    5b66:	00 00       	nop
    5b68:	80 91 0e 25 	lds	r24, 0x250E	; 0x80250e <counters+0x2a>
    5b6c:	90 91 0f 25 	lds	r25, 0x250F	; 0x80250f <counters+0x2b>
    5b70:	06 c0       	rjmp	.+12     	; 0x5b7e <read_external_eeprom+0xaa>
	{
		if (counters.i2c_error_counter > 20)
		{
			break;
		}
		counters.i2c_error_counter++;
    5b72:	01 96       	adiw	r24, 0x01	; 1
    5b74:	d5 cf       	rjmp	.-86     	; 0x5b20 <read_external_eeprom+0x4c>
	TWI_MasterRead(&twiMasterForEEPROM, eepromAddress, 1);
	_delay_ms(20);
	
	while(twi->status != TWIM_STATUS_READY)
	{
		if (counters.i2c_error_counter > 20)
    5b76:	85 31       	cpi	r24, 0x15	; 21
    5b78:	91 05       	cpc	r25, r1
    5b7a:	28 f4       	brcc	.+10     	; 0x5b86 <read_external_eeprom+0xb2>
		{
			break;
		}
		counters.i2c_error_counter++;
    5b7c:	01 96       	adiw	r24, 0x01	; 1
	counters.i2c_error_counter = 0;
	
	TWI_MasterRead(&twiMasterForEEPROM, eepromAddress, 1);
	_delay_ms(20);
	
	while(twi->status != TWIM_STATUS_READY)
    5b7e:	f7 01       	movw	r30, r14
    5b80:	21 ad       	ldd	r18, Z+57	; 0x39
    5b82:	21 11       	cpse	r18, r1
    5b84:	f8 cf       	rjmp	.-16     	; 0x5b76 <read_external_eeprom+0xa2>
    5b86:	80 93 0e 25 	sts	0x250E, r24	; 0x80250e <counters+0x2a>
    5b8a:	90 93 0f 25 	sts	0x250F, r25	; 0x80250f <counters+0x2b>
    5b8e:	87 ea       	ldi	r24, 0xA7	; 167
    5b90:	91 e6       	ldi	r25, 0x61	; 97
    5b92:	01 97       	sbiw	r24, 0x01	; 1
    5b94:	f1 f7       	brne	.-4      	; 0x5b92 <read_external_eeprom+0xbe>
    5b96:	00 c0       	rjmp	.+0      	; 0x5b98 <read_external_eeprom+0xc4>
    5b98:	00 00       	nop
		counters.i2c_error_counter++;
	}
	
	_delay_ms(5);
	
	counters.i2c_error_counter = 0;
    5b9a:	10 92 0e 25 	sts	0x250E, r1	; 0x80250e <counters+0x2a>
    5b9e:	10 92 0f 25 	sts	0x250F, r1	; 0x80250f <counters+0x2b>
	
	dataAddress++;
    5ba2:	98 01       	movw	r18, r16
    5ba4:	2f 5f       	subi	r18, 0xFF	; 255
    5ba6:	3f 4f       	sbci	r19, 0xFF	; 255
	received_data = twi->readData[0] << 8;
    5ba8:	f7 01       	movw	r30, r14
    5baa:	84 8d       	ldd	r24, Z+28	; 0x1c
    5bac:	90 e0       	ldi	r25, 0x00	; 0
    5bae:	18 2f       	mov	r17, r24
    5bb0:	00 27       	eor	r16, r16
	
	message[0] = (uint8_t)(dataAddress >> 8);
    5bb2:	39 83       	std	Y+1, r19	; 0x01
	message[1] = (uint8_t)(dataAddress);
    5bb4:	2a 83       	std	Y+2, r18	; 0x02
	TWI_MasterWrite(&twiMasterForEEPROM, eepromAddress, (uint8_t *) message, 2);
    5bb6:	22 e0       	ldi	r18, 0x02	; 2
    5bb8:	ae 01       	movw	r20, r28
    5bba:	4f 5f       	subi	r20, 0xFF	; 255
    5bbc:	5f 4f       	sbci	r21, 0xFF	; 255
    5bbe:	6d 2d       	mov	r22, r13
    5bc0:	84 e5       	ldi	r24, 0x54	; 84
    5bc2:	95 e2       	ldi	r25, 0x25	; 37
    5bc4:	0e 94 62 33 	call	0x66c4	; 0x66c4 <TWI_MasterWrite>
    5bc8:	ff e7       	ldi	r31, 0x7F	; 127
    5bca:	28 e3       	ldi	r18, 0x38	; 56
    5bcc:	31 e0       	ldi	r19, 0x01	; 1
    5bce:	f1 50       	subi	r31, 0x01	; 1
    5bd0:	20 40       	sbci	r18, 0x00	; 0
    5bd2:	30 40       	sbci	r19, 0x00	; 0
    5bd4:	e1 f7       	brne	.-8      	; 0x5bce <read_external_eeprom+0xfa>
    5bd6:	00 c0       	rjmp	.+0      	; 0x5bd8 <read_external_eeprom+0x104>
    5bd8:	00 00       	nop
    5bda:	80 91 0e 25 	lds	r24, 0x250E	; 0x80250e <counters+0x2a>
    5bde:	90 91 0f 25 	lds	r25, 0x250F	; 0x80250f <counters+0x2b>
    5be2:	04 c0       	rjmp	.+8      	; 0x5bec <read_external_eeprom+0x118>
	_delay_ms(20);
	
	while(twi->status != TWIM_STATUS_READY)
	{
		if (counters.i2c_error_counter > 20)
    5be4:	85 31       	cpi	r24, 0x15	; 21
    5be6:	91 05       	cpc	r25, r1
    5be8:	28 f4       	brcc	.+10     	; 0x5bf4 <read_external_eeprom+0x120>
		{
			break;
		}
		counters.i2c_error_counter++;
    5bea:	01 96       	adiw	r24, 0x01	; 1
	message[0] = (uint8_t)(dataAddress >> 8);
	message[1] = (uint8_t)(dataAddress);
	TWI_MasterWrite(&twiMasterForEEPROM, eepromAddress, (uint8_t *) message, 2);
	_delay_ms(20);
	
	while(twi->status != TWIM_STATUS_READY)
    5bec:	f7 01       	movw	r30, r14
    5bee:	21 ad       	ldd	r18, Z+57	; 0x39
    5bf0:	21 11       	cpse	r18, r1
    5bf2:	f8 cf       	rjmp	.-16     	; 0x5be4 <read_external_eeprom+0x110>
    5bf4:	80 93 0e 25 	sts	0x250E, r24	; 0x80250e <counters+0x2a>
    5bf8:	90 93 0f 25 	sts	0x250F, r25	; 0x80250f <counters+0x2b>
    5bfc:	87 ea       	ldi	r24, 0xA7	; 167
    5bfe:	91 e6       	ldi	r25, 0x61	; 97
    5c00:	01 97       	sbiw	r24, 0x01	; 1
    5c02:	f1 f7       	brne	.-4      	; 0x5c00 <read_external_eeprom+0x12c>
    5c04:	00 c0       	rjmp	.+0      	; 0x5c06 <read_external_eeprom+0x132>
    5c06:	00 00       	nop
		counters.i2c_error_counter++;
	}
	
	_delay_ms(5);
	
	counters.i2c_error_counter = 0;
    5c08:	10 92 0e 25 	sts	0x250E, r1	; 0x80250e <counters+0x2a>
    5c0c:	10 92 0f 25 	sts	0x250F, r1	; 0x80250f <counters+0x2b>
	
	TWI_MasterRead(&twiMasterForEEPROM, eepromAddress, 1);
    5c10:	41 e0       	ldi	r20, 0x01	; 1
    5c12:	6d 2d       	mov	r22, r13
    5c14:	84 e5       	ldi	r24, 0x54	; 84
    5c16:	95 e2       	ldi	r25, 0x25	; 37
    5c18:	0e 94 7f 33 	call	0x66fe	; 0x66fe <TWI_MasterRead>
    5c1c:	9f e7       	ldi	r25, 0x7F	; 127
    5c1e:	e8 e3       	ldi	r30, 0x38	; 56
    5c20:	f1 e0       	ldi	r31, 0x01	; 1
    5c22:	91 50       	subi	r25, 0x01	; 1
    5c24:	e0 40       	sbci	r30, 0x00	; 0
    5c26:	f0 40       	sbci	r31, 0x00	; 0
    5c28:	e1 f7       	brne	.-8      	; 0x5c22 <read_external_eeprom+0x14e>
    5c2a:	00 c0       	rjmp	.+0      	; 0x5c2c <read_external_eeprom+0x158>
    5c2c:	00 00       	nop
    5c2e:	80 91 0e 25 	lds	r24, 0x250E	; 0x80250e <counters+0x2a>
    5c32:	90 91 0f 25 	lds	r25, 0x250F	; 0x80250f <counters+0x2b>
    5c36:	04 c0       	rjmp	.+8      	; 0x5c40 <read_external_eeprom+0x16c>
	_delay_ms(20);
	
	while(twi->status != TWIM_STATUS_READY)
	{
		if (counters.i2c_error_counter > 20)
    5c38:	85 31       	cpi	r24, 0x15	; 21
    5c3a:	91 05       	cpc	r25, r1
    5c3c:	28 f4       	brcc	.+10     	; 0x5c48 <read_external_eeprom+0x174>
		{
			break;
		}
		counters.i2c_error_counter++;
    5c3e:	01 96       	adiw	r24, 0x01	; 1
	counters.i2c_error_counter = 0;
	
	TWI_MasterRead(&twiMasterForEEPROM, eepromAddress, 1);
	_delay_ms(20);
	
	while(twi->status != TWIM_STATUS_READY)
    5c40:	f7 01       	movw	r30, r14
    5c42:	21 ad       	ldd	r18, Z+57	; 0x39
    5c44:	21 11       	cpse	r18, r1
    5c46:	f8 cf       	rjmp	.-16     	; 0x5c38 <read_external_eeprom+0x164>
    5c48:	80 93 0e 25 	sts	0x250E, r24	; 0x80250e <counters+0x2a>
    5c4c:	90 93 0f 25 	sts	0x250F, r25	; 0x80250f <counters+0x2b>
    5c50:	87 ea       	ldi	r24, 0xA7	; 167
    5c52:	91 e6       	ldi	r25, 0x61	; 97
    5c54:	01 97       	sbiw	r24, 0x01	; 1
    5c56:	f1 f7       	brne	.-4      	; 0x5c54 <read_external_eeprom+0x180>
    5c58:	00 c0       	rjmp	.+0      	; 0x5c5a <read_external_eeprom+0x186>
    5c5a:	00 00       	nop
		counters.i2c_error_counter++;
	}
	
	_delay_ms(5);
	
	counters.i2c_error_counter = 0;
    5c5c:	10 92 0e 25 	sts	0x250E, r1	; 0x80250e <counters+0x2a>
    5c60:	10 92 0f 25 	sts	0x250F, r1	; 0x80250f <counters+0x2b>
	
	received_data |= twi->readData[0];
    5c64:	f7 01       	movw	r30, r14
    5c66:	84 8d       	ldd	r24, Z+28	; 0x1c
	
	return received_data;
    5c68:	98 01       	movw	r18, r16
    5c6a:	28 2b       	or	r18, r24
    5c6c:	c9 01       	movw	r24, r18
}
    5c6e:	28 96       	adiw	r28, 0x08	; 8
    5c70:	cd bf       	out	0x3d, r28	; 61
    5c72:	de bf       	out	0x3e, r29	; 62
    5c74:	df 91       	pop	r29
    5c76:	cf 91       	pop	r28
    5c78:	1f 91       	pop	r17
    5c7a:	0f 91       	pop	r16
    5c7c:	ff 90       	pop	r15
    5c7e:	ef 90       	pop	r14
    5c80:	df 90       	pop	r13
    5c82:	08 95       	ret

00005c84 <set_current>:
		output->isChanelused1 = TRUE;
	}
}

void set_current(OutputState *output) 
{
    5c84:	6f 92       	push	r6
    5c86:	7f 92       	push	r7
    5c88:	8f 92       	push	r8
    5c8a:	9f 92       	push	r9
    5c8c:	af 92       	push	r10
    5c8e:	bf 92       	push	r11
    5c90:	cf 92       	push	r12
    5c92:	df 92       	push	r13
    5c94:	ef 92       	push	r14
    5c96:	ff 92       	push	r15
    5c98:	0f 93       	push	r16
    5c9a:	1f 93       	push	r17
    5c9c:	cf 93       	push	r28
    5c9e:	df 93       	push	r29
    5ca0:	00 d0       	rcall	.+0      	; 0x5ca2 <set_current+0x1e>
    5ca2:	00 d0       	rcall	.+0      	; 0x5ca4 <set_current+0x20>
    5ca4:	cd b7       	in	r28, 0x3d	; 61
    5ca6:	de b7       	in	r29, 0x3e	; 62
    5ca8:	8c 01       	movw	r16, r24
	//read_current_and_voltage(output);
	
	int volatile desired_current = MIN(output->target_current * output->reduced_current_fraction, output->max_current);
    5caa:	fc 01       	movw	r30, r24
    5cac:	60 89       	ldd	r22, Z+16	; 0x10
    5cae:	71 89       	ldd	r23, Z+17	; 0x11
    5cb0:	80 e0       	ldi	r24, 0x00	; 0
    5cb2:	90 e0       	ldi	r25, 0x00	; 0
    5cb4:	0e 94 e4 35 	call	0x6bc8	; 0x6bc8 <__floatunsisf>
    5cb8:	f8 01       	movw	r30, r16
    5cba:	23 a1       	ldd	r18, Z+35	; 0x23
    5cbc:	34 a1       	ldd	r19, Z+36	; 0x24
    5cbe:	45 a1       	ldd	r20, Z+37	; 0x25
    5cc0:	56 a1       	ldd	r21, Z+38	; 0x26
    5cc2:	0e 94 f3 36 	call	0x6de6	; 0x6de6 <__mulsf3>
    5cc6:	4b 01       	movw	r8, r22
    5cc8:	5c 01       	movw	r10, r24
    5cca:	f8 01       	movw	r30, r16
    5ccc:	c2 88       	ldd	r12, Z+18	; 0x12
    5cce:	d3 88       	ldd	r13, Z+19	; 0x13
    5cd0:	b6 01       	movw	r22, r12
    5cd2:	80 e0       	ldi	r24, 0x00	; 0
    5cd4:	90 e0       	ldi	r25, 0x00	; 0
    5cd6:	0e 94 e4 35 	call	0x6bc8	; 0x6bc8 <__floatunsisf>
    5cda:	9b 01       	movw	r18, r22
    5cdc:	ac 01       	movw	r20, r24
    5cde:	c5 01       	movw	r24, r10
    5ce0:	b4 01       	movw	r22, r8
    5ce2:	0e 94 37 35 	call	0x6a6e	; 0x6a6e <__cmpsf2>
    5ce6:	87 ff       	sbrs	r24, 7
    5ce8:	05 c0       	rjmp	.+10     	; 0x5cf4 <set_current+0x70>
    5cea:	c5 01       	movw	r24, r10
    5cec:	b4 01       	movw	r22, r8
    5cee:	0e 94 ae 35 	call	0x6b5c	; 0x6b5c <__fixsfsi>
    5cf2:	01 c0       	rjmp	.+2      	; 0x5cf6 <set_current+0x72>
    5cf4:	b6 01       	movw	r22, r12
    5cf6:	6b 83       	std	Y+3, r22	; 0x03
    5cf8:	7c 83       	std	Y+4, r23	; 0x04
	
	uint16_t present_voltage = output->voltage;
    5cfa:	f8 01       	movw	r30, r16
    5cfc:	a0 8c       	ldd	r10, Z+24	; 0x18
    5cfe:	b1 8c       	ldd	r11, Z+25	; 0x19
	
	int volatile present_current = output->current;
    5d00:	86 89       	ldd	r24, Z+22	; 0x16
    5d02:	97 89       	ldd	r25, Z+23	; 0x17
    5d04:	89 83       	std	Y+1, r24	; 0x01
    5d06:	9a 83       	std	Y+2, r25	; 0x02
	
	int dac_start_value = 0;
	
	//**************************************************
	wdt_reset(); // WATCH DOG TIMER RESET
    5d08:	a8 95       	wdr
	//**************************************************
	
	/* max current has been hit */
	if(present_current > output->max_current-10 && desired_current > present_current)
    5d0a:	89 81       	ldd	r24, Y+1	; 0x01
    5d0c:	9a 81       	ldd	r25, Y+2	; 0x02
    5d0e:	fa e0       	ldi	r31, 0x0A	; 10
    5d10:	cf 1a       	sub	r12, r31
    5d12:	d1 08       	sbc	r13, r1
    5d14:	c8 16       	cp	r12, r24
    5d16:	d9 06       	cpc	r13, r25
    5d18:	58 f4       	brcc	.+22     	; 0x5d30 <set_current+0xac>
    5d1a:	2b 81       	ldd	r18, Y+3	; 0x03
    5d1c:	3c 81       	ldd	r19, Y+4	; 0x04
    5d1e:	89 81       	ldd	r24, Y+1	; 0x01
    5d20:	9a 81       	ldd	r25, Y+2	; 0x02
    5d22:	82 17       	cp	r24, r18
    5d24:	93 07       	cpc	r25, r19
    5d26:	24 f4       	brge	.+8      	; 0x5d30 <set_current+0xac>
	{
		output->hit_max_current = TRUE;
    5d28:	81 e0       	ldi	r24, 0x01	; 1
    5d2a:	f8 01       	movw	r30, r16
    5d2c:	85 83       	std	Z+5, r24	; 0x05
		return;
    5d2e:	bc c0       	rjmp	.+376    	; 0x5ea8 <set_current+0x224>
	}
	else
	{
		output->hit_max_current = FALSE;
    5d30:	f8 01       	movw	r30, r16
    5d32:	15 82       	std	Z+5, r1	; 0x05
	}
	
	/* min current has been hit */
	if(desired_current <= present_current - 10 && present_voltage < 30 && !(output->voltage < 700))
    5d34:	89 81       	ldd	r24, Y+1	; 0x01
    5d36:	9a 81       	ldd	r25, Y+2	; 0x02
    5d38:	8b 81       	ldd	r24, Y+3	; 0x03
    5d3a:	9c 81       	ldd	r25, Y+4	; 0x04
		output->hit_min_current = TRUE;
		//return;
	}
	else
	{
		output->hit_min_current = FALSE;
    5d3c:	16 82       	std	Z+6, r1	; 0x06
	}
	
	/* max voltage has been hit */
	if(desired_current > present_current && present_voltage > output->max_voltage - 300 && present_current > 1)
    5d3e:	2b 81       	ldd	r18, Y+3	; 0x03
    5d40:	3c 81       	ldd	r19, Y+4	; 0x04
    5d42:	89 81       	ldd	r24, Y+1	; 0x01
    5d44:	9a 81       	ldd	r25, Y+2	; 0x02
    5d46:	82 17       	cp	r24, r18
    5d48:	93 07       	cpc	r25, r19
    5d4a:	74 f4       	brge	.+28     	; 0x5d68 <set_current+0xe4>
    5d4c:	84 89       	ldd	r24, Z+20	; 0x14
    5d4e:	95 89       	ldd	r25, Z+21	; 0x15
    5d50:	8c 52       	subi	r24, 0x2C	; 44
    5d52:	91 40       	sbci	r25, 0x01	; 1
    5d54:	8a 15       	cp	r24, r10
    5d56:	9b 05       	cpc	r25, r11
    5d58:	38 f4       	brcc	.+14     	; 0x5d68 <set_current+0xe4>
    5d5a:	89 81       	ldd	r24, Y+1	; 0x01
    5d5c:	9a 81       	ldd	r25, Y+2	; 0x02
    5d5e:	02 97       	sbiw	r24, 0x02	; 2
    5d60:	1c f0       	brlt	.+6      	; 0x5d68 <set_current+0xe4>
	{
		output->hit_max_voltage = TRUE;
    5d62:	81 e0       	ldi	r24, 0x01	; 1
    5d64:	87 83       	std	Z+7, r24	; 0x07
		return;
    5d66:	a0 c0       	rjmp	.+320    	; 0x5ea8 <set_current+0x224>
	}
	else
	{
		output->hit_max_voltage = FALSE;
    5d68:	f8 01       	movw	r30, r16
    5d6a:	17 82       	std	Z+7, r1	; 0x07
	}
	
	if (desired_current == 0)
    5d6c:	8b 81       	ldd	r24, Y+3	; 0x03
    5d6e:	9c 81       	ldd	r25, Y+4	; 0x04
    5d70:	89 2b       	or	r24, r25
    5d72:	19 f4       	brne	.+6      	; 0x5d7a <set_current+0xf6>
	{
		output->pwm_value = 0;
    5d74:	12 8e       	std	Z+26, r1	; 0x1a
    5d76:	13 8e       	std	Z+27, r1	; 0x1b
    5d78:	8f c0       	rjmp	.+286    	; 0x5e98 <set_current+0x214>
		output->dac_value = 0;
		return;
	}
	
	if (abs(desired_current - present_current) <= MIN_ACCURACY)
    5d7a:	8b 81       	ldd	r24, Y+3	; 0x03
    5d7c:	9c 81       	ldd	r25, Y+4	; 0x04
    5d7e:	29 81       	ldd	r18, Y+1	; 0x01
    5d80:	3a 81       	ldd	r19, Y+2	; 0x02
    5d82:	82 1b       	sub	r24, r18
    5d84:	93 0b       	sbc	r25, r19
    5d86:	97 ff       	sbrs	r25, 7
    5d88:	03 c0       	rjmp	.+6      	; 0x5d90 <set_current+0x10c>
    5d8a:	91 95       	neg	r25
    5d8c:	81 95       	neg	r24
    5d8e:	91 09       	sbc	r25, r1
    5d90:	02 97       	sbiw	r24, 0x02	; 2
    5d92:	0c f4       	brge	.+2      	; 0x5d96 <set_current+0x112>
    5d94:	89 c0       	rjmp	.+274    	; 0x5ea8 <set_current+0x224>
	{
		return;
	}
	
	//**************************************************
	wdt_reset(); // WATCH DOG TIMER RESET
    5d96:	a8 95       	wdr
	//**************************************************
	
	uint16_t pwm_eeprom_start_address;
	
	if (program_state.program == THIRTY_EIGHT)
    5d98:	80 91 e8 23 	lds	r24, 0x23E8	; 0x8023e8 <program_state+0x4>
    5d9c:	81 11       	cpse	r24, r1
    5d9e:	09 c0       	rjmp	.+18     	; 0x5db2 <set_current+0x12e>
	{
		set_current_thirty_eight(output);
    5da0:	c8 01       	movw	r24, r16
    5da2:	0e 94 28 2d 	call	0x5a50	; 0x5a50 <set_current_thirty_eight>
		pwm_eeprom_start_address = 0;
    5da6:	e1 2c       	mov	r14, r1
    5da8:	f1 2c       	mov	r15, r1
		
		dac_start_value = 120;
    5daa:	78 e7       	ldi	r23, 0x78	; 120
    5dac:	c7 2e       	mov	r12, r23
    5dae:	d1 2c       	mov	r13, r1
    5db0:	28 c0       	rjmp	.+80     	; 0x5e02 <set_current+0x17e>
	}
	else if (program_state.program == FOURTY_ONE_DUAL)
    5db2:	82 30       	cpi	r24, 0x02	; 2
    5db4:	81 f4       	brne	.+32     	; 0x5dd6 <set_current+0x152>
	{
		set_current_fourty_two_2(output, desired_current);
    5db6:	6b 81       	ldd	r22, Y+3	; 0x03
    5db8:	7c 81       	ldd	r23, Y+4	; 0x04
    5dba:	c8 01       	movw	r24, r16
    5dbc:	0e 94 5e 2d 	call	0x5abc	; 0x5abc <set_current_fourty_two_2>
		if (output->id == output_one.id)
    5dc0:	f8 01       	movw	r30, r16
    5dc2:	90 81       	ld	r25, Z
    5dc4:	80 91 a3 24 	lds	r24, 0x24A3	; 0x8024a3 <output_one>
    5dc8:	98 17       	cp	r25, r24
    5dca:	89 f0       	breq	.+34     	; 0x5dee <set_current+0x16a>
		{
			pwm_eeprom_start_address = 420;
		}
		else
		{
			pwm_eeprom_start_address = 940;
    5dcc:	6c ea       	ldi	r22, 0xAC	; 172
    5dce:	e6 2e       	mov	r14, r22
    5dd0:	63 e0       	ldi	r22, 0x03	; 3
    5dd2:	f6 2e       	mov	r15, r22
    5dd4:	10 c0       	rjmp	.+32     	; 0x5df6 <set_current+0x172>
		}
		
		dac_start_value = 100;
	}
	else if (program_state.program == FOURTY_ONE)
    5dd6:	81 30       	cpi	r24, 0x01	; 1
    5dd8:	91 f4       	brne	.+36     	; 0x5dfe <set_current+0x17a>
	{
		set_current_fourty_two_1(output, desired_current);
    5dda:	6b 81       	ldd	r22, Y+3	; 0x03
    5ddc:	7c 81       	ldd	r23, Y+4	; 0x04
    5dde:	c8 01       	movw	r24, r16
    5de0:	0e 94 32 2d 	call	0x5a64	; 0x5a64 <set_current_fourty_two_1>
		pwm_eeprom_start_address = 1460;
    5de4:	54 eb       	ldi	r21, 0xB4	; 180
    5de6:	e5 2e       	mov	r14, r21
    5de8:	55 e0       	ldi	r21, 0x05	; 5
    5dea:	f5 2e       	mov	r15, r21
    5dec:	04 c0       	rjmp	.+8      	; 0x5df6 <set_current+0x172>
	else if (program_state.program == FOURTY_ONE_DUAL)
	{
		set_current_fourty_two_2(output, desired_current);
		if (output->id == output_one.id)
		{
			pwm_eeprom_start_address = 420;
    5dee:	44 ea       	ldi	r20, 0xA4	; 164
    5df0:	e4 2e       	mov	r14, r20
    5df2:	ff 24       	eor	r15, r15
    5df4:	f3 94       	inc	r15
		else
		{
			pwm_eeprom_start_address = 940;
		}
		
		dac_start_value = 100;
    5df6:	34 e6       	ldi	r19, 0x64	; 100
    5df8:	c3 2e       	mov	r12, r19
    5dfa:	d1 2c       	mov	r13, r1
    5dfc:	02 c0       	rjmp	.+4      	; 0x5e02 <set_current+0x17e>
	
	uint16_t present_voltage = output->voltage;
	
	int volatile present_current = output->current;
	
	int dac_start_value = 0;
    5dfe:	c1 2c       	mov	r12, r1
    5e00:	d1 2c       	mov	r13, r1
		pwm_eeprom_start_address = 1460;
		
		dac_start_value = 100;
	}
	
	uint16_t pwm_eeprom_address = pwm_eeprom_start_address + desired_current / 5;
    5e02:	8b 81       	ldd	r24, Y+3	; 0x03
    5e04:	9c 81       	ldd	r25, Y+4	; 0x04
	uint16_t value_to_assemble = 0;
	
	value_to_assemble = read_external_eeprom(&twiMasterForEEPROM, EXTERNAL_EEPROM_ADDR, pwm_eeprom_address);
    5e06:	25 e0       	ldi	r18, 0x05	; 5
    5e08:	82 2e       	mov	r8, r18
    5e0a:	91 2c       	mov	r9, r1
    5e0c:	b4 01       	movw	r22, r8
    5e0e:	0e 94 e8 37 	call	0x6fd0	; 0x6fd0 <__divmodhi4>
    5e12:	ab 01       	movw	r20, r22
    5e14:	4e 0d       	add	r20, r14
    5e16:	5f 1d       	adc	r21, r15
    5e18:	61 e5       	ldi	r22, 0x51	; 81
    5e1a:	84 e5       	ldi	r24, 0x54	; 84
    5e1c:	95 e2       	ldi	r25, 0x25	; 37
    5e1e:	0e 94 6a 2d 	call	0x5ad4	; 0x5ad4 <read_external_eeprom>
    5e22:	3c 01       	movw	r6, r24
	
	if (desired_current < dac_start_value)
    5e24:	8b 81       	ldd	r24, Y+3	; 0x03
    5e26:	9c 81       	ldd	r25, Y+4	; 0x04
    5e28:	8c 15       	cp	r24, r12
    5e2a:	9d 05       	cpc	r25, r13
    5e2c:	c4 f5       	brge	.+112    	; 0x5e9e <set_current+0x21a>
	{
		uint16_t pwm_eeprom_address2 = pwm_eeprom_start_address + dac_start_value / 5;
		
		output->pwm_value = read_external_eeprom(&twiMasterForEEPROM, EXTERNAL_EEPROM_ADDR, pwm_eeprom_address2);
    5e2e:	c6 01       	movw	r24, r12
    5e30:	b4 01       	movw	r22, r8
    5e32:	0e 94 e8 37 	call	0x6fd0	; 0x6fd0 <__divmodhi4>
    5e36:	ab 01       	movw	r20, r22
    5e38:	4e 0d       	add	r20, r14
    5e3a:	5f 1d       	adc	r21, r15
    5e3c:	61 e5       	ldi	r22, 0x51	; 81
    5e3e:	84 e5       	ldi	r24, 0x54	; 84
    5e40:	95 e2       	ldi	r25, 0x25	; 37
    5e42:	0e 94 6a 2d 	call	0x5ad4	; 0x5ad4 <read_external_eeprom>
    5e46:	f8 01       	movw	r30, r16
    5e48:	82 8f       	std	Z+26, r24	; 0x1a
    5e4a:	93 8f       	std	Z+27, r25	; 0x1b
		
		//---------------------------------------------------------setting current to 1A ^
		
		//---------------------------------------------------------setting dac
		if (output->voltage < 700 && !(desired_current <= present_current - 10 && present_voltage < 30))
    5e4c:	80 8d       	ldd	r24, Z+24	; 0x18
    5e4e:	91 8d       	ldd	r25, Z+25	; 0x19
    5e50:	8c 3b       	cpi	r24, 0xBC	; 188
    5e52:	92 40       	sbci	r25, 0x02	; 2
    5e54:	88 f4       	brcc	.+34     	; 0x5e78 <set_current+0x1f4>
    5e56:	89 81       	ldd	r24, Y+1	; 0x01
    5e58:	9a 81       	ldd	r25, Y+2	; 0x02
    5e5a:	2b 81       	ldd	r18, Y+3	; 0x03
    5e5c:	3c 81       	ldd	r19, Y+4	; 0x04
    5e5e:	09 97       	sbiw	r24, 0x09	; 9
    5e60:	28 17       	cp	r18, r24
    5e62:	39 07       	cpc	r19, r25
    5e64:	24 f4       	brge	.+8      	; 0x5e6e <set_current+0x1ea>
    5e66:	2e e1       	ldi	r18, 0x1E	; 30
    5e68:	a2 16       	cp	r10, r18
    5e6a:	b1 04       	cpc	r11, r1
    5e6c:	28 f0       	brcs	.+10     	; 0x5e78 <set_current+0x1f4>
		{
			output->hit_min_current = FALSE;
    5e6e:	f8 01       	movw	r30, r16
    5e70:	16 82       	std	Z+6, r1	; 0x06
			output->dac_value = value_to_assemble;
    5e72:	64 8e       	std	Z+28, r6	; 0x1c
    5e74:	75 8e       	std	Z+29, r7	; 0x1d
    5e76:	18 c0       	rjmp	.+48     	; 0x5ea8 <set_current+0x224>
		}
		else
		{
			output->hit_min_current = TRUE;
    5e78:	81 e0       	ldi	r24, 0x01	; 1
    5e7a:	f8 01       	movw	r30, r16
    5e7c:	86 83       	std	Z+6, r24	; 0x06
			if (!(desired_current <= present_current - 10 && present_voltage < 30))
    5e7e:	89 81       	ldd	r24, Y+1	; 0x01
    5e80:	9a 81       	ldd	r25, Y+2	; 0x02
    5e82:	2b 81       	ldd	r18, Y+3	; 0x03
    5e84:	3c 81       	ldd	r19, Y+4	; 0x04
    5e86:	09 97       	sbiw	r24, 0x09	; 9
    5e88:	28 17       	cp	r18, r24
    5e8a:	39 07       	cpc	r19, r25
    5e8c:	24 f4       	brge	.+8      	; 0x5e96 <set_current+0x212>
    5e8e:	fe e1       	ldi	r31, 0x1E	; 30
    5e90:	af 16       	cp	r10, r31
    5e92:	b1 04       	cpc	r11, r1
    5e94:	48 f0       	brcs	.+18     	; 0x5ea8 <set_current+0x224>
			{
				output->dac_value = 0;
    5e96:	f8 01       	movw	r30, r16
    5e98:	14 8e       	std	Z+28, r1	; 0x1c
    5e9a:	15 8e       	std	Z+29, r1	; 0x1d
    5e9c:	05 c0       	rjmp	.+10     	; 0x5ea8 <set_current+0x224>
			}
		}
	}
	else
	{
		output->dac_value = 0;
    5e9e:	f8 01       	movw	r30, r16
    5ea0:	14 8e       	std	Z+28, r1	; 0x1c
    5ea2:	15 8e       	std	Z+29, r1	; 0x1d
		output->pwm_value = value_to_assemble;
    5ea4:	62 8e       	std	Z+26, r6	; 0x1a
    5ea6:	73 8e       	std	Z+27, r7	; 0x1b
	}
}
    5ea8:	24 96       	adiw	r28, 0x04	; 4
    5eaa:	cd bf       	out	0x3d, r28	; 61
    5eac:	de bf       	out	0x3e, r29	; 62
    5eae:	df 91       	pop	r29
    5eb0:	cf 91       	pop	r28
    5eb2:	1f 91       	pop	r17
    5eb4:	0f 91       	pop	r16
    5eb6:	ff 90       	pop	r15
    5eb8:	ef 90       	pop	r14
    5eba:	df 90       	pop	r13
    5ebc:	cf 90       	pop	r12
    5ebe:	bf 90       	pop	r11
    5ec0:	af 90       	pop	r10
    5ec2:	9f 90       	pop	r9
    5ec4:	8f 90       	pop	r8
    5ec6:	7f 90       	pop	r7
    5ec8:	6f 90       	pop	r6
    5eca:	08 95       	ret

00005ecc <set_current_calibrate>:

void set_current_calibrate(OutputState *output, bool using_formula) 
{
    5ecc:	4f 92       	push	r4
    5ece:	5f 92       	push	r5
    5ed0:	6f 92       	push	r6
    5ed2:	7f 92       	push	r7
    5ed4:	bf 92       	push	r11
    5ed6:	cf 92       	push	r12
    5ed8:	df 92       	push	r13
    5eda:	ef 92       	push	r14
    5edc:	ff 92       	push	r15
    5ede:	0f 93       	push	r16
    5ee0:	1f 93       	push	r17
    5ee2:	cf 93       	push	r28
    5ee4:	df 93       	push	r29
    5ee6:	cd b7       	in	r28, 0x3d	; 61
    5ee8:	de b7       	in	r29, 0x3e	; 62
    5eea:	28 97       	sbiw	r28, 0x08	; 8
    5eec:	cd bf       	out	0x3d, r28	; 61
    5eee:	de bf       	out	0x3e, r29	; 62
    5ef0:	8c 01       	movw	r16, r24
    5ef2:	b6 2e       	mov	r11, r22
	read_current_and_voltage(output);
    5ef4:	0e 94 3b 1c 	call	0x3876	; 0x3876 <read_current_and_voltage>
	
	//**************************************************
	wdt_reset(); // WATCH DOG TIMER RESET
    5ef8:	a8 95       	wdr
    5efa:	2f e7       	ldi	r18, 0x7F	; 127
    5efc:	8a e1       	ldi	r24, 0x1A	; 26
    5efe:	96 e0       	ldi	r25, 0x06	; 6
    5f00:	21 50       	subi	r18, 0x01	; 1
    5f02:	80 40       	sbci	r24, 0x00	; 0
    5f04:	90 40       	sbci	r25, 0x00	; 0
    5f06:	e1 f7       	brne	.-8      	; 0x5f00 <set_current_calibrate+0x34>
    5f08:	00 c0       	rjmp	.+0      	; 0x5f0a <set_current_calibrate+0x3e>
    5f0a:	00 00       	nop
	
	_delay_ms(100);
	
	int dac_start_value = 0;
	
	int volatile desired_current = MIN(output->target_current * output->reduced_current_fraction, output->max_current);
    5f0c:	d8 01       	movw	r26, r16
    5f0e:	50 96       	adiw	r26, 0x10	; 16
    5f10:	6d 91       	ld	r22, X+
    5f12:	7c 91       	ld	r23, X
    5f14:	51 97       	sbiw	r26, 0x11	; 17
    5f16:	80 e0       	ldi	r24, 0x00	; 0
    5f18:	90 e0       	ldi	r25, 0x00	; 0
    5f1a:	0e 94 e4 35 	call	0x6bc8	; 0x6bc8 <__floatunsisf>
    5f1e:	f8 01       	movw	r30, r16
    5f20:	23 a1       	ldd	r18, Z+35	; 0x23
    5f22:	34 a1       	ldd	r19, Z+36	; 0x24
    5f24:	45 a1       	ldd	r20, Z+37	; 0x25
    5f26:	56 a1       	ldd	r21, Z+38	; 0x26
    5f28:	0e 94 f3 36 	call	0x6de6	; 0x6de6 <__mulsf3>
    5f2c:	2b 01       	movw	r4, r22
    5f2e:	3c 01       	movw	r6, r24
    5f30:	d8 01       	movw	r26, r16
    5f32:	52 96       	adiw	r26, 0x12	; 18
    5f34:	cd 90       	ld	r12, X+
    5f36:	dc 90       	ld	r13, X
    5f38:	53 97       	sbiw	r26, 0x13	; 19
    5f3a:	b6 01       	movw	r22, r12
    5f3c:	80 e0       	ldi	r24, 0x00	; 0
    5f3e:	90 e0       	ldi	r25, 0x00	; 0
    5f40:	0e 94 e4 35 	call	0x6bc8	; 0x6bc8 <__floatunsisf>
    5f44:	9b 01       	movw	r18, r22
    5f46:	ac 01       	movw	r20, r24
    5f48:	c3 01       	movw	r24, r6
    5f4a:	b2 01       	movw	r22, r4
    5f4c:	0e 94 37 35 	call	0x6a6e	; 0x6a6e <__cmpsf2>
    5f50:	87 ff       	sbrs	r24, 7
    5f52:	05 c0       	rjmp	.+10     	; 0x5f5e <set_current_calibrate+0x92>
    5f54:	c3 01       	movw	r24, r6
    5f56:	b2 01       	movw	r22, r4
    5f58:	0e 94 ae 35 	call	0x6b5c	; 0x6b5c <__fixsfsi>
    5f5c:	01 c0       	rjmp	.+2      	; 0x5f60 <set_current_calibrate+0x94>
    5f5e:	b6 01       	movw	r22, r12
    5f60:	6f 83       	std	Y+7, r22	; 0x07
    5f62:	78 87       	std	Y+8, r23	; 0x08
	
	int volatile present_current = output->current;
    5f64:	f8 01       	movw	r30, r16
    5f66:	86 89       	ldd	r24, Z+22	; 0x16
    5f68:	97 89       	ldd	r25, Z+23	; 0x17
    5f6a:	8d 83       	std	Y+5, r24	; 0x05
    5f6c:	9e 83       	std	Y+6, r25	; 0x06
	
	if (abs(desired_current - present_current) < MIN_ACCURACY)
    5f6e:	2f 81       	ldd	r18, Y+7	; 0x07
    5f70:	38 85       	ldd	r19, Y+8	; 0x08
    5f72:	8d 81       	ldd	r24, Y+5	; 0x05
    5f74:	9e 81       	ldd	r25, Y+6	; 0x06
    5f76:	28 17       	cp	r18, r24
    5f78:	39 07       	cpc	r19, r25
    5f7a:	89 f0       	breq	.+34     	; 0x5f9e <set_current_calibrate+0xd2>
			return;
		}
	}
	
	//**************************************************
	wdt_reset(); // WATCH DOG TIMER RESET
    5f7c:	a8 95       	wdr
	//**************************************************
	
	if (program_state.program == THIRTY_EIGHT)
    5f7e:	20 91 e8 23 	lds	r18, 0x23E8	; 0x8023e8 <program_state+0x4>
    5f82:	21 11       	cpse	r18, r1
    5f84:	28 c0       	rjmp	.+80     	; 0x5fd6 <set_current_calibrate+0x10a>
	{
		output_one.isChanelused1 = TRUE;
    5f86:	81 e0       	ldi	r24, 0x01	; 1
    5f88:	80 93 ce 24 	sts	0x24CE, r24	; 0x8024ce <output_one+0x2b>
		output_one.isChanelused2 = FALSE;
    5f8c:	10 92 cf 24 	sts	0x24CF, r1	; 0x8024cf <output_one+0x2c>
		output_two.isChanelused1 = FALSE;
    5f90:	10 92 4c 24 	sts	0x244C, r1	; 0x80244c <output_two+0x2b>
		output_two.isChanelused2 = FALSE;
    5f94:	10 92 4d 24 	sts	0x244D, r1	; 0x80244d <output_two+0x2c>
		
		dac_start_value = 120;
    5f98:	88 e7       	ldi	r24, 0x78	; 120
    5f9a:	90 e0       	ldi	r25, 0x00	; 0
    5f9c:	cd c0       	rjmp	.+410    	; 0x6138 <set_current_calibrate+0x26c>
    5f9e:	73 e0       	ldi	r23, 0x03	; 3
    5fa0:	c7 2e       	mov	r12, r23
    5fa2:	d1 2c       	mov	r13, r1
	if (abs(desired_current - present_current) < MIN_ACCURACY)
	{
		for (int i = 0; i < 3; i++)
		{
			//**************************************************
			wdt_reset(); // WATCH DOG TIMER RESET
    5fa4:	a8 95       	wdr
			//**************************************************
			
			read_current_and_voltage(output);
    5fa6:	c8 01       	movw	r24, r16
    5fa8:	0e 94 3b 1c 	call	0x3876	; 0x3876 <read_current_and_voltage>
    5fac:	ff e7       	ldi	r31, 0x7F	; 127
    5fae:	2a e1       	ldi	r18, 0x1A	; 26
    5fb0:	86 e0       	ldi	r24, 0x06	; 6
    5fb2:	f1 50       	subi	r31, 0x01	; 1
    5fb4:	20 40       	sbci	r18, 0x00	; 0
    5fb6:	80 40       	sbci	r24, 0x00	; 0
    5fb8:	e1 f7       	brne	.-8      	; 0x5fb2 <set_current_calibrate+0xe6>
    5fba:	00 c0       	rjmp	.+0      	; 0x5fbc <set_current_calibrate+0xf0>
    5fbc:	00 00       	nop
    5fbe:	91 e0       	ldi	r25, 0x01	; 1
    5fc0:	c9 1a       	sub	r12, r25
    5fc2:	d1 08       	sbc	r13, r1
	
	int volatile present_current = output->current;
	
	if (abs(desired_current - present_current) < MIN_ACCURACY)
	{
		for (int i = 0; i < 3; i++)
    5fc4:	79 f7       	brne	.-34     	; 0x5fa4 <set_current_calibrate+0xd8>
			
			read_current_and_voltage(output);
			_delay_ms(100);
		}
		
		if (abs(desired_current - present_current) < MIN_ACCURACY)
    5fc6:	2f 81       	ldd	r18, Y+7	; 0x07
    5fc8:	38 85       	ldd	r19, Y+8	; 0x08
    5fca:	8d 81       	ldd	r24, Y+5	; 0x05
    5fcc:	9e 81       	ldd	r25, Y+6	; 0x06
    5fce:	28 17       	cp	r18, r24
    5fd0:	39 07       	cpc	r19, r25
    5fd2:	a1 f6       	brne	.-88     	; 0x5f7c <set_current_calibrate+0xb0>
    5fd4:	24 c2       	rjmp	.+1096   	; 0x641e <set_current_calibrate+0x552>
		output_two.isChanelused1 = FALSE;
		output_two.isChanelused2 = FALSE;
		
		dac_start_value = 120;
	}
	else if (program_state.program == FOURTY_ONE)
    5fd6:	21 30       	cpi	r18, 0x01	; 1
    5fd8:	09 f0       	breq	.+2      	; 0x5fdc <set_current_calibrate+0x110>
    5fda:	86 c0       	rjmp	.+268    	; 0x60e8 <set_current_calibrate+0x21c>
	{
		if (desired_current < 250)
    5fdc:	4f 81       	ldd	r20, Y+7	; 0x07
    5fde:	58 85       	ldd	r21, Y+8	; 0x08
    5fe0:	80 91 ce 24 	lds	r24, 0x24CE	; 0x8024ce <output_one+0x2b>
    5fe4:	4a 3f       	cpi	r20, 0xFA	; 250
    5fe6:	51 05       	cpc	r21, r1
    5fe8:	cc f4       	brge	.+50     	; 0x601c <set_current_calibrate+0x150>
		{
			if (output_one.isChanelused1 && output_one.isChanelused2 && !output_two.isChanelused1 && !output_two.isChanelused2)
    5fea:	88 23       	and	r24, r24
    5fec:	89 f0       	breq	.+34     	; 0x6010 <set_current_calibrate+0x144>
    5fee:	80 91 cf 24 	lds	r24, 0x24CF	; 0x8024cf <output_one+0x2c>
    5ff2:	88 23       	and	r24, r24
    5ff4:	69 f0       	breq	.+26     	; 0x6010 <set_current_calibrate+0x144>
    5ff6:	80 91 4c 24 	lds	r24, 0x244C	; 0x80244c <output_two+0x2b>
    5ffa:	81 11       	cpse	r24, r1
    5ffc:	04 c0       	rjmp	.+8      	; 0x6006 <set_current_calibrate+0x13a>
    5ffe:	80 91 4d 24 	lds	r24, 0x244D	; 0x80244d <output_two+0x2c>
    6002:	81 11       	cpse	r24, r1
    6004:	05 c0       	rjmp	.+10     	; 0x6010 <set_current_calibrate+0x144>
			{
				output->pwm_value = 0;
    6006:	d8 01       	movw	r26, r16
    6008:	5a 96       	adiw	r26, 0x1a	; 26
    600a:	1d 92       	st	X+, r1
    600c:	1c 92       	st	X, r1
    600e:	5b 97       	sbiw	r26, 0x1b	; 27
			}
			else if (output_one.isChanelused1 && output_one.isChanelused2 && output_two.isChanelused1 && output_two.isChanelused2)
			{
				output->pwm_value = 0;
			}
			output_one.isChanelused1 = TRUE;
    6010:	81 e0       	ldi	r24, 0x01	; 1
    6012:	80 93 ce 24 	sts	0x24CE, r24	; 0x8024ce <output_one+0x2b>
			output_one.isChanelused2 = FALSE;
    6016:	10 92 cf 24 	sts	0x24CF, r1	; 0x8024cf <output_one+0x2c>
    601a:	1e c0       	rjmp	.+60     	; 0x6058 <set_current_calibrate+0x18c>
			output_two.isChanelused1 = FALSE;
			output_two.isChanelused2 = FALSE;
		}
		else if (desired_current < 500)
    601c:	4f 81       	ldd	r20, Y+7	; 0x07
    601e:	58 85       	ldd	r21, Y+8	; 0x08
    6020:	44 3f       	cpi	r20, 0xF4	; 244
    6022:	51 40       	sbci	r21, 0x01	; 1
    6024:	e4 f4       	brge	.+56     	; 0x605e <set_current_calibrate+0x192>
		{
			if (output_one.isChanelused1 && output_one.isChanelused2 && output_two.isChanelused1 && !output_two.isChanelused2)
    6026:	88 23       	and	r24, r24
    6028:	91 f0       	breq	.+36     	; 0x604e <set_current_calibrate+0x182>
    602a:	90 91 cf 24 	lds	r25, 0x24CF	; 0x8024cf <output_one+0x2c>
    602e:	80 91 4c 24 	lds	r24, 0x244C	; 0x80244c <output_two+0x2b>
    6032:	99 23       	and	r25, r25
    6034:	31 f0       	breq	.+12     	; 0x6042 <set_current_calibrate+0x176>
    6036:	88 23       	and	r24, r24
    6038:	51 f0       	breq	.+20     	; 0x604e <set_current_calibrate+0x182>
			{
				output->pwm_value = 0;
    603a:	f8 01       	movw	r30, r16
    603c:	12 8e       	std	Z+26, r1	; 0x1a
    603e:	13 8e       	std	Z+27, r1	; 0x1b
    6040:	06 c0       	rjmp	.+12     	; 0x604e <set_current_calibrate+0x182>
			}
			else if (output_one.isChanelused1 && !output_one.isChanelused2 && !output_two.isChanelused1 && !output_two.isChanelused2)
    6042:	81 11       	cpse	r24, r1
    6044:	04 c0       	rjmp	.+8      	; 0x604e <set_current_calibrate+0x182>
    6046:	80 91 4d 24 	lds	r24, 0x244D	; 0x80244d <output_two+0x2c>
    604a:	88 23       	and	r24, r24
    604c:	b1 f3       	breq	.-20     	; 0x603a <set_current_calibrate+0x16e>
			}
			else if (output_one.isChanelused1 && output_one.isChanelused2 && output_two.isChanelused1 && output_two.isChanelused2)
			{
				output->pwm_value = 0;
			}
			output_one.isChanelused1 = TRUE;
    604e:	81 e0       	ldi	r24, 0x01	; 1
    6050:	80 93 ce 24 	sts	0x24CE, r24	; 0x8024ce <output_one+0x2b>
			output_one.isChanelused2 = TRUE;
    6054:	80 93 cf 24 	sts	0x24CF, r24	; 0x8024cf <output_one+0x2c>
			output_two.isChanelused1 = FALSE;
    6058:	10 92 4c 24 	sts	0x244C, r1	; 0x80244c <output_two+0x2b>
    605c:	26 c0       	rjmp	.+76     	; 0x60aa <set_current_calibrate+0x1de>
			output_two.isChanelused2 = FALSE;
		}
		else if (desired_current < 750)
    605e:	4f 81       	ldd	r20, Y+7	; 0x07
    6060:	58 85       	ldd	r21, Y+8	; 0x08
    6062:	4e 3e       	cpi	r20, 0xEE	; 238
    6064:	52 40       	sbci	r21, 0x02	; 2
    6066:	24 f5       	brge	.+72     	; 0x60b0 <set_current_calibrate+0x1e4>
		{
			if (output_one.isChanelused1 && output_one.isChanelused2 && output_two.isChanelused1 && output_two.isChanelused2)
    6068:	88 23       	and	r24, r24
    606a:	c1 f0       	breq	.+48     	; 0x609c <set_current_calibrate+0x1d0>
    606c:	90 91 cf 24 	lds	r25, 0x24CF	; 0x8024cf <output_one+0x2c>
    6070:	80 91 4c 24 	lds	r24, 0x244C	; 0x80244c <output_two+0x2b>
    6074:	99 23       	and	r25, r25
    6076:	61 f0       	breq	.+24     	; 0x6090 <set_current_calibrate+0x1c4>
    6078:	88 23       	and	r24, r24
    607a:	61 f0       	breq	.+24     	; 0x6094 <set_current_calibrate+0x1c8>
    607c:	80 91 4d 24 	lds	r24, 0x244D	; 0x80244d <output_two+0x2c>
    6080:	88 23       	and	r24, r24
    6082:	61 f0       	breq	.+24     	; 0x609c <set_current_calibrate+0x1d0>
			{
				output->pwm_value = 0;
    6084:	d8 01       	movw	r26, r16
    6086:	5a 96       	adiw	r26, 0x1a	; 26
    6088:	1d 92       	st	X+, r1
    608a:	1c 92       	st	X, r1
    608c:	5b 97       	sbiw	r26, 0x1b	; 27
    608e:	06 c0       	rjmp	.+12     	; 0x609c <set_current_calibrate+0x1d0>
			}
			else if (output_one.isChanelused1 && output_one.isChanelused2 && !output_two.isChanelused1 && !output_two.isChanelused2)
			{
				output->pwm_value = 0;
			}
			else if (output_one.isChanelused1 && !output_one.isChanelused2 && !output_two.isChanelused1 && !output_two.isChanelused2)
    6090:	81 11       	cpse	r24, r1
    6092:	04 c0       	rjmp	.+8      	; 0x609c <set_current_calibrate+0x1d0>
    6094:	80 91 4d 24 	lds	r24, 0x244D	; 0x80244d <output_two+0x2c>
    6098:	88 23       	and	r24, r24
    609a:	a1 f3       	breq	.-24     	; 0x6084 <set_current_calibrate+0x1b8>
			{
				output->pwm_value = 0;
			}
			output_one.isChanelused1 = TRUE;
    609c:	81 e0       	ldi	r24, 0x01	; 1
    609e:	80 93 ce 24 	sts	0x24CE, r24	; 0x8024ce <output_one+0x2b>
			output_one.isChanelused2 = TRUE;
    60a2:	80 93 cf 24 	sts	0x24CF, r24	; 0x8024cf <output_one+0x2c>
			output_two.isChanelused1 = TRUE;
    60a6:	80 93 4c 24 	sts	0x244C, r24	; 0x80244c <output_two+0x2b>
			output_two.isChanelused2 = FALSE;
    60aa:	10 92 4d 24 	sts	0x244D, r1	; 0x80244d <output_two+0x2c>
    60ae:	3f c0       	rjmp	.+126    	; 0x612e <set_current_calibrate+0x262>
		}
		else
		{
			if (output_one.isChanelused1 && output_one.isChanelused2 && output_two.isChanelused1 && !output_two.isChanelused2)
    60b0:	88 23       	and	r24, r24
    60b2:	81 f0       	breq	.+32     	; 0x60d4 <set_current_calibrate+0x208>
    60b4:	90 91 cf 24 	lds	r25, 0x24CF	; 0x8024cf <output_one+0x2c>
    60b8:	80 91 4c 24 	lds	r24, 0x244C	; 0x80244c <output_two+0x2b>
    60bc:	99 23       	and	r25, r25
    60be:	41 f0       	breq	.+16     	; 0x60d0 <set_current_calibrate+0x204>
    60c0:	80 91 4d 24 	lds	r24, 0x244D	; 0x80244d <output_two+0x2c>
    60c4:	81 11       	cpse	r24, r1
    60c6:	06 c0       	rjmp	.+12     	; 0x60d4 <set_current_calibrate+0x208>
			{
				output->pwm_value = 0;
    60c8:	f8 01       	movw	r30, r16
    60ca:	12 8e       	std	Z+26, r1	; 0x1a
    60cc:	13 8e       	std	Z+27, r1	; 0x1b
    60ce:	02 c0       	rjmp	.+4      	; 0x60d4 <set_current_calibrate+0x208>
			}
			else if (output_one.isChanelused1 && output_one.isChanelused2 && !output_two.isChanelused1 && !output_two.isChanelused2)
			{
				output->pwm_value = 0;
			}
			else if (output_one.isChanelused1 && !output_one.isChanelused2 && !output_two.isChanelused1 && !output_two.isChanelused2)
    60d0:	88 23       	and	r24, r24
    60d2:	b1 f3       	breq	.-20     	; 0x60c0 <set_current_calibrate+0x1f4>
			{
				output->pwm_value = 0;
			}
			output_one.isChanelused1 = TRUE;
    60d4:	81 e0       	ldi	r24, 0x01	; 1
    60d6:	80 93 ce 24 	sts	0x24CE, r24	; 0x8024ce <output_one+0x2b>
			output_one.isChanelused2 = TRUE;
    60da:	80 93 cf 24 	sts	0x24CF, r24	; 0x8024cf <output_one+0x2c>
			output_two.isChanelused1 = TRUE;
    60de:	80 93 4c 24 	sts	0x244C, r24	; 0x80244c <output_two+0x2b>
			output_two.isChanelused2 = TRUE;
    60e2:	80 93 4d 24 	sts	0x244D, r24	; 0x80244d <output_two+0x2c>
    60e6:	23 c0       	rjmp	.+70     	; 0x612e <set_current_calibrate+0x262>
		}
		
		dac_start_value = 100;
	}
	else if (program_state.program == FOURTY_ONE_DUAL)
    60e8:	22 30       	cpi	r18, 0x02	; 2
    60ea:	21 f5       	brne	.+72     	; 0x6134 <set_current_calibrate+0x268>
	{
		if (desired_current < 500)
    60ec:	4f 81       	ldd	r20, Y+7	; 0x07
    60ee:	58 85       	ldd	r21, Y+8	; 0x08
    60f0:	d8 01       	movw	r26, r16
    60f2:	9c 96       	adiw	r26, 0x2c	; 44
    60f4:	8c 91       	ld	r24, X
    60f6:	44 3f       	cpi	r20, 0xF4	; 244
    60f8:	51 40       	sbci	r21, 0x01	; 1
    60fa:	6c f4       	brge	.+26     	; 0x6116 <set_current_calibrate+0x24a>
		{
			if (output->isChanelused2)
    60fc:	88 23       	and	r24, r24
    60fe:	19 f0       	breq	.+6      	; 0x6106 <set_current_calibrate+0x23a>
			{
				output->pwm_value = 0;
    6100:	f8 01       	movw	r30, r16
    6102:	12 8e       	std	Z+26, r1	; 0x1a
    6104:	13 8e       	std	Z+27, r1	; 0x1b
			}
			output->isChanelused1 = TRUE;
    6106:	81 e0       	ldi	r24, 0x01	; 1
    6108:	d8 01       	movw	r26, r16
    610a:	9b 96       	adiw	r26, 0x2b	; 43
    610c:	8c 93       	st	X, r24
    610e:	9b 97       	sbiw	r26, 0x2b	; 43
			output->isChanelused2 = FALSE;
    6110:	9c 96       	adiw	r26, 0x2c	; 44
    6112:	1c 92       	st	X, r1
    6114:	0c c0       	rjmp	.+24     	; 0x612e <set_current_calibrate+0x262>
		}
		else
		{
			if (!output->isChanelused2)
    6116:	81 11       	cpse	r24, r1
    6118:	03 c0       	rjmp	.+6      	; 0x6120 <set_current_calibrate+0x254>
			{
				output->pwm_value = 0;
    611a:	f8 01       	movw	r30, r16
    611c:	12 8e       	std	Z+26, r1	; 0x1a
    611e:	13 8e       	std	Z+27, r1	; 0x1b
			}
			output->isChanelused2 = TRUE;
    6120:	81 e0       	ldi	r24, 0x01	; 1
    6122:	d8 01       	movw	r26, r16
    6124:	9c 96       	adiw	r26, 0x2c	; 44
    6126:	8c 93       	st	X, r24
    6128:	9c 97       	sbiw	r26, 0x2c	; 44
			output->isChanelused1 = TRUE;
    612a:	9b 96       	adiw	r26, 0x2b	; 43
    612c:	8c 93       	st	X, r24
		}
		
		dac_start_value = 100;
    612e:	84 e6       	ldi	r24, 0x64	; 100
    6130:	90 e0       	ldi	r25, 0x00	; 0
    6132:	02 c0       	rjmp	.+4      	; 0x6138 <set_current_calibrate+0x26c>
	wdt_reset(); // WATCH DOG TIMER RESET
	//**************************************************
	
	_delay_ms(100);
	
	int dac_start_value = 0;
    6134:	80 e0       	ldi	r24, 0x00	; 0
    6136:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		dac_start_value = 100;
	}
	
	if (desired_current == 0)
    6138:	4f 81       	ldd	r20, Y+7	; 0x07
    613a:	58 85       	ldd	r21, Y+8	; 0x08
    613c:	45 2b       	or	r20, r21
    613e:	31 f4       	brne	.+12     	; 0x614c <set_current_calibrate+0x280>
	{
		output->dac_value = 0;
    6140:	f8 01       	movw	r30, r16
    6142:	14 8e       	std	Z+28, r1	; 0x1c
    6144:	15 8e       	std	Z+29, r1	; 0x1d
		output->pwm_value = 0;
    6146:	12 8e       	std	Z+26, r1	; 0x1a
    6148:	13 8e       	std	Z+27, r1	; 0x1b
    614a:	25 c1       	rjmp	.+586    	; 0x6396 <set_current_calibrate+0x4ca>
	}
	else if (desired_current < dac_start_value)
    614c:	4f 81       	ldd	r20, Y+7	; 0x07
    614e:	58 85       	ldd	r21, Y+8	; 0x08
    6150:	48 17       	cp	r20, r24
    6152:	59 07       	cpc	r21, r25
    6154:	0c f0       	brlt	.+2      	; 0x6158 <set_current_calibrate+0x28c>
    6156:	49 c0       	rjmp	.+146    	; 0x61ea <set_current_calibrate+0x31e>
	{
		uint16_t pwm_eeprom_start_address;
		
		if (program_state.program == THIRTY_EIGHT)
    6158:	22 23       	and	r18, r18
    615a:	a1 f0       	breq	.+40     	; 0x6184 <set_current_calibrate+0x2b8>
		{
			pwm_eeprom_start_address = 0;
		}
		else if (program_state.program == FOURTY_ONE_DUAL)
    615c:	22 30       	cpi	r18, 0x02	; 2
    615e:	59 f4       	brne	.+22     	; 0x6176 <set_current_calibrate+0x2aa>
		{
			if (output->id == output_one.id)
    6160:	d8 01       	movw	r26, r16
    6162:	3c 91       	ld	r19, X
    6164:	20 91 a3 24 	lds	r18, 0x24A3	; 0x8024a3 <output_one>
    6168:	32 17       	cp	r19, r18
    616a:	79 f0       	breq	.+30     	; 0x618a <set_current_calibrate+0x2be>
			{
				pwm_eeprom_start_address = 420;
			}
			else
			{
				pwm_eeprom_start_address = 940;
    616c:	6c ea       	ldi	r22, 0xAC	; 172
    616e:	e6 2e       	mov	r14, r22
    6170:	63 e0       	ldi	r22, 0x03	; 3
    6172:	f6 2e       	mov	r15, r22
    6174:	0e c0       	rjmp	.+28     	; 0x6192 <set_current_calibrate+0x2c6>
			}
		}
		else if (program_state.program == FOURTY_ONE)
    6176:	21 30       	cpi	r18, 0x01	; 1
    6178:	61 f4       	brne	.+24     	; 0x6192 <set_current_calibrate+0x2c6>
		{
			pwm_eeprom_start_address = 1460;
    617a:	54 eb       	ldi	r21, 0xB4	; 180
    617c:	e5 2e       	mov	r14, r21
    617e:	55 e0       	ldi	r21, 0x05	; 5
    6180:	f5 2e       	mov	r15, r21
    6182:	07 c0       	rjmp	.+14     	; 0x6192 <set_current_calibrate+0x2c6>
	{
		uint16_t pwm_eeprom_start_address;
		
		if (program_state.program == THIRTY_EIGHT)
		{
			pwm_eeprom_start_address = 0;
    6184:	e1 2c       	mov	r14, r1
    6186:	f1 2c       	mov	r15, r1
    6188:	04 c0       	rjmp	.+8      	; 0x6192 <set_current_calibrate+0x2c6>
		}
		else if (program_state.program == FOURTY_ONE_DUAL)
		{
			if (output->id == output_one.id)
			{
				pwm_eeprom_start_address = 420;
    618a:	44 ea       	ldi	r20, 0xA4	; 164
    618c:	e4 2e       	mov	r14, r20
    618e:	ff 24       	eor	r15, r15
    6190:	f3 94       	inc	r15
		}
		
		uint16_t pwm_eeprom_address = pwm_eeprom_start_address + dac_start_value / 5;
		
		//**************************************************
		wdt_reset(); // WATCH DOG TIMER RESET
    6192:	a8 95       	wdr
		//**************************************************
		
		output->pwm_value = read_external_eeprom(&twiMasterForEEPROM, EXTERNAL_EEPROM_ADDR, pwm_eeprom_address);
    6194:	65 e0       	ldi	r22, 0x05	; 5
    6196:	70 e0       	ldi	r23, 0x00	; 0
    6198:	0e 94 e8 37 	call	0x6fd0	; 0x6fd0 <__divmodhi4>
    619c:	ab 01       	movw	r20, r22
    619e:	4e 0d       	add	r20, r14
    61a0:	5f 1d       	adc	r21, r15
    61a2:	61 e5       	ldi	r22, 0x51	; 81
    61a4:	84 e5       	ldi	r24, 0x54	; 84
    61a6:	95 e2       	ldi	r25, 0x25	; 37
    61a8:	0e 94 6a 2d 	call	0x5ad4	; 0x5ad4 <read_external_eeprom>
    61ac:	f8 01       	movw	r30, r16
    61ae:	82 8f       	std	Z+26, r24	; 0x1a
    61b0:	93 8f       	std	Z+27, r25	; 0x1b
		
		//**************************************************
		wdt_reset(); // WATCH DOG TIMER RESET
    61b2:	a8 95       	wdr
		//**************************************************
		
		//---------------------------------------------------------setting current to 1A ^
		
		//---------------------------------------------------------setting dac
		if (desired_current > present_current)
    61b4:	4f 81       	ldd	r20, Y+7	; 0x07
    61b6:	58 85       	ldd	r21, Y+8	; 0x08
    61b8:	2d 81       	ldd	r18, Y+5	; 0x05
    61ba:	3e 81       	ldd	r19, Y+6	; 0x06
    61bc:	84 8d       	ldd	r24, Z+28	; 0x1c
    61be:	95 8d       	ldd	r25, Z+29	; 0x1d
    61c0:	24 17       	cp	r18, r20
    61c2:	35 07       	cpc	r19, r21
    61c4:	44 f4       	brge	.+16     	; 0x61d6 <set_current_calibrate+0x30a>
		{
			if (output->dac_value >= 50)
    61c6:	82 33       	cpi	r24, 0x32	; 50
    61c8:	91 05       	cpc	r25, r1
    61ca:	08 f4       	brcc	.+2      	; 0x61ce <set_current_calibrate+0x302>
    61cc:	e4 c0       	rjmp	.+456    	; 0x6396 <set_current_calibrate+0x4ca>
			{
				output->dac_value -= 50;
    61ce:	c2 97       	sbiw	r24, 0x32	; 50
    61d0:	84 8f       	std	Z+28, r24	; 0x1c
    61d2:	95 8f       	std	Z+29, r25	; 0x1d
    61d4:	e0 c0       	rjmp	.+448    	; 0x6396 <set_current_calibrate+0x4ca>
			}
		}
		else
		{
			if (output->dac_value < 4000)
    61d6:	80 3a       	cpi	r24, 0xA0	; 160
    61d8:	bf e0       	ldi	r27, 0x0F	; 15
    61da:	9b 07       	cpc	r25, r27
    61dc:	08 f0       	brcs	.+2      	; 0x61e0 <set_current_calibrate+0x314>
    61de:	db c0       	rjmp	.+438    	; 0x6396 <set_current_calibrate+0x4ca>
			{
				output->dac_value += 50;
    61e0:	c2 96       	adiw	r24, 0x32	; 50
    61e2:	f8 01       	movw	r30, r16
    61e4:	84 8f       	std	Z+28, r24	; 0x1c
    61e6:	95 8f       	std	Z+29, r25	; 0x1d
    61e8:	d6 c0       	rjmp	.+428    	; 0x6396 <set_current_calibrate+0x4ca>
			}
		}
	}
	else
	{
		if (desired_current > present_current)
    61ea:	2f 81       	ldd	r18, Y+7	; 0x07
    61ec:	38 85       	ldd	r19, Y+8	; 0x08
    61ee:	8d 81       	ldd	r24, Y+5	; 0x05
    61f0:	9e 81       	ldd	r25, Y+6	; 0x06
    61f2:	d8 01       	movw	r26, r16
    61f4:	5a 96       	adiw	r26, 0x1a	; 26
    61f6:	6d 91       	ld	r22, X+
    61f8:	7c 91       	ld	r23, X
    61fa:	5b 97       	sbiw	r26, 0x1b	; 27
    61fc:	82 17       	cp	r24, r18
    61fe:	93 07       	cpc	r25, r19
    6200:	0c f0       	brlt	.+2      	; 0x6204 <set_current_calibrate+0x338>
    6202:	73 c0       	rjmp	.+230    	; 0x62ea <set_current_calibrate+0x41e>
		{
			if (output->pwm_value < output->power_supply_pwm_max)
    6204:	13 96       	adiw	r26, 0x03	; 3
    6206:	8d 91       	ld	r24, X+
    6208:	9c 91       	ld	r25, X
    620a:	14 97       	sbiw	r26, 0x04	; 4
    620c:	68 17       	cp	r22, r24
    620e:	79 07       	cpc	r23, r25
    6210:	08 f0       	brcs	.+2      	; 0x6214 <set_current_calibrate+0x348>
    6212:	67 c0       	rjmp	.+206    	; 0x62e2 <set_current_calibrate+0x416>
			{
				if (present_current == 0)
    6214:	8d 81       	ldd	r24, Y+5	; 0x05
    6216:	9e 81       	ldd	r25, Y+6	; 0x06
    6218:	89 2b       	or	r24, r25
    621a:	19 f4       	brne	.+6      	; 0x6222 <set_current_calibrate+0x356>
				{
					output->pwm_value += 10;
    621c:	66 5f       	subi	r22, 0xF6	; 246
    621e:	7f 4f       	sbci	r23, 0xFF	; 255
    6220:	5c c0       	rjmp	.+184    	; 0x62da <set_current_calibrate+0x40e>
    6222:	f8 01       	movw	r30, r16
    6224:	81 85       	ldd	r24, Z+9	; 0x09
				}
				else if (using_formula && !output->over_temp_error1 && !output->over_temp_error2 && !output->over_temp_error_uncleared1 && !output->over_temp_error_uncleared2)
    6226:	bb 20       	and	r11, r11
    6228:	09 f4       	brne	.+2      	; 0x622c <set_current_calibrate+0x360>
    622a:	43 c0       	rjmp	.+134    	; 0x62b2 <set_current_calibrate+0x3e6>
    622c:	81 11       	cpse	r24, r1
    622e:	41 c0       	rjmp	.+130    	; 0x62b2 <set_current_calibrate+0x3e6>
    6230:	82 85       	ldd	r24, Z+10	; 0x0a
    6232:	81 11       	cpse	r24, r1
    6234:	40 c0       	rjmp	.+128    	; 0x62b6 <set_current_calibrate+0x3ea>
    6236:	83 85       	ldd	r24, Z+11	; 0x0b
    6238:	81 11       	cpse	r24, r1
    623a:	3d c0       	rjmp	.+122    	; 0x62b6 <set_current_calibrate+0x3ea>
    623c:	84 85       	ldd	r24, Z+12	; 0x0c
    623e:	81 11       	cpse	r24, r1
    6240:	3a c0       	rjmp	.+116    	; 0x62b6 <set_current_calibrate+0x3ea>
				{
					uint16_t volatile desired_pwm = ((float)output->pwm_value * (float)desired_current) / (float)present_current;
    6242:	ef 80       	ldd	r14, Y+7	; 0x07
    6244:	f8 84       	ldd	r15, Y+8	; 0x08
    6246:	cd 80       	ldd	r12, Y+5	; 0x05
    6248:	de 80       	ldd	r13, Y+6	; 0x06
    624a:	80 e0       	ldi	r24, 0x00	; 0
    624c:	90 e0       	ldi	r25, 0x00	; 0
    624e:	0e 94 e4 35 	call	0x6bc8	; 0x6bc8 <__floatunsisf>
    6252:	2b 01       	movw	r4, r22
    6254:	3c 01       	movw	r6, r24
    6256:	b7 01       	movw	r22, r14
    6258:	ff 0c       	add	r15, r15
    625a:	88 0b       	sbc	r24, r24
    625c:	99 0b       	sbc	r25, r25
    625e:	0e 94 e6 35 	call	0x6bcc	; 0x6bcc <__floatsisf>
    6262:	9b 01       	movw	r18, r22
    6264:	ac 01       	movw	r20, r24
    6266:	c3 01       	movw	r24, r6
    6268:	b2 01       	movw	r22, r4
    626a:	0e 94 f3 36 	call	0x6de6	; 0x6de6 <__mulsf3>
    626e:	2b 01       	movw	r4, r22
    6270:	3c 01       	movw	r6, r24
    6272:	b6 01       	movw	r22, r12
    6274:	dd 0c       	add	r13, r13
    6276:	88 0b       	sbc	r24, r24
    6278:	99 0b       	sbc	r25, r25
    627a:	0e 94 e6 35 	call	0x6bcc	; 0x6bcc <__floatsisf>
    627e:	9b 01       	movw	r18, r22
    6280:	ac 01       	movw	r20, r24
    6282:	c3 01       	movw	r24, r6
    6284:	b2 01       	movw	r22, r4
    6286:	0e 94 3c 35 	call	0x6a78	; 0x6a78 <__divsf3>
    628a:	0e 94 b5 35 	call	0x6b6a	; 0x6b6a <__fixunssfsi>
    628e:	6b 83       	std	Y+3, r22	; 0x03
    6290:	7c 83       	std	Y+4, r23	; 0x04
					output->pwm_value += ((int)desired_pwm - (int)output->pwm_value) * 1;
    6292:	8b 81       	ldd	r24, Y+3	; 0x03
    6294:	9c 81       	ldd	r25, Y+4	; 0x04
    6296:	d8 01       	movw	r26, r16
    6298:	5a 96       	adiw	r26, 0x1a	; 26
    629a:	8d 93       	st	X+, r24
    629c:	9c 93       	st	X, r25
    629e:	5b 97       	sbiw	r26, 0x1b	; 27
					if (output->pwm_value > 1023)
    62a0:	81 15       	cp	r24, r1
    62a2:	94 40       	sbci	r25, 0x04	; 4
    62a4:	f0 f0       	brcs	.+60     	; 0x62e2 <set_current_calibrate+0x416>
					{
						output->pwm_value = 1023;
    62a6:	8f ef       	ldi	r24, 0xFF	; 255
    62a8:	93 e0       	ldi	r25, 0x03	; 3
    62aa:	f8 01       	movw	r30, r16
    62ac:	82 8f       	std	Z+26, r24	; 0x1a
    62ae:	93 8f       	std	Z+27, r25	; 0x1b
    62b0:	18 c0       	rjmp	.+48     	; 0x62e2 <set_current_calibrate+0x416>
					if (output->pwm_value < 0)
					{
						output->pwm_value = 0;
					}
				}
				else if (!output->over_temp_error1 && !output->over_temp_error2 && !output->over_temp_error_uncleared1 && !output->over_temp_error_uncleared2)
    62b2:	81 11       	cpse	r24, r1
    62b4:	16 c0       	rjmp	.+44     	; 0x62e2 <set_current_calibrate+0x416>
    62b6:	d8 01       	movw	r26, r16
    62b8:	1a 96       	adiw	r26, 0x0a	; 10
    62ba:	8c 91       	ld	r24, X
    62bc:	1a 97       	sbiw	r26, 0x0a	; 10
    62be:	81 11       	cpse	r24, r1
    62c0:	10 c0       	rjmp	.+32     	; 0x62e2 <set_current_calibrate+0x416>
    62c2:	1b 96       	adiw	r26, 0x0b	; 11
    62c4:	8c 91       	ld	r24, X
    62c6:	1b 97       	sbiw	r26, 0x0b	; 11
    62c8:	81 11       	cpse	r24, r1
    62ca:	0b c0       	rjmp	.+22     	; 0x62e2 <set_current_calibrate+0x416>
    62cc:	1c 96       	adiw	r26, 0x0c	; 12
    62ce:	8c 91       	ld	r24, X
    62d0:	1c 97       	sbiw	r26, 0x0c	; 12
    62d2:	81 11       	cpse	r24, r1
    62d4:	06 c0       	rjmp	.+12     	; 0x62e2 <set_current_calibrate+0x416>
				{
					output->pwm_value++;
    62d6:	6f 5f       	subi	r22, 0xFF	; 255
    62d8:	7f 4f       	sbci	r23, 0xFF	; 255
    62da:	5a 96       	adiw	r26, 0x1a	; 26
    62dc:	6d 93       	st	X+, r22
    62de:	7c 93       	st	X, r23
    62e0:	5b 97       	sbiw	r26, 0x1b	; 27
				}
			}
			output->dac_value = 0;
    62e2:	f8 01       	movw	r30, r16
    62e4:	14 8e       	std	Z+28, r1	; 0x1c
    62e6:	15 8e       	std	Z+29, r1	; 0x1d
    62e8:	56 c0       	rjmp	.+172    	; 0x6396 <set_current_calibrate+0x4ca>
		}
		else
		{
			if (output->pwm_value > 0)
    62ea:	61 15       	cp	r22, r1
    62ec:	71 05       	cpc	r23, r1
    62ee:	c9 f3       	breq	.-14     	; 0x62e2 <set_current_calibrate+0x416>
			{
				if (present_current == 0)
    62f0:	8d 81       	ldd	r24, Y+5	; 0x05
    62f2:	9e 81       	ldd	r25, Y+6	; 0x06
    62f4:	89 2b       	or	r24, r25
    62f6:	21 f4       	brne	.+8      	; 0x6300 <set_current_calibrate+0x434>
				{
					output->pwm_value += 10;
    62f8:	66 5f       	subi	r22, 0xF6	; 246
    62fa:	7f 4f       	sbci	r23, 0xFF	; 255
    62fc:	d8 01       	movw	r26, r16
    62fe:	ed cf       	rjmp	.-38     	; 0x62da <set_current_calibrate+0x40e>
    6300:	f8 01       	movw	r30, r16
    6302:	81 85       	ldd	r24, Z+9	; 0x09
				}
				else if (using_formula && !output->over_temp_error1 && !output->over_temp_error2 && !output->over_temp_error_uncleared1 && !output->over_temp_error_uncleared2)
    6304:	bb 20       	and	r11, r11
    6306:	b1 f1       	breq	.+108    	; 0x6374 <set_current_calibrate+0x4a8>
    6308:	81 11       	cpse	r24, r1
    630a:	34 c0       	rjmp	.+104    	; 0x6374 <set_current_calibrate+0x4a8>
    630c:	82 85       	ldd	r24, Z+10	; 0x0a
    630e:	81 11       	cpse	r24, r1
    6310:	33 c0       	rjmp	.+102    	; 0x6378 <set_current_calibrate+0x4ac>
    6312:	83 85       	ldd	r24, Z+11	; 0x0b
    6314:	81 11       	cpse	r24, r1
    6316:	30 c0       	rjmp	.+96     	; 0x6378 <set_current_calibrate+0x4ac>
    6318:	84 85       	ldd	r24, Z+12	; 0x0c
    631a:	81 11       	cpse	r24, r1
    631c:	2d c0       	rjmp	.+90     	; 0x6378 <set_current_calibrate+0x4ac>
				{
					uint16_t volatile desired_pwm = ((float)output->pwm_value * (float)desired_current) / (float)present_current;
    631e:	cf 80       	ldd	r12, Y+7	; 0x07
    6320:	d8 84       	ldd	r13, Y+8	; 0x08
    6322:	ed 80       	ldd	r14, Y+5	; 0x05
    6324:	fe 80       	ldd	r15, Y+6	; 0x06
    6326:	80 e0       	ldi	r24, 0x00	; 0
    6328:	90 e0       	ldi	r25, 0x00	; 0
    632a:	0e 94 e4 35 	call	0x6bc8	; 0x6bc8 <__floatunsisf>
    632e:	2b 01       	movw	r4, r22
    6330:	3c 01       	movw	r6, r24
    6332:	b6 01       	movw	r22, r12
    6334:	dd 0c       	add	r13, r13
    6336:	88 0b       	sbc	r24, r24
    6338:	99 0b       	sbc	r25, r25
    633a:	0e 94 e6 35 	call	0x6bcc	; 0x6bcc <__floatsisf>
    633e:	9b 01       	movw	r18, r22
    6340:	ac 01       	movw	r20, r24
    6342:	c3 01       	movw	r24, r6
    6344:	b2 01       	movw	r22, r4
    6346:	0e 94 f3 36 	call	0x6de6	; 0x6de6 <__mulsf3>
    634a:	2b 01       	movw	r4, r22
    634c:	3c 01       	movw	r6, r24
    634e:	b7 01       	movw	r22, r14
    6350:	ff 0c       	add	r15, r15
    6352:	88 0b       	sbc	r24, r24
    6354:	99 0b       	sbc	r25, r25
    6356:	0e 94 e6 35 	call	0x6bcc	; 0x6bcc <__floatsisf>
    635a:	9b 01       	movw	r18, r22
    635c:	ac 01       	movw	r20, r24
    635e:	c3 01       	movw	r24, r6
    6360:	b2 01       	movw	r22, r4
    6362:	0e 94 3c 35 	call	0x6a78	; 0x6a78 <__divsf3>
    6366:	0e 94 b5 35 	call	0x6b6a	; 0x6b6a <__fixunssfsi>
    636a:	69 83       	std	Y+1, r22	; 0x01
    636c:	7a 83       	std	Y+2, r23	; 0x02
					output->pwm_value += ((int)desired_pwm - (int)output->pwm_value) * 1;
    636e:	89 81       	ldd	r24, Y+1	; 0x01
    6370:	9a 81       	ldd	r25, Y+2	; 0x02
    6372:	91 cf       	rjmp	.-222    	; 0x6296 <set_current_calibrate+0x3ca>
					if (output->pwm_value < 0)
					{
						output->pwm_value = 0;
					}
				}
				else if (!output->over_temp_error1 && !output->over_temp_error2 && !output->over_temp_error_uncleared1 && !output->over_temp_error_uncleared2)
    6374:	81 11       	cpse	r24, r1
    6376:	b5 cf       	rjmp	.-150    	; 0x62e2 <set_current_calibrate+0x416>
    6378:	f8 01       	movw	r30, r16
    637a:	82 85       	ldd	r24, Z+10	; 0x0a
    637c:	81 11       	cpse	r24, r1
    637e:	b1 cf       	rjmp	.-158    	; 0x62e2 <set_current_calibrate+0x416>
    6380:	83 85       	ldd	r24, Z+11	; 0x0b
    6382:	81 11       	cpse	r24, r1
    6384:	ae cf       	rjmp	.-164    	; 0x62e2 <set_current_calibrate+0x416>
    6386:	84 85       	ldd	r24, Z+12	; 0x0c
    6388:	81 11       	cpse	r24, r1
    638a:	ab cf       	rjmp	.-170    	; 0x62e2 <set_current_calibrate+0x416>
				{
					output->pwm_value--;
    638c:	61 50       	subi	r22, 0x01	; 1
    638e:	71 09       	sbc	r23, r1
    6390:	62 8f       	std	Z+26, r22	; 0x1a
    6392:	73 8f       	std	Z+27, r23	; 0x1b
    6394:	a6 cf       	rjmp	.-180    	; 0x62e2 <set_current_calibrate+0x416>
			output->dac_value = 0;
		}
	}
	
	//**************************************************
	wdt_reset(); // WATCH DOG TIMER RESET
    6396:	a8 95       	wdr
	//**************************************************
	
	output->write_to_dummy_dac(output->dac_value, output->dummy_dac_address);
    6398:	d8 01       	movw	r26, r16
    639a:	d4 96       	adiw	r26, 0x34	; 52
    639c:	ed 91       	ld	r30, X+
    639e:	fc 91       	ld	r31, X
    63a0:	d5 97       	sbiw	r26, 0x35	; 53
    63a2:	de 96       	adiw	r26, 0x3e	; 62
    63a4:	6c 91       	ld	r22, X
    63a6:	de 97       	sbiw	r26, 0x3e	; 62
    63a8:	5c 96       	adiw	r26, 0x1c	; 28
    63aa:	8d 91       	ld	r24, X+
    63ac:	9c 91       	ld	r25, X
    63ae:	5d 97       	sbiw	r26, 0x1d	; 29
    63b0:	09 95       	icall
    63b2:	e7 ea       	ldi	r30, 0xA7	; 167
    63b4:	f1 e6       	ldi	r31, 0x61	; 97
    63b6:	31 97       	sbiw	r30, 0x01	; 1
    63b8:	f1 f7       	brne	.-4      	; 0x63b6 <set_current_calibrate+0x4ea>
    63ba:	00 c0       	rjmp	.+0      	; 0x63bc <set_current_calibrate+0x4f0>
    63bc:	00 00       	nop
	_delay_ms(5);
	
	//**************************************************
	wdt_reset(); // WATCH DOG TIMER RESET
    63be:	a8 95       	wdr
	//**************************************************
	
	if (program_state.program == FOURTY_ONE)
    63c0:	20 91 e8 23 	lds	r18, 0x23E8	; 0x8023e8 <program_state+0x4>
    63c4:	80 91 bd 24 	lds	r24, 0x24BD	; 0x8024bd <output_one+0x1a>
    63c8:	90 91 be 24 	lds	r25, 0x24BE	; 0x8024be <output_one+0x1b>
    63cc:	d8 01       	movw	r26, r16
    63ce:	d2 96       	adiw	r26, 0x32	; 50
    63d0:	ed 91       	ld	r30, X+
    63d2:	fc 91       	ld	r31, X
    63d4:	d3 97       	sbiw	r26, 0x33	; 51
    63d6:	21 30       	cpi	r18, 0x01	; 1
    63d8:	61 f4       	brne	.+24     	; 0x63f2 <set_current_calibrate+0x526>
	{
		output->set_pwm(output_one.pwm_value, output_one.pwm_value, output_one.isChanelused1, output_two.isChanelused2, output_two.isChanelused1, output_one.isChanelused2, BOARD_41EC_ADDR);
    63da:	3c e4       	ldi	r19, 0x4C	; 76
    63dc:	c3 2e       	mov	r12, r19
    63de:	e0 90 cf 24 	lds	r14, 0x24CF	; 0x8024cf <output_one+0x2c>
    63e2:	00 91 4c 24 	lds	r16, 0x244C	; 0x80244c <output_two+0x2b>
    63e6:	20 91 4d 24 	lds	r18, 0x244D	; 0x80244d <output_two+0x2c>
    63ea:	40 91 ce 24 	lds	r20, 0x24CE	; 0x8024ce <output_one+0x2b>
    63ee:	bc 01       	movw	r22, r24
    63f0:	0e c0       	rjmp	.+28     	; 0x640e <set_current_calibrate+0x542>
	}
	else
	{
		output->set_pwm(output_one.pwm_value, output_two.pwm_value, output_one.isChanelused1, output_two.isChanelused2, output_two.isChanelused1, output_one.isChanelused2, BOARD_41EC_ADDR);
    63f2:	60 91 3b 24 	lds	r22, 0x243B	; 0x80243b <output_two+0x1a>
    63f6:	70 91 3c 24 	lds	r23, 0x243C	; 0x80243c <output_two+0x1b>
    63fa:	2c e4       	ldi	r18, 0x4C	; 76
    63fc:	c2 2e       	mov	r12, r18
    63fe:	e0 90 cf 24 	lds	r14, 0x24CF	; 0x8024cf <output_one+0x2c>
    6402:	00 91 4c 24 	lds	r16, 0x244C	; 0x80244c <output_two+0x2b>
    6406:	20 91 4d 24 	lds	r18, 0x244D	; 0x80244d <output_two+0x2c>
    640a:	40 91 ce 24 	lds	r20, 0x24CE	; 0x8024ce <output_one+0x2b>
    640e:	09 95       	icall
	}
	
	//**************************************************
	wdt_reset(); // WATCH DOG TIMER RESET
    6410:	a8 95       	wdr
    6412:	e7 ea       	ldi	r30, 0xA7	; 167
    6414:	f1 e6       	ldi	r31, 0x61	; 97
    6416:	31 97       	sbiw	r30, 0x01	; 1
    6418:	f1 f7       	brne	.-4      	; 0x6416 <set_current_calibrate+0x54a>
    641a:	00 c0       	rjmp	.+0      	; 0x641c <set_current_calibrate+0x550>
    641c:	00 00       	nop
	//**************************************************
	
	_delay_ms(5);
}
    641e:	28 96       	adiw	r28, 0x08	; 8
    6420:	cd bf       	out	0x3d, r28	; 61
    6422:	de bf       	out	0x3e, r29	; 62
    6424:	df 91       	pop	r29
    6426:	cf 91       	pop	r28
    6428:	1f 91       	pop	r17
    642a:	0f 91       	pop	r16
    642c:	ff 90       	pop	r15
    642e:	ef 90       	pop	r14
    6430:	df 90       	pop	r13
    6432:	cf 90       	pop	r12
    6434:	bf 90       	pop	r11
    6436:	7f 90       	pop	r7
    6438:	6f 90       	pop	r6
    643a:	5f 90       	pop	r5
    643c:	4f 90       	pop	r4
    643e:	08 95       	ret

00006440 <write_external_eeprom>:
	
	return received_data;
}

void write_external_eeprom(TWI_Master_t *twi, uint8_t eepromAddress, uint16_t dataAddress, uint16_t data)
{
    6440:	af 92       	push	r10
    6442:	bf 92       	push	r11
    6444:	df 92       	push	r13
    6446:	ef 92       	push	r14
    6448:	ff 92       	push	r15
    644a:	0f 93       	push	r16
    644c:	1f 93       	push	r17
    644e:	cf 93       	push	r28
    6450:	df 93       	push	r29
    6452:	cd b7       	in	r28, 0x3d	; 61
    6454:	de b7       	in	r29, 0x3e	; 62
    6456:	28 97       	sbiw	r28, 0x08	; 8
    6458:	cd bf       	out	0x3d, r28	; 61
    645a:	de bf       	out	0x3e, r29	; 62
    645c:	7c 01       	movw	r14, r24
    645e:	d6 2e       	mov	r13, r22
    6460:	8a 01       	movw	r16, r20
    6462:	59 01       	movw	r10, r18
	uint16_t current_value = read_external_eeprom(twi, eepromAddress, dataAddress);
    6464:	0e 94 6a 2d 	call	0x5ad4	; 0x5ad4 <read_external_eeprom>
	
	// If the current value in EEPROM is the same as the value that needs to be written then do not write it.
	// This saves some amount of writes used, since reads are free of charge, writes we only have about 100,000.
	// So, it is good to save as many writes as possible.
	if (current_value == data)
    6468:	8a 15       	cp	r24, r10
    646a:	9b 05       	cpc	r25, r11
    646c:	09 f4       	brne	.+2      	; 0x6470 <write_external_eeprom+0x30>
    646e:	64 c0       	rjmp	.+200    	; 0x6538 <write_external_eeprom+0xf8>
	{
		return;
	}
	//**************************************************
	wdt_reset(); // WATCH DOG TIMER RESET
    6470:	a8 95       	wdr
	//**************************************************
	
	char message[8];
	message[0] = (uint8_t)(dataAddress >> 8);
    6472:	19 83       	std	Y+1, r17	; 0x01
	message[1] = (uint8_t)(dataAddress);
    6474:	0a 83       	std	Y+2, r16	; 0x02
	message[2] = (uint8_t)(data >> 8);
    6476:	bb 82       	std	Y+3, r11	; 0x03
	TWI_MasterWrite(&twiMasterForEEPROM, eepromAddress, (uint8_t *) message, 3);
    6478:	23 e0       	ldi	r18, 0x03	; 3
    647a:	ae 01       	movw	r20, r28
    647c:	4f 5f       	subi	r20, 0xFF	; 255
    647e:	5f 4f       	sbci	r21, 0xFF	; 255
    6480:	6d 2d       	mov	r22, r13
    6482:	84 e5       	ldi	r24, 0x54	; 84
    6484:	95 e2       	ldi	r25, 0x25	; 37
    6486:	0e 94 62 33 	call	0x66c4	; 0x66c4 <TWI_MasterWrite>
    648a:	2f e7       	ldi	r18, 0x7F	; 127
    648c:	88 e3       	ldi	r24, 0x38	; 56
    648e:	91 e0       	ldi	r25, 0x01	; 1
    6490:	21 50       	subi	r18, 0x01	; 1
    6492:	80 40       	sbci	r24, 0x00	; 0
    6494:	90 40       	sbci	r25, 0x00	; 0
    6496:	e1 f7       	brne	.-8      	; 0x6490 <write_external_eeprom+0x50>
    6498:	00 c0       	rjmp	.+0      	; 0x649a <write_external_eeprom+0x5a>
    649a:	00 00       	nop
    649c:	80 91 0e 25 	lds	r24, 0x250E	; 0x80250e <counters+0x2a>
    64a0:	90 91 0f 25 	lds	r25, 0x250F	; 0x80250f <counters+0x2b>
	_delay_ms(20);

	while(twi->status != TWIM_STATUS_READY)
    64a4:	f7 01       	movw	r30, r14
    64a6:	21 ad       	ldd	r18, Z+57	; 0x39
    64a8:	22 23       	and	r18, r18
    64aa:	19 f0       	breq	.+6      	; 0x64b2 <write_external_eeprom+0x72>
	{
		if (counters.i2c_error_counter > 20)
    64ac:	85 31       	cpi	r24, 0x15	; 21
    64ae:	91 05       	cpc	r25, r1
    64b0:	58 f1       	brcs	.+86     	; 0x6508 <write_external_eeprom+0xc8>
    64b2:	80 93 0e 25 	sts	0x250E, r24	; 0x80250e <counters+0x2a>
    64b6:	90 93 0f 25 	sts	0x250F, r25	; 0x80250f <counters+0x2b>
    64ba:	e7 ea       	ldi	r30, 0xA7	; 167
    64bc:	f1 e6       	ldi	r31, 0x61	; 97
    64be:	31 97       	sbiw	r30, 0x01	; 1
    64c0:	f1 f7       	brne	.-4      	; 0x64be <write_external_eeprom+0x7e>
    64c2:	00 c0       	rjmp	.+0      	; 0x64c4 <write_external_eeprom+0x84>
    64c4:	00 00       	nop
		counters.i2c_error_counter++;
	}
	
	_delay_ms(5);
	
	counters.i2c_error_counter = 0;
    64c6:	10 92 0e 25 	sts	0x250E, r1	; 0x80250e <counters+0x2a>
    64ca:	10 92 0f 25 	sts	0x250F, r1	; 0x80250f <counters+0x2b>
	
	dataAddress++;
    64ce:	0f 5f       	subi	r16, 0xFF	; 255
    64d0:	1f 4f       	sbci	r17, 0xFF	; 255
	
	//**************************************************
	wdt_reset(); // WATCH DOG TIMER RESET
    64d2:	a8 95       	wdr
	//**************************************************
	
	message[0] = (uint8_t)(dataAddress >> 8);
    64d4:	19 83       	std	Y+1, r17	; 0x01
	message[1] = (uint8_t)(dataAddress);
    64d6:	0a 83       	std	Y+2, r16	; 0x02
	message[2] = (uint8_t)(data);
    64d8:	ab 82       	std	Y+3, r10	; 0x03
	TWI_MasterWrite(&twiMasterForEEPROM, eepromAddress, (uint8_t *) message, 3);
    64da:	23 e0       	ldi	r18, 0x03	; 3
    64dc:	ae 01       	movw	r20, r28
    64de:	4f 5f       	subi	r20, 0xFF	; 255
    64e0:	5f 4f       	sbci	r21, 0xFF	; 255
    64e2:	6d 2d       	mov	r22, r13
    64e4:	84 e5       	ldi	r24, 0x54	; 84
    64e6:	95 e2       	ldi	r25, 0x25	; 37
    64e8:	0e 94 62 33 	call	0x66c4	; 0x66c4 <TWI_MasterWrite>
    64ec:	ff e7       	ldi	r31, 0x7F	; 127
    64ee:	28 e3       	ldi	r18, 0x38	; 56
    64f0:	81 e0       	ldi	r24, 0x01	; 1
    64f2:	f1 50       	subi	r31, 0x01	; 1
    64f4:	20 40       	sbci	r18, 0x00	; 0
    64f6:	80 40       	sbci	r24, 0x00	; 0
    64f8:	e1 f7       	brne	.-8      	; 0x64f2 <write_external_eeprom+0xb2>
    64fa:	00 c0       	rjmp	.+0      	; 0x64fc <write_external_eeprom+0xbc>
    64fc:	00 00       	nop
    64fe:	80 91 0e 25 	lds	r24, 0x250E	; 0x80250e <counters+0x2a>
    6502:	90 91 0f 25 	lds	r25, 0x250F	; 0x80250f <counters+0x2b>
    6506:	06 c0       	rjmp	.+12     	; 0x6514 <write_external_eeprom+0xd4>
	{
		if (counters.i2c_error_counter > 20)
		{
			break;
		}
		counters.i2c_error_counter++;
    6508:	01 96       	adiw	r24, 0x01	; 1
    650a:	cc cf       	rjmp	.-104    	; 0x64a4 <write_external_eeprom+0x64>
	TWI_MasterWrite(&twiMasterForEEPROM, eepromAddress, (uint8_t *) message, 3);
	_delay_ms(20);

	while(twi->status != TWIM_STATUS_READY)
	{
		if (counters.i2c_error_counter > 20)
    650c:	85 31       	cpi	r24, 0x15	; 21
    650e:	91 05       	cpc	r25, r1
    6510:	28 f4       	brcc	.+10     	; 0x651c <write_external_eeprom+0xdc>
		{
			break;
		}
		counters.i2c_error_counter++;
    6512:	01 96       	adiw	r24, 0x01	; 1
	message[1] = (uint8_t)(dataAddress);
	message[2] = (uint8_t)(data);
	TWI_MasterWrite(&twiMasterForEEPROM, eepromAddress, (uint8_t *) message, 3);
	_delay_ms(20);

	while(twi->status != TWIM_STATUS_READY)
    6514:	f7 01       	movw	r30, r14
    6516:	21 ad       	ldd	r18, Z+57	; 0x39
    6518:	21 11       	cpse	r18, r1
    651a:	f8 cf       	rjmp	.-16     	; 0x650c <write_external_eeprom+0xcc>
    651c:	80 93 0e 25 	sts	0x250E, r24	; 0x80250e <counters+0x2a>
    6520:	90 93 0f 25 	sts	0x250F, r25	; 0x80250f <counters+0x2b>
    6524:	87 ea       	ldi	r24, 0xA7	; 167
    6526:	91 e6       	ldi	r25, 0x61	; 97
    6528:	01 97       	sbiw	r24, 0x01	; 1
    652a:	f1 f7       	brne	.-4      	; 0x6528 <write_external_eeprom+0xe8>
    652c:	00 c0       	rjmp	.+0      	; 0x652e <write_external_eeprom+0xee>
    652e:	00 00       	nop
		counters.i2c_error_counter++;
	}
	
	_delay_ms(5);
	
	counters.i2c_error_counter = 0;
    6530:	10 92 0e 25 	sts	0x250E, r1	; 0x80250e <counters+0x2a>
    6534:	10 92 0f 25 	sts	0x250F, r1	; 0x80250f <counters+0x2b>
}
    6538:	28 96       	adiw	r28, 0x08	; 8
    653a:	cd bf       	out	0x3d, r28	; 61
    653c:	de bf       	out	0x3e, r29	; 62
    653e:	df 91       	pop	r29
    6540:	cf 91       	pop	r28
    6542:	1f 91       	pop	r17
    6544:	0f 91       	pop	r16
    6546:	ff 90       	pop	r15
    6548:	ef 90       	pop	r14
    654a:	df 90       	pop	r13
    654c:	bf 90       	pop	r11
    654e:	af 90       	pop	r10
    6550:	08 95       	ret

00006552 <TWI_MasterTransactionFinished.part.1>:
*/
bool TWI_MasterReady(TWI_Master_t *twi)
{
	bool twi_status = (twi->status & TWIM_STATUS_READY);
	return twi_status;
}
    6552:	fc 01       	movw	r30, r24
    6554:	82 81       	ldd	r24, Z+2	; 0x02
    6556:	86 95       	lsr	r24
    6558:	80 34       	cpi	r24, 0x40	; 64
    655a:	e1 f0       	breq	.+56     	; 0x6594 <TWI_MasterTransactionFinished.part.1+0x42>
    655c:	28 f4       	brcc	.+10     	; 0x6568 <TWI_MasterTransactionFinished.part.1+0x16>
    655e:	89 30       	cpi	r24, 0x09	; 9
    6560:	c9 f1       	breq	.+114    	; 0x65d4 <TWI_MasterTransactionFinished.part.1+0x82>
    6562:	8a 30       	cpi	r24, 0x0A	; 10
    6564:	39 f1       	breq	.+78     	; 0x65b4 <TWI_MasterTransactionFinished.part.1+0x62>
    6566:	08 95       	ret
    6568:	81 34       	cpi	r24, 0x41	; 65
    656a:	21 f0       	breq	.+8      	; 0x6574 <TWI_MasterTransactionFinished.part.1+0x22>
    656c:	8c 34       	cpi	r24, 0x4C	; 76
    656e:	09 f4       	brne	.+2      	; 0x6572 <TWI_MasterTransactionFinished.part.1+0x20>
    6570:	41 c0       	rjmp	.+130    	; 0x65f4 <TWI_MasterTransactionFinished.part.1+0xa2>
    6572:	08 95       	ret
    6574:	4e e2       	ldi	r20, 0x2E	; 46
    6576:	5a e0       	ldi	r21, 0x0A	; 10
    6578:	61 e5       	ldi	r22, 0x51	; 81
    657a:	84 e5       	ldi	r24, 0x54	; 84
    657c:	95 e2       	ldi	r25, 0x25	; 37
    657e:	0e 94 6a 2d 	call	0x5ad4	; 0x5ad4 <read_external_eeprom>
    6582:	01 96       	adiw	r24, 0x01	; 1
    6584:	80 93 00 24 	sts	0x2400, r24	; 0x802400 <program_state+0x1c>
    6588:	90 93 01 24 	sts	0x2401, r25	; 0x802401 <program_state+0x1d>
    658c:	81 e0       	ldi	r24, 0x01	; 1
    658e:	80 93 0c 24 	sts	0x240C, r24	; 0x80240c <program_state+0x28>
    6592:	08 95       	ret
    6594:	40 e3       	ldi	r20, 0x30	; 48
    6596:	5a e0       	ldi	r21, 0x0A	; 10
    6598:	61 e5       	ldi	r22, 0x51	; 81
    659a:	84 e5       	ldi	r24, 0x54	; 84
    659c:	95 e2       	ldi	r25, 0x25	; 37
    659e:	0e 94 6a 2d 	call	0x5ad4	; 0x5ad4 <read_external_eeprom>
    65a2:	01 96       	adiw	r24, 0x01	; 1
    65a4:	80 93 02 24 	sts	0x2402, r24	; 0x802402 <program_state+0x1e>
    65a8:	90 93 03 24 	sts	0x2403, r25	; 0x802403 <program_state+0x1f>
    65ac:	81 e0       	ldi	r24, 0x01	; 1
    65ae:	80 93 0d 24 	sts	0x240D, r24	; 0x80240d <program_state+0x29>
    65b2:	08 95       	ret
    65b4:	42 e3       	ldi	r20, 0x32	; 50
    65b6:	5a e0       	ldi	r21, 0x0A	; 10
    65b8:	61 e5       	ldi	r22, 0x51	; 81
    65ba:	84 e5       	ldi	r24, 0x54	; 84
    65bc:	95 e2       	ldi	r25, 0x25	; 37
    65be:	0e 94 6a 2d 	call	0x5ad4	; 0x5ad4 <read_external_eeprom>
    65c2:	01 96       	adiw	r24, 0x01	; 1
    65c4:	80 93 04 24 	sts	0x2404, r24	; 0x802404 <program_state+0x20>
    65c8:	90 93 05 24 	sts	0x2405, r25	; 0x802405 <program_state+0x21>
    65cc:	81 e0       	ldi	r24, 0x01	; 1
    65ce:	80 93 0e 24 	sts	0x240E, r24	; 0x80240e <program_state+0x2a>
    65d2:	08 95       	ret
    65d4:	44 e3       	ldi	r20, 0x34	; 52
    65d6:	5a e0       	ldi	r21, 0x0A	; 10
    65d8:	61 e5       	ldi	r22, 0x51	; 81
    65da:	84 e5       	ldi	r24, 0x54	; 84
    65dc:	95 e2       	ldi	r25, 0x25	; 37
    65de:	0e 94 6a 2d 	call	0x5ad4	; 0x5ad4 <read_external_eeprom>
    65e2:	01 96       	adiw	r24, 0x01	; 1
    65e4:	80 93 06 24 	sts	0x2406, r24	; 0x802406 <program_state+0x22>
    65e8:	90 93 07 24 	sts	0x2407, r25	; 0x802407 <program_state+0x23>
    65ec:	81 e0       	ldi	r24, 0x01	; 1
    65ee:	80 93 0f 24 	sts	0x240F, r24	; 0x80240f <program_state+0x2b>
    65f2:	08 95       	ret
    65f4:	46 e3       	ldi	r20, 0x36	; 54
    65f6:	5a e0       	ldi	r21, 0x0A	; 10
    65f8:	61 e5       	ldi	r22, 0x51	; 81
    65fa:	84 e5       	ldi	r24, 0x54	; 84
    65fc:	95 e2       	ldi	r25, 0x25	; 37
    65fe:	0e 94 6a 2d 	call	0x5ad4	; 0x5ad4 <read_external_eeprom>
    6602:	01 96       	adiw	r24, 0x01	; 1
    6604:	80 93 08 24 	sts	0x2408, r24	; 0x802408 <program_state+0x24>
    6608:	90 93 09 24 	sts	0x2409, r25	; 0x802409 <program_state+0x25>
    660c:	81 e0       	ldi	r24, 0x01	; 1
    660e:	80 93 10 24 	sts	0x2410, r24	; 0x802410 <program_state+0x2c>
    6612:	08 95       	ret

00006614 <TWI_MasterInit>:
    6614:	fc 01       	movw	r30, r24
    6616:	60 83       	st	Z, r22
    6618:	71 83       	std	Z+1, r23	; 0x01
    661a:	48 63       	ori	r20, 0x38	; 56
    661c:	db 01       	movw	r26, r22
    661e:	11 96       	adiw	r26, 0x01	; 1
    6620:	4c 93       	st	X, r20
    6622:	a0 81       	ld	r26, Z
    6624:	b1 81       	ldd	r27, Z+1	; 0x01
    6626:	15 96       	adiw	r26, 0x05	; 5
    6628:	2c 93       	st	X, r18
    662a:	01 90       	ld	r0, Z+
    662c:	f0 81       	ld	r31, Z
    662e:	e0 2d       	mov	r30, r0
    6630:	81 e0       	ldi	r24, 0x01	; 1
    6632:	84 83       	std	Z+4, r24	; 0x04
    6634:	10 92 0e 25 	sts	0x250E, r1	; 0x80250e <counters+0x2a>
    6638:	10 92 0f 25 	sts	0x250F, r1	; 0x80250f <counters+0x2b>
    663c:	08 95       	ret

0000663e <TWI_MasterWriteRead>:
*
*  \retval true  If transaction could be started.
*  \retval false If transaction could not be started.
*/
bool TWI_MasterWriteRead(TWI_Master_t *twi, uint8_t address, uint8_t *writeData, uint8_t bytesToWrite, uint8_t bytesToRead)
{
    663e:	0f 93       	push	r16
    6640:	cf 93       	push	r28
    6642:	df 93       	push	r29
    6644:	fc 01       	movw	r30, r24
	/*Parameter sanity check. */
	if (bytesToWrite > TWIM_WRITE_BUFFER_SIZE)
    6646:	2a 31       	cpi	r18, 0x1A	; 26
    6648:	58 f0       	brcs	.+22     	; 0x6660 <TWI_MasterWriteRead+0x22>
	{
		counters.i2c_error_counter++;
    664a:	80 91 0e 25 	lds	r24, 0x250E	; 0x80250e <counters+0x2a>
    664e:	90 91 0f 25 	lds	r25, 0x250F	; 0x80250f <counters+0x2b>
    6652:	01 96       	adiw	r24, 0x01	; 1
    6654:	80 93 0e 25 	sts	0x250E, r24	; 0x80250e <counters+0x2a>
    6658:	90 93 0f 25 	sts	0x250F, r25	; 0x80250f <counters+0x2b>
		return false;
    665c:	80 e0       	ldi	r24, 0x00	; 0
    665e:	2e c0       	rjmp	.+92     	; 0x66bc <TWI_MasterWriteRead+0x7e>
	}
	if (bytesToRead > TWIM_READ_BUFFER_SIZE)
    6660:	0a 31       	cpi	r16, 0x1A	; 26
    6662:	98 f7       	brcc	.-26     	; 0x664a <TWI_MasterWriteRead+0xc>
		counters.i2c_error_counter++;
		return false;
	}

	/*Initiate transaction if bus is ready. */
	if (twi->status == TWIM_STATUS_READY)
    6664:	81 ad       	ldd	r24, Z+57	; 0x39
    6666:	81 11       	cpse	r24, r1
    6668:	f0 cf       	rjmp	.-32     	; 0x664a <TWI_MasterWriteRead+0xc>
	{

		twi->status = TWIM_STATUS_BUSY;
    666a:	81 e0       	ldi	r24, 0x01	; 1
    666c:	81 af       	std	Z+57, r24	; 0x39
		twi->result = TWIM_RESULT_UNKNOWN;
    666e:	12 ae       	std	Z+58, r1	; 0x3a

		twi->address = address<<1;
    6670:	66 0f       	add	r22, r22
    6672:	62 83       	std	Z+2, r22	; 0x02
    6674:	da 01       	movw	r26, r20
    6676:	80 e0       	ldi	r24, 0x00	; 0
    6678:	90 e0       	ldi	r25, 0x00	; 0

		/* Fill write data buffer. */
		for (uint8_t bufferIndex=0; bufferIndex < bytesToWrite; bufferIndex++)
    667a:	82 17       	cp	r24, r18
    667c:	38 f4       	brcc	.+14     	; 0x668c <TWI_MasterWriteRead+0x4e>
		{
			twi->writeData[bufferIndex] = writeData[bufferIndex];
    667e:	3d 91       	ld	r19, X+
    6680:	ef 01       	movw	r28, r30
    6682:	c8 0f       	add	r28, r24
    6684:	d9 1f       	adc	r29, r25
    6686:	3b 83       	std	Y+3, r19	; 0x03
    6688:	01 96       	adiw	r24, 0x01	; 1
    668a:	f7 cf       	rjmp	.-18     	; 0x667a <TWI_MasterWriteRead+0x3c>
		}

		twi->bytesToWrite = bytesToWrite;
    668c:	25 ab       	std	Z+53, r18	; 0x35
		twi->bytesToRead = bytesToRead;
    668e:	06 ab       	std	Z+54, r16	; 0x36
		twi->bytesWritten = 0;
    6690:	17 aa       	std	Z+55, r1	; 0x37
		twi->bytesRead = 0;
    6692:	10 ae       	std	Z+56, r1	; 0x38

		/* If write command, send the START condition + Address +
		* 'R/_W = 0'
		*/
		if (twi->bytesToWrite > 0)
    6694:	85 a9       	ldd	r24, Z+53	; 0x35
    6696:	88 23       	and	r24, r24
    6698:	19 f0       	breq	.+6      	; 0x66a0 <TWI_MasterWriteRead+0x62>
		{
			uint8_t writeAddress = twi->address & ~0x01;
    669a:	82 81       	ldd	r24, Z+2	; 0x02
    669c:	8e 7f       	andi	r24, 0xFE	; 254
    669e:	05 c0       	rjmp	.+10     	; 0x66aa <TWI_MasterWriteRead+0x6c>
		}

		/* If read command, send the START condition + Address +
		* 'R/_W = 1'
		*/
		else if (twi->bytesToRead > 0)
    66a0:	86 a9       	ldd	r24, Z+54	; 0x36
    66a2:	88 23       	and	r24, r24
    66a4:	31 f0       	breq	.+12     	; 0x66b2 <TWI_MasterWriteRead+0x74>
		{
			uint8_t readAddress = twi->address | 0x01;
    66a6:	82 81       	ldd	r24, Z+2	; 0x02
    66a8:	81 60       	ori	r24, 0x01	; 1
			twi->interface->MASTER.ADDR = readAddress;
    66aa:	01 90       	ld	r0, Z+
    66ac:	f0 81       	ld	r31, Z
    66ae:	e0 2d       	mov	r30, r0
    66b0:	86 83       	std	Z+6, r24	; 0x06
		}
		
		counters.i2c_error_counter = 0;
    66b2:	10 92 0e 25 	sts	0x250E, r1	; 0x80250e <counters+0x2a>
    66b6:	10 92 0f 25 	sts	0x250F, r1	; 0x80250f <counters+0x2b>
    66ba:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		counters.i2c_error_counter++;
		return false;
	}
}
    66bc:	df 91       	pop	r29
    66be:	cf 91       	pop	r28
    66c0:	0f 91       	pop	r16
    66c2:	08 95       	ret

000066c4 <TWI_MasterWrite>:
*
*  \retval true  If transaction could be started.
*  \retval false If transaction could not be started.
*/
bool TWI_MasterWrite(TWI_Master_t *twi, uint8_t address, uint8_t *writeData, uint8_t bytesToWrite)
{
    66c4:	0f 93       	push	r16
	bool twi_status = TWI_MasterWriteRead(twi, address, writeData, bytesToWrite, 0);
    66c6:	00 e0       	ldi	r16, 0x00	; 0
    66c8:	0e 94 1f 33 	call	0x663e	; 0x663e <TWI_MasterWriteRead>
    66cc:	e7 e8       	ldi	r30, 0x87	; 135
    66ce:	f3 e1       	ldi	r31, 0x13	; 19
    66d0:	31 97       	sbiw	r30, 0x01	; 1
    66d2:	f1 f7       	brne	.-4      	; 0x66d0 <TWI_MasterWrite+0xc>
    66d4:	00 c0       	rjmp	.+0      	; 0x66d6 <TWI_MasterWrite+0x12>
    66d6:	00 00       	nop
	
	_delay_ms(10);
	if (!twi_status)
    66d8:	81 11       	cpse	r24, r1
    66da:	0b c0       	rjmp	.+22     	; 0x66f2 <TWI_MasterWrite+0x2e>
	{
		counters.i2c_error_counter++;
    66dc:	20 91 0e 25 	lds	r18, 0x250E	; 0x80250e <counters+0x2a>
    66e0:	30 91 0f 25 	lds	r19, 0x250F	; 0x80250f <counters+0x2b>
    66e4:	2f 5f       	subi	r18, 0xFF	; 255
    66e6:	3f 4f       	sbci	r19, 0xFF	; 255
    66e8:	20 93 0e 25 	sts	0x250E, r18	; 0x80250e <counters+0x2a>
    66ec:	30 93 0f 25 	sts	0x250F, r19	; 0x80250f <counters+0x2b>
    66f0:	04 c0       	rjmp	.+8      	; 0x66fa <TWI_MasterWrite+0x36>
	}
	else
	{
		counters.i2c_error_counter = 0;
    66f2:	10 92 0e 25 	sts	0x250E, r1	; 0x80250e <counters+0x2a>
    66f6:	10 92 0f 25 	sts	0x250F, r1	; 0x80250f <counters+0x2b>
	}
	return twi_status;
}
    66fa:	0f 91       	pop	r16
    66fc:	08 95       	ret

000066fe <TWI_MasterRead>:
*
*  \retval true  If transaction could be started.
*  \retval false If transaction could not be started.
*/
bool TWI_MasterRead(TWI_Master_t *twi, uint8_t address, uint8_t bytesToRead)
{
    66fe:	0f 93       	push	r16
	bool twi_status = TWI_MasterWriteRead(twi, address, 0, 0, bytesToRead);
    6700:	04 2f       	mov	r16, r20
    6702:	20 e0       	ldi	r18, 0x00	; 0
    6704:	40 e0       	ldi	r20, 0x00	; 0
    6706:	50 e0       	ldi	r21, 0x00	; 0
    6708:	0e 94 1f 33 	call	0x663e	; 0x663e <TWI_MasterWriteRead>
	if (!twi_status)
    670c:	81 11       	cpse	r24, r1
    670e:	0b c0       	rjmp	.+22     	; 0x6726 <TWI_MasterRead+0x28>
	{
		counters.i2c_error_counter++;
    6710:	20 91 0e 25 	lds	r18, 0x250E	; 0x80250e <counters+0x2a>
    6714:	30 91 0f 25 	lds	r19, 0x250F	; 0x80250f <counters+0x2b>
    6718:	2f 5f       	subi	r18, 0xFF	; 255
    671a:	3f 4f       	sbci	r19, 0xFF	; 255
    671c:	20 93 0e 25 	sts	0x250E, r18	; 0x80250e <counters+0x2a>
    6720:	30 93 0f 25 	sts	0x250F, r19	; 0x80250f <counters+0x2b>
    6724:	04 c0       	rjmp	.+8      	; 0x672e <TWI_MasterRead+0x30>
	}
	else
	{
		counters.i2c_error_counter = 0;
    6726:	10 92 0e 25 	sts	0x250E, r1	; 0x80250e <counters+0x2a>
    672a:	10 92 0f 25 	sts	0x250F, r1	; 0x80250f <counters+0x2b>
	}
	return twi_status;
}
    672e:	0f 91       	pop	r16
    6730:	08 95       	ret

00006732 <TWI_MasterArbitrationLostBusErrorHandler>:
*  Handles TWI responses to lost arbitration and bus error.
*
*  \param twi  The TWI_Master_t struct instance.
*/
void TWI_MasterArbitrationLostBusErrorHandler(TWI_Master_t *twi)
{
    6732:	fc 01       	movw	r30, r24
	
	uint8_t currentStatus = twi->interface->MASTER.STATUS;
    6734:	a0 81       	ld	r26, Z
    6736:	b1 81       	ldd	r27, Z+1	; 0x01
    6738:	14 96       	adiw	r26, 0x04	; 4
    673a:	8c 91       	ld	r24, X
    673c:	14 97       	sbiw	r26, 0x04	; 4

	/* If bus error. */
	if (currentStatus & TWI_MASTER_BUSERR_bm) 
    673e:	82 ff       	sbrs	r24, 2
    6740:	02 c0       	rjmp	.+4      	; 0x6746 <TWI_MasterArbitrationLostBusErrorHandler+0x14>
	{
		twi->result = TWIM_RESULT_BUS_ERROR;
    6742:	94 e0       	ldi	r25, 0x04	; 4
    6744:	01 c0       	rjmp	.+2      	; 0x6748 <TWI_MasterArbitrationLostBusErrorHandler+0x16>
	}
	/* If arbitration lost. */
	else 
	{
		twi->result = TWIM_RESULT_ARBITRATION_LOST;
    6746:	93 e0       	ldi	r25, 0x03	; 3
    6748:	92 af       	std	Z+58, r25	; 0x3a
	}

	/* Clear interrupt flag. */
	twi->interface->MASTER.STATUS = currentStatus | TWI_MASTER_ARBLOST_bm;
    674a:	88 60       	ori	r24, 0x08	; 8
    674c:	14 96       	adiw	r26, 0x04	; 4
    674e:	8c 93       	st	X, r24

	twi->status = TWIM_STATUS_READY;
    6750:	11 ae       	std	Z+57, r1	; 0x39
    6752:	08 95       	ret

00006754 <TWI_MasterTransactionFinished>:
*  \param twi     The TWI_Master_t struct instance.
*  \param result  The result of the operation.
*/
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
    6754:	fc 01       	movw	r30, r24
    6756:	62 af       	std	Z+58, r22	; 0x3a
	twi->status = TWIM_STATUS_READY;
    6758:	11 ae       	std	Z+57, r1	; 0x39
	
	if (result == TWIM_RESULT_BUFFER_OVERFLOW || result == TWIM_RESULT_ARBITRATION_LOST || result == TWIM_RESULT_BUS_ERROR || result == TWIM_RESULT_FAIL)
    675a:	2e ef       	ldi	r18, 0xFE	; 254
    675c:	26 0f       	add	r18, r22
    675e:	23 30       	cpi	r18, 0x03	; 3
    6760:	10 f0       	brcs	.+4      	; 0x6766 <TWI_MasterTransactionFinished+0x12>
    6762:	66 30       	cpi	r22, 0x06	; 6
    6764:	11 f4       	brne	.+4      	; 0x676a <TWI_MasterTransactionFinished+0x16>
    6766:	0c 94 a9 32 	jmp	0x6552	; 0x6552 <TWI_MasterTransactionFinished.part.1>
			}
		}
	}
	else
	{
		switch (twi->address >> 1)
    676a:	fc 01       	movw	r30, r24
    676c:	82 81       	ldd	r24, Z+2	; 0x02
    676e:	86 95       	lsr	r24
    6770:	80 34       	cpi	r24, 0x40	; 64
    6772:	71 f0       	breq	.+28     	; 0x6790 <TWI_MasterTransactionFinished+0x3c>
    6774:	28 f4       	brcc	.+10     	; 0x6780 <TWI_MasterTransactionFinished+0x2c>
    6776:	89 30       	cpi	r24, 0x09	; 9
    6778:	89 f0       	breq	.+34     	; 0x679c <TWI_MasterTransactionFinished+0x48>
    677a:	8a 30       	cpi	r24, 0x0A	; 10
    677c:	61 f0       	breq	.+24     	; 0x6796 <TWI_MasterTransactionFinished+0x42>
    677e:	08 95       	ret
    6780:	81 34       	cpi	r24, 0x41	; 65
    6782:	19 f0       	breq	.+6      	; 0x678a <TWI_MasterTransactionFinished+0x36>
    6784:	8c 34       	cpi	r24, 0x4C	; 76
    6786:	69 f0       	breq	.+26     	; 0x67a2 <TWI_MasterTransactionFinished+0x4e>
    6788:	08 95       	ret
		{
			case OUTPUT1_INA226_ADDR:
			program_state.comm_error1_to_display = FALSE;
    678a:	10 92 0c 24 	sts	0x240C, r1	; 0x80240c <program_state+0x28>
			break;
    678e:	08 95       	ret
			
			case OUTPUT2_INA226_ADDR:
			program_state.comm_error2_to_display = FALSE;
    6790:	10 92 0d 24 	sts	0x240D, r1	; 0x80240d <program_state+0x29>
			break;
    6794:	08 95       	ret
			
			case OUTPUT1_DAC101C085_ADDR:
			program_state.comm_error3_to_display = FALSE;
    6796:	10 92 0e 24 	sts	0x240E, r1	; 0x80240e <program_state+0x2a>
			break;
    679a:	08 95       	ret
			
			case OUTPUT2_DAC101C085_ADDR:
			program_state.comm_error4_to_display = FALSE;
    679c:	10 92 0f 24 	sts	0x240F, r1	; 0x80240f <program_state+0x2b>
			break;
    67a0:	08 95       	ret
			
			case BOARD_41EC_ADDR:
			program_state.comm_error5_to_display = FALSE;
    67a2:	10 92 10 24 	sts	0x2410, r1	; 0x802410 <program_state+0x2c>
    67a6:	08 95       	ret

000067a8 <TWI_MasterWriteHandler>:
*  Handles TWI transactions (master write) and responses to (N)ACK.
*
*  \param twi The TWI_Master_t struct instance.
*/
void TWI_MasterWriteHandler(TWI_Master_t *twi)
{
    67a8:	0f 93       	push	r16
    67aa:	1f 93       	push	r17
    67ac:	cf 93       	push	r28
    67ae:	df 93       	push	r29
    67b0:	ec 01       	movw	r28, r24
	/* Local variables used in if tests to avoid compiler warning. */
	uint8_t bytesToWrite  = twi->bytesToWrite;
    67b2:	0d a9       	ldd	r16, Y+53	; 0x35
	uint8_t bytesToRead   = twi->bytesToRead;
    67b4:	1e a9       	ldd	r17, Y+54	; 0x36

	if (twi->interface->MASTER.STATUS & TWI_MASTER_RXACK_bm)
    67b6:	e8 81       	ld	r30, Y
    67b8:	f9 81       	ldd	r31, Y+1	; 0x01
    67ba:	84 81       	ldd	r24, Z+4	; 0x04
    67bc:	84 ff       	sbrs	r24, 4
    67be:	60 c0       	rjmp	.+192    	; 0x6880 <TWI_MasterWriteHandler+0xd8>
	{
		switch (twi->address >> 1)
    67c0:	8a 81       	ldd	r24, Y+2	; 0x02
    67c2:	86 95       	lsr	r24
    67c4:	80 34       	cpi	r24, 0x40	; 64
    67c6:	e1 f1       	breq	.+120    	; 0x6840 <TWI_MasterWriteHandler+0x98>
    67c8:	b0 f4       	brcc	.+44     	; 0x67f6 <TWI_MasterWriteHandler+0x4e>
    67ca:	89 30       	cpi	r24, 0x09	; 9
    67cc:	09 f4       	brne	.+2      	; 0x67d0 <TWI_MasterWriteHandler+0x28>
    67ce:	48 c0       	rjmp	.+144    	; 0x6860 <TWI_MasterWriteHandler+0xb8>
    67d0:	8a 30       	cpi	r24, 0x0A	; 10
    67d2:	09 f0       	breq	.+2      	; 0x67d6 <TWI_MasterWriteHandler+0x2e>
    67d4:	70 c0       	rjmp	.+224    	; 0x68b6 <TWI_MasterWriteHandler+0x10e>
				break;
			}
			
			case OUTPUT1_DAC101C085_ADDR:
			{
				program_state.comm_error3 = read_external_eeprom(&twiMasterForEEPROM, EXTERNAL_EEPROM_ADDR, EEPROM_COM_ERROR3_AMT_ADDR);
    67d6:	42 e3       	ldi	r20, 0x32	; 50
    67d8:	5a e0       	ldi	r21, 0x0A	; 10
    67da:	61 e5       	ldi	r22, 0x51	; 81
    67dc:	84 e5       	ldi	r24, 0x54	; 84
    67de:	95 e2       	ldi	r25, 0x25	; 37
    67e0:	0e 94 6a 2d 	call	0x5ad4	; 0x5ad4 <read_external_eeprom>
				program_state.comm_error3++;
    67e4:	01 96       	adiw	r24, 0x01	; 1
    67e6:	80 93 04 24 	sts	0x2404, r24	; 0x802404 <program_state+0x20>
    67ea:	90 93 05 24 	sts	0x2405, r25	; 0x802405 <program_state+0x21>
				program_state.comm_error3_to_display = TRUE;
    67ee:	81 e0       	ldi	r24, 0x01	; 1
    67f0:	80 93 0e 24 	sts	0x240E, r24	; 0x80240e <program_state+0x2a>

				break;
    67f4:	60 c0       	rjmp	.+192    	; 0x68b6 <TWI_MasterWriteHandler+0x10e>
	uint8_t bytesToWrite  = twi->bytesToWrite;
	uint8_t bytesToRead   = twi->bytesToRead;

	if (twi->interface->MASTER.STATUS & TWI_MASTER_RXACK_bm)
	{
		switch (twi->address >> 1)
    67f6:	81 34       	cpi	r24, 0x41	; 65
    67f8:	99 f0       	breq	.+38     	; 0x6820 <TWI_MasterWriteHandler+0x78>
    67fa:	8c 34       	cpi	r24, 0x4C	; 76
    67fc:	09 f0       	breq	.+2      	; 0x6800 <TWI_MasterWriteHandler+0x58>
    67fe:	5b c0       	rjmp	.+182    	; 0x68b6 <TWI_MasterWriteHandler+0x10e>
				break;
			}

			case BOARD_41EC_ADDR:
			{
				program_state.comm_error5 = read_external_eeprom(&twiMasterForEEPROM, EXTERNAL_EEPROM_ADDR, EEPROM_COM_ERROR5_AMT_ADDR);
    6800:	46 e3       	ldi	r20, 0x36	; 54
    6802:	5a e0       	ldi	r21, 0x0A	; 10
    6804:	61 e5       	ldi	r22, 0x51	; 81
    6806:	84 e5       	ldi	r24, 0x54	; 84
    6808:	95 e2       	ldi	r25, 0x25	; 37
    680a:	0e 94 6a 2d 	call	0x5ad4	; 0x5ad4 <read_external_eeprom>
				program_state.comm_error5++;
    680e:	01 96       	adiw	r24, 0x01	; 1
    6810:	80 93 08 24 	sts	0x2408, r24	; 0x802408 <program_state+0x24>
    6814:	90 93 09 24 	sts	0x2409, r25	; 0x802409 <program_state+0x25>
				program_state.comm_error5_to_display = TRUE;
    6818:	81 e0       	ldi	r24, 0x01	; 1
    681a:	80 93 10 24 	sts	0x2410, r24	; 0x802410 <program_state+0x2c>

				break;
    681e:	4b c0       	rjmp	.+150    	; 0x68b6 <TWI_MasterWriteHandler+0x10e>
	{
		switch (twi->address >> 1)
		{
			case OUTPUT1_INA226_ADDR:
			{
				program_state.comm_error1 = read_external_eeprom(&twiMasterForEEPROM, EXTERNAL_EEPROM_ADDR, EEPROM_COM_ERROR1_AMT_ADDR);
    6820:	4e e2       	ldi	r20, 0x2E	; 46
    6822:	5a e0       	ldi	r21, 0x0A	; 10
    6824:	61 e5       	ldi	r22, 0x51	; 81
    6826:	84 e5       	ldi	r24, 0x54	; 84
    6828:	95 e2       	ldi	r25, 0x25	; 37
    682a:	0e 94 6a 2d 	call	0x5ad4	; 0x5ad4 <read_external_eeprom>
				program_state.comm_error1++;
    682e:	01 96       	adiw	r24, 0x01	; 1
    6830:	80 93 00 24 	sts	0x2400, r24	; 0x802400 <program_state+0x1c>
    6834:	90 93 01 24 	sts	0x2401, r25	; 0x802401 <program_state+0x1d>
				program_state.comm_error1_to_display = TRUE;
    6838:	81 e0       	ldi	r24, 0x01	; 1
    683a:	80 93 0c 24 	sts	0x240C, r24	; 0x80240c <program_state+0x28>

				break;
    683e:	3b c0       	rjmp	.+118    	; 0x68b6 <TWI_MasterWriteHandler+0x10e>
			}
			
			case OUTPUT2_INA226_ADDR:
			{
				program_state.comm_error2 = read_external_eeprom(&twiMasterForEEPROM, EXTERNAL_EEPROM_ADDR, EEPROM_COM_ERROR2_AMT_ADDR);
    6840:	40 e3       	ldi	r20, 0x30	; 48
    6842:	5a e0       	ldi	r21, 0x0A	; 10
    6844:	61 e5       	ldi	r22, 0x51	; 81
    6846:	84 e5       	ldi	r24, 0x54	; 84
    6848:	95 e2       	ldi	r25, 0x25	; 37
    684a:	0e 94 6a 2d 	call	0x5ad4	; 0x5ad4 <read_external_eeprom>
				program_state.comm_error2++;
    684e:	01 96       	adiw	r24, 0x01	; 1
    6850:	80 93 02 24 	sts	0x2402, r24	; 0x802402 <program_state+0x1e>
    6854:	90 93 03 24 	sts	0x2403, r25	; 0x802403 <program_state+0x1f>
				program_state.comm_error2_to_display = TRUE;
    6858:	81 e0       	ldi	r24, 0x01	; 1
    685a:	80 93 0d 24 	sts	0x240D, r24	; 0x80240d <program_state+0x29>

				break;
    685e:	2b c0       	rjmp	.+86     	; 0x68b6 <TWI_MasterWriteHandler+0x10e>
				break;
			}

			case OUTPUT2_DAC101C085_ADDR:
			{
				program_state.comm_error4 = read_external_eeprom(&twiMasterForEEPROM, EXTERNAL_EEPROM_ADDR, EEPROM_COM_ERROR4_AMT_ADDR);
    6860:	44 e3       	ldi	r20, 0x34	; 52
    6862:	5a e0       	ldi	r21, 0x0A	; 10
    6864:	61 e5       	ldi	r22, 0x51	; 81
    6866:	84 e5       	ldi	r24, 0x54	; 84
    6868:	95 e2       	ldi	r25, 0x25	; 37
    686a:	0e 94 6a 2d 	call	0x5ad4	; 0x5ad4 <read_external_eeprom>
				program_state.comm_error4++;
    686e:	01 96       	adiw	r24, 0x01	; 1
    6870:	80 93 06 24 	sts	0x2406, r24	; 0x802406 <program_state+0x22>
    6874:	90 93 07 24 	sts	0x2407, r25	; 0x802407 <program_state+0x23>
				program_state.comm_error4_to_display = TRUE;
    6878:	81 e0       	ldi	r24, 0x01	; 1
    687a:	80 93 0f 24 	sts	0x240F, r24	; 0x80240f <program_state+0x2b>

				break;
    687e:	1b c0       	rjmp	.+54     	; 0x68b6 <TWI_MasterWriteHandler+0x10e>
			}
		}
	}
	else
	{
		switch (twi->address >> 1)
    6880:	8a 81       	ldd	r24, Y+2	; 0x02
    6882:	86 95       	lsr	r24
    6884:	80 34       	cpi	r24, 0x40	; 64
    6886:	91 f0       	breq	.+36     	; 0x68ac <TWI_MasterWriteHandler+0x104>
    6888:	38 f4       	brcc	.+14     	; 0x6898 <TWI_MasterWriteHandler+0xf0>
    688a:	89 30       	cpi	r24, 0x09	; 9
    688c:	91 f0       	breq	.+36     	; 0x68b2 <TWI_MasterWriteHandler+0x10a>
    688e:	8a 30       	cpi	r24, 0x0A	; 10
    6890:	91 f4       	brne	.+36     	; 0x68b6 <TWI_MasterWriteHandler+0x10e>
			case OUTPUT2_INA226_ADDR:
			program_state.comm_error2_to_display = FALSE;
			break;
			
			case OUTPUT1_DAC101C085_ADDR:
			program_state.comm_error3_to_display = FALSE;
    6892:	10 92 0e 24 	sts	0x240E, r1	; 0x80240e <program_state+0x2a>
			break;
    6896:	0f c0       	rjmp	.+30     	; 0x68b6 <TWI_MasterWriteHandler+0x10e>
			}
		}
	}
	else
	{
		switch (twi->address >> 1)
    6898:	81 34       	cpi	r24, 0x41	; 65
    689a:	29 f0       	breq	.+10     	; 0x68a6 <TWI_MasterWriteHandler+0xfe>
    689c:	8c 34       	cpi	r24, 0x4C	; 76
    689e:	59 f4       	brne	.+22     	; 0x68b6 <TWI_MasterWriteHandler+0x10e>
			case OUTPUT2_DAC101C085_ADDR:
			program_state.comm_error4_to_display = FALSE;
			break;
			
			case BOARD_41EC_ADDR:
			program_state.comm_error5_to_display = FALSE;
    68a0:	10 92 10 24 	sts	0x2410, r1	; 0x802410 <program_state+0x2c>
			break;
    68a4:	08 c0       	rjmp	.+16     	; 0x68b6 <TWI_MasterWriteHandler+0x10e>
	else
	{
		switch (twi->address >> 1)
		{
			case OUTPUT1_INA226_ADDR:
			program_state.comm_error1_to_display = FALSE;
    68a6:	10 92 0c 24 	sts	0x240C, r1	; 0x80240c <program_state+0x28>
			break;
    68aa:	05 c0       	rjmp	.+10     	; 0x68b6 <TWI_MasterWriteHandler+0x10e>
			
			case OUTPUT2_INA226_ADDR:
			program_state.comm_error2_to_display = FALSE;
    68ac:	10 92 0d 24 	sts	0x240D, r1	; 0x80240d <program_state+0x29>
			break;
    68b0:	02 c0       	rjmp	.+4      	; 0x68b6 <TWI_MasterWriteHandler+0x10e>
			case OUTPUT1_DAC101C085_ADDR:
			program_state.comm_error3_to_display = FALSE;
			break;
			
			case OUTPUT2_DAC101C085_ADDR:
			program_state.comm_error4_to_display = FALSE;
    68b2:	10 92 0f 24 	sts	0x240F, r1	; 0x80240f <program_state+0x2b>
			break;
		}
	}

	/* If NOT acknowledged (NACK) by slave cancel the transaction. */
	if (twi->interface->MASTER.STATUS & TWI_MASTER_RXACK_bm) 
    68b6:	e8 81       	ld	r30, Y
    68b8:	f9 81       	ldd	r31, Y+1	; 0x01
    68ba:	84 81       	ldd	r24, Z+4	; 0x04
    68bc:	84 ff       	sbrs	r24, 4
    68be:	06 c0       	rjmp	.+12     	; 0x68cc <TWI_MasterWriteHandler+0x124>
	{
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    68c0:	83 e0       	ldi	r24, 0x03	; 3
    68c2:	83 83       	std	Z+3, r24	; 0x03
		twi->result = TWIM_RESULT_NACK_RECEIVED;
    68c4:	85 e0       	ldi	r24, 0x05	; 5
    68c6:	8a af       	std	Y+58, r24	; 0x3a
		twi->status = TWIM_STATUS_READY;
    68c8:	19 ae       	std	Y+57, r1	; 0x39
    68ca:	1f c0       	rjmp	.+62     	; 0x690a <TWI_MasterWriteHandler+0x162>
	}

	/* If more bytes to write, send data. */
	else if (twi->bytesWritten < bytesToWrite) 
    68cc:	8f a9       	ldd	r24, Y+55	; 0x37
    68ce:	80 17       	cp	r24, r16
    68d0:	58 f4       	brcc	.+22     	; 0x68e8 <TWI_MasterWriteHandler+0x140>
	{
		uint8_t data = twi->writeData[twi->bytesWritten];
    68d2:	8f a9       	ldd	r24, Y+55	; 0x37
    68d4:	de 01       	movw	r26, r28
    68d6:	a8 0f       	add	r26, r24
    68d8:	b1 1d       	adc	r27, r1
    68da:	13 96       	adiw	r26, 0x03	; 3
    68dc:	8c 91       	ld	r24, X
		twi->interface->MASTER.DATA = data;
    68de:	87 83       	std	Z+7, r24	; 0x07
		++twi->bytesWritten;
    68e0:	8f a9       	ldd	r24, Y+55	; 0x37
    68e2:	8f 5f       	subi	r24, 0xFF	; 255
    68e4:	8f ab       	std	Y+55, r24	; 0x37
    68e6:	11 c0       	rjmp	.+34     	; 0x690a <TWI_MasterWriteHandler+0x162>
	}

	/* If bytes to read, send repeated START condition + Address +
	* 'R/_W = 1'
	*/
	else if (twi->bytesRead < bytesToRead) 
    68e8:	88 ad       	ldd	r24, Y+56	; 0x38
    68ea:	81 17       	cp	r24, r17
    68ec:	20 f4       	brcc	.+8      	; 0x68f6 <TWI_MasterWriteHandler+0x14e>
	{
		uint8_t readAddress = twi->address | 0x01;
    68ee:	8a 81       	ldd	r24, Y+2	; 0x02
    68f0:	81 60       	ori	r24, 0x01	; 1
		twi->interface->MASTER.ADDR = readAddress;
    68f2:	86 83       	std	Z+6, r24	; 0x06
    68f4:	0a c0       	rjmp	.+20     	; 0x690a <TWI_MasterWriteHandler+0x162>
	}

	/* If transaction finished, send STOP condition and set RESULT OK. */
	else 
	{
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    68f6:	83 e0       	ldi	r24, 0x03	; 3
    68f8:	83 83       	std	Z+3, r24	; 0x03
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_OK);
    68fa:	61 e0       	ldi	r22, 0x01	; 1
    68fc:	ce 01       	movw	r24, r28
	}
}
    68fe:	df 91       	pop	r29
    6900:	cf 91       	pop	r28
    6902:	1f 91       	pop	r17
    6904:	0f 91       	pop	r16

	/* If transaction finished, send STOP condition and set RESULT OK. */
	else 
	{
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_OK);
    6906:	0c 94 aa 33 	jmp	0x6754	; 0x6754 <TWI_MasterTransactionFinished>
	}
}
    690a:	df 91       	pop	r29
    690c:	cf 91       	pop	r28
    690e:	1f 91       	pop	r17
    6910:	0f 91       	pop	r16
    6912:	08 95       	ret

00006914 <TWI_MasterReadHandler>:
*  reading bytes from the TWI slave.
*
*  \param twi The TWI_Master_t struct instance.
*/
void TWI_MasterReadHandler(TWI_Master_t *twi)
{
    6914:	cf 93       	push	r28
    6916:	df 93       	push	r29
    6918:	ec 01       	movw	r28, r24
	
	/* Fetch data if bytes to be read. */
	if (twi->bytesRead < TWIM_READ_BUFFER_SIZE) 
    691a:	88 ad       	ldd	r24, Y+56	; 0x38
    691c:	e8 81       	ld	r30, Y
    691e:	f9 81       	ldd	r31, Y+1	; 0x01
    6920:	89 31       	cpi	r24, 0x19	; 25
    6922:	50 f4       	brcc	.+20     	; 0x6938 <TWI_MasterReadHandler+0x24>
	{
		uint8_t data = twi->interface->MASTER.DATA;
    6924:	87 81       	ldd	r24, Z+7	; 0x07
		twi->readData[twi->bytesRead] = data;
    6926:	98 ad       	ldd	r25, Y+56	; 0x38
    6928:	fe 01       	movw	r30, r28
    692a:	e9 0f       	add	r30, r25
    692c:	f1 1d       	adc	r31, r1
    692e:	84 8f       	std	Z+28, r24	; 0x1c
		twi->bytesRead++;
    6930:	88 ad       	ldd	r24, Y+56	; 0x38
    6932:	8f 5f       	subi	r24, 0xFF	; 255
    6934:	88 af       	std	Y+56, r24	; 0x38
    6936:	06 c0       	rjmp	.+12     	; 0x6944 <TWI_MasterReadHandler+0x30>
	}

	/* If buffer overflow, issue STOP and BUFFER_OVERFLOW condition. */
	else 
	{
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    6938:	83 e0       	ldi	r24, 0x03	; 3
    693a:	83 83       	std	Z+3, r24	; 0x03
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_BUFFER_OVERFLOW);
    693c:	62 e0       	ldi	r22, 0x02	; 2
    693e:	ce 01       	movw	r24, r28
    6940:	0e 94 aa 33 	call	0x6754	; 0x6754 <TWI_MasterTransactionFinished>
	}

	/* Local variable used in if test to avoid compiler warning. */
	uint8_t bytesToRead = twi->bytesToRead;
    6944:	9e a9       	ldd	r25, Y+54	; 0x36

	/* If more bytes to read, issue ACK and start a byte read. */
	if (twi->bytesRead < bytesToRead) 
    6946:	88 ad       	ldd	r24, Y+56	; 0x38
    6948:	e8 81       	ld	r30, Y
    694a:	f9 81       	ldd	r31, Y+1	; 0x01
    694c:	89 17       	cp	r24, r25
    694e:	28 f4       	brcc	.+10     	; 0x695a <TWI_MasterReadHandler+0x46>
	{
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    6950:	82 e0       	ldi	r24, 0x02	; 2
    6952:	83 83       	std	Z+3, r24	; 0x03
	else 
	{
		twi->interface->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_OK);
	}
}
    6954:	df 91       	pop	r29
    6956:	cf 91       	pop	r28
    6958:	08 95       	ret
	}

	/* If transaction finished, issue NACK and STOP condition. */
	else 
	{
		twi->interface->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    695a:	87 e0       	ldi	r24, 0x07	; 7
    695c:	83 83       	std	Z+3, r24	; 0x03
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_OK);
    695e:	61 e0       	ldi	r22, 0x01	; 1
    6960:	ce 01       	movw	r24, r28
	}
}
    6962:	df 91       	pop	r29
    6964:	cf 91       	pop	r28

	/* If transaction finished, issue NACK and STOP condition. */
	else 
	{
		twi->interface->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_OK);
    6966:	0c 94 aa 33 	jmp	0x6754	; 0x6754 <TWI_MasterTransactionFinished>

0000696a <TWI_MasterInterruptHandler>:
*
*  \param twi  The TWI_Master_t struct instance.
*/
void TWI_MasterInterruptHandler(TWI_Master_t *twi)
{
	uint8_t currentStatus = twi->interface->MASTER.STATUS;
    696a:	dc 01       	movw	r26, r24
    696c:	ed 91       	ld	r30, X+
    696e:	fc 91       	ld	r31, X
    6970:	24 81       	ldd	r18, Z+4	; 0x04
	
	/* If arbitration lost or bus error. */
	if ((currentStatus & TWI_MASTER_ARBLOST_bm) || (currentStatus & TWI_MASTER_BUSERR_bm))
    6972:	32 2f       	mov	r19, r18
    6974:	3c 70       	andi	r19, 0x0C	; 12
    6976:	11 f0       	breq	.+4      	; 0x697c <TWI_MasterInterruptHandler+0x12>
	{
		TWI_MasterArbitrationLostBusErrorHandler(twi);
    6978:	0c 94 99 33 	jmp	0x6732	; 0x6732 <TWI_MasterArbitrationLostBusErrorHandler>
	}

	/* If master write interrupt. */
	else if (currentStatus & TWI_MASTER_WIF_bm) 
    697c:	26 fd       	sbrc	r18, 6
	{
		TWI_MasterWriteHandler(twi);
    697e:	0c 94 d4 33 	jmp	0x67a8	; 0x67a8 <TWI_MasterWriteHandler>
	}

	/* If master read interrupt. */
	else if (currentStatus & TWI_MASTER_RIF_bm) 
    6982:	27 fd       	sbrc	r18, 7
	{
		TWI_MasterReadHandler(twi);
    6984:	0c 94 8a 34 	jmp	0x6914	; 0x6914 <TWI_MasterReadHandler>
*  \param twi     The TWI_Master_t struct instance.
*  \param result  The result of the operation.
*/
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
    6988:	26 e0       	ldi	r18, 0x06	; 6
    698a:	fc 01       	movw	r30, r24
    698c:	22 af       	std	Z+58, r18	; 0x3a
	twi->status = TWIM_STATUS_READY;
    698e:	11 ae       	std	Z+57, r1	; 0x39
    6990:	0c 94 a9 32 	jmp	0x6552	; 0x6552 <TWI_MasterTransactionFinished.part.1>

00006994 <__subsf3>:
    6994:	50 58       	subi	r21, 0x80	; 128

00006996 <__addsf3>:
    6996:	bb 27       	eor	r27, r27
    6998:	aa 27       	eor	r26, r26
    699a:	0e 94 e2 34 	call	0x69c4	; 0x69c4 <__addsf3x>
    699e:	0c 94 5c 36 	jmp	0x6cb8	; 0x6cb8 <__fp_round>
    69a2:	0e 94 4e 36 	call	0x6c9c	; 0x6c9c <__fp_pscA>
    69a6:	38 f0       	brcs	.+14     	; 0x69b6 <__addsf3+0x20>
    69a8:	0e 94 55 36 	call	0x6caa	; 0x6caa <__fp_pscB>
    69ac:	20 f0       	brcs	.+8      	; 0x69b6 <__addsf3+0x20>
    69ae:	39 f4       	brne	.+14     	; 0x69be <__addsf3+0x28>
    69b0:	9f 3f       	cpi	r25, 0xFF	; 255
    69b2:	19 f4       	brne	.+6      	; 0x69ba <__addsf3+0x24>
    69b4:	26 f4       	brtc	.+8      	; 0x69be <__addsf3+0x28>
    69b6:	0c 94 4b 36 	jmp	0x6c96	; 0x6c96 <__fp_nan>
    69ba:	0e f4       	brtc	.+2      	; 0x69be <__addsf3+0x28>
    69bc:	e0 95       	com	r30
    69be:	e7 fb       	bst	r30, 7
    69c0:	0c 94 45 36 	jmp	0x6c8a	; 0x6c8a <__fp_inf>

000069c4 <__addsf3x>:
    69c4:	e9 2f       	mov	r30, r25
    69c6:	0e 94 6d 36 	call	0x6cda	; 0x6cda <__fp_split3>
    69ca:	58 f3       	brcs	.-42     	; 0x69a2 <__addsf3+0xc>
    69cc:	ba 17       	cp	r27, r26
    69ce:	62 07       	cpc	r22, r18
    69d0:	73 07       	cpc	r23, r19
    69d2:	84 07       	cpc	r24, r20
    69d4:	95 07       	cpc	r25, r21
    69d6:	20 f0       	brcs	.+8      	; 0x69e0 <__addsf3x+0x1c>
    69d8:	79 f4       	brne	.+30     	; 0x69f8 <__addsf3x+0x34>
    69da:	a6 f5       	brtc	.+104    	; 0x6a44 <__addsf3x+0x80>
    69dc:	0c 94 8f 36 	jmp	0x6d1e	; 0x6d1e <__fp_zero>
    69e0:	0e f4       	brtc	.+2      	; 0x69e4 <__addsf3x+0x20>
    69e2:	e0 95       	com	r30
    69e4:	0b 2e       	mov	r0, r27
    69e6:	ba 2f       	mov	r27, r26
    69e8:	a0 2d       	mov	r26, r0
    69ea:	0b 01       	movw	r0, r22
    69ec:	b9 01       	movw	r22, r18
    69ee:	90 01       	movw	r18, r0
    69f0:	0c 01       	movw	r0, r24
    69f2:	ca 01       	movw	r24, r20
    69f4:	a0 01       	movw	r20, r0
    69f6:	11 24       	eor	r1, r1
    69f8:	ff 27       	eor	r31, r31
    69fa:	59 1b       	sub	r21, r25
    69fc:	99 f0       	breq	.+38     	; 0x6a24 <__addsf3x+0x60>
    69fe:	59 3f       	cpi	r21, 0xF9	; 249
    6a00:	50 f4       	brcc	.+20     	; 0x6a16 <__addsf3x+0x52>
    6a02:	50 3e       	cpi	r21, 0xE0	; 224
    6a04:	68 f1       	brcs	.+90     	; 0x6a60 <__addsf3x+0x9c>
    6a06:	1a 16       	cp	r1, r26
    6a08:	f0 40       	sbci	r31, 0x00	; 0
    6a0a:	a2 2f       	mov	r26, r18
    6a0c:	23 2f       	mov	r18, r19
    6a0e:	34 2f       	mov	r19, r20
    6a10:	44 27       	eor	r20, r20
    6a12:	58 5f       	subi	r21, 0xF8	; 248
    6a14:	f3 cf       	rjmp	.-26     	; 0x69fc <__addsf3x+0x38>
    6a16:	46 95       	lsr	r20
    6a18:	37 95       	ror	r19
    6a1a:	27 95       	ror	r18
    6a1c:	a7 95       	ror	r26
    6a1e:	f0 40       	sbci	r31, 0x00	; 0
    6a20:	53 95       	inc	r21
    6a22:	c9 f7       	brne	.-14     	; 0x6a16 <__addsf3x+0x52>
    6a24:	7e f4       	brtc	.+30     	; 0x6a44 <__addsf3x+0x80>
    6a26:	1f 16       	cp	r1, r31
    6a28:	ba 0b       	sbc	r27, r26
    6a2a:	62 0b       	sbc	r22, r18
    6a2c:	73 0b       	sbc	r23, r19
    6a2e:	84 0b       	sbc	r24, r20
    6a30:	ba f0       	brmi	.+46     	; 0x6a60 <__addsf3x+0x9c>
    6a32:	91 50       	subi	r25, 0x01	; 1
    6a34:	a1 f0       	breq	.+40     	; 0x6a5e <__addsf3x+0x9a>
    6a36:	ff 0f       	add	r31, r31
    6a38:	bb 1f       	adc	r27, r27
    6a3a:	66 1f       	adc	r22, r22
    6a3c:	77 1f       	adc	r23, r23
    6a3e:	88 1f       	adc	r24, r24
    6a40:	c2 f7       	brpl	.-16     	; 0x6a32 <__addsf3x+0x6e>
    6a42:	0e c0       	rjmp	.+28     	; 0x6a60 <__addsf3x+0x9c>
    6a44:	ba 0f       	add	r27, r26
    6a46:	62 1f       	adc	r22, r18
    6a48:	73 1f       	adc	r23, r19
    6a4a:	84 1f       	adc	r24, r20
    6a4c:	48 f4       	brcc	.+18     	; 0x6a60 <__addsf3x+0x9c>
    6a4e:	87 95       	ror	r24
    6a50:	77 95       	ror	r23
    6a52:	67 95       	ror	r22
    6a54:	b7 95       	ror	r27
    6a56:	f7 95       	ror	r31
    6a58:	9e 3f       	cpi	r25, 0xFE	; 254
    6a5a:	08 f0       	brcs	.+2      	; 0x6a5e <__addsf3x+0x9a>
    6a5c:	b0 cf       	rjmp	.-160    	; 0x69be <__addsf3+0x28>
    6a5e:	93 95       	inc	r25
    6a60:	88 0f       	add	r24, r24
    6a62:	08 f0       	brcs	.+2      	; 0x6a66 <__addsf3x+0xa2>
    6a64:	99 27       	eor	r25, r25
    6a66:	ee 0f       	add	r30, r30
    6a68:	97 95       	ror	r25
    6a6a:	87 95       	ror	r24
    6a6c:	08 95       	ret

00006a6e <__cmpsf2>:
    6a6e:	0e 94 21 36 	call	0x6c42	; 0x6c42 <__fp_cmp>
    6a72:	08 f4       	brcc	.+2      	; 0x6a76 <__cmpsf2+0x8>
    6a74:	81 e0       	ldi	r24, 0x01	; 1
    6a76:	08 95       	ret

00006a78 <__divsf3>:
    6a78:	0e 94 50 35 	call	0x6aa0	; 0x6aa0 <__divsf3x>
    6a7c:	0c 94 5c 36 	jmp	0x6cb8	; 0x6cb8 <__fp_round>
    6a80:	0e 94 55 36 	call	0x6caa	; 0x6caa <__fp_pscB>
    6a84:	58 f0       	brcs	.+22     	; 0x6a9c <__divsf3+0x24>
    6a86:	0e 94 4e 36 	call	0x6c9c	; 0x6c9c <__fp_pscA>
    6a8a:	40 f0       	brcs	.+16     	; 0x6a9c <__divsf3+0x24>
    6a8c:	29 f4       	brne	.+10     	; 0x6a98 <__divsf3+0x20>
    6a8e:	5f 3f       	cpi	r21, 0xFF	; 255
    6a90:	29 f0       	breq	.+10     	; 0x6a9c <__divsf3+0x24>
    6a92:	0c 94 45 36 	jmp	0x6c8a	; 0x6c8a <__fp_inf>
    6a96:	51 11       	cpse	r21, r1
    6a98:	0c 94 90 36 	jmp	0x6d20	; 0x6d20 <__fp_szero>
    6a9c:	0c 94 4b 36 	jmp	0x6c96	; 0x6c96 <__fp_nan>

00006aa0 <__divsf3x>:
    6aa0:	0e 94 6d 36 	call	0x6cda	; 0x6cda <__fp_split3>
    6aa4:	68 f3       	brcs	.-38     	; 0x6a80 <__divsf3+0x8>

00006aa6 <__divsf3_pse>:
    6aa6:	99 23       	and	r25, r25
    6aa8:	b1 f3       	breq	.-20     	; 0x6a96 <__divsf3+0x1e>
    6aaa:	55 23       	and	r21, r21
    6aac:	91 f3       	breq	.-28     	; 0x6a92 <__divsf3+0x1a>
    6aae:	95 1b       	sub	r25, r21
    6ab0:	55 0b       	sbc	r21, r21
    6ab2:	bb 27       	eor	r27, r27
    6ab4:	aa 27       	eor	r26, r26
    6ab6:	62 17       	cp	r22, r18
    6ab8:	73 07       	cpc	r23, r19
    6aba:	84 07       	cpc	r24, r20
    6abc:	38 f0       	brcs	.+14     	; 0x6acc <__divsf3_pse+0x26>
    6abe:	9f 5f       	subi	r25, 0xFF	; 255
    6ac0:	5f 4f       	sbci	r21, 0xFF	; 255
    6ac2:	22 0f       	add	r18, r18
    6ac4:	33 1f       	adc	r19, r19
    6ac6:	44 1f       	adc	r20, r20
    6ac8:	aa 1f       	adc	r26, r26
    6aca:	a9 f3       	breq	.-22     	; 0x6ab6 <__divsf3_pse+0x10>
    6acc:	35 d0       	rcall	.+106    	; 0x6b38 <__divsf3_pse+0x92>
    6ace:	0e 2e       	mov	r0, r30
    6ad0:	3a f0       	brmi	.+14     	; 0x6ae0 <__divsf3_pse+0x3a>
    6ad2:	e0 e8       	ldi	r30, 0x80	; 128
    6ad4:	32 d0       	rcall	.+100    	; 0x6b3a <__divsf3_pse+0x94>
    6ad6:	91 50       	subi	r25, 0x01	; 1
    6ad8:	50 40       	sbci	r21, 0x00	; 0
    6ada:	e6 95       	lsr	r30
    6adc:	00 1c       	adc	r0, r0
    6ade:	ca f7       	brpl	.-14     	; 0x6ad2 <__divsf3_pse+0x2c>
    6ae0:	2b d0       	rcall	.+86     	; 0x6b38 <__divsf3_pse+0x92>
    6ae2:	fe 2f       	mov	r31, r30
    6ae4:	29 d0       	rcall	.+82     	; 0x6b38 <__divsf3_pse+0x92>
    6ae6:	66 0f       	add	r22, r22
    6ae8:	77 1f       	adc	r23, r23
    6aea:	88 1f       	adc	r24, r24
    6aec:	bb 1f       	adc	r27, r27
    6aee:	26 17       	cp	r18, r22
    6af0:	37 07       	cpc	r19, r23
    6af2:	48 07       	cpc	r20, r24
    6af4:	ab 07       	cpc	r26, r27
    6af6:	b0 e8       	ldi	r27, 0x80	; 128
    6af8:	09 f0       	breq	.+2      	; 0x6afc <__divsf3_pse+0x56>
    6afa:	bb 0b       	sbc	r27, r27
    6afc:	80 2d       	mov	r24, r0
    6afe:	bf 01       	movw	r22, r30
    6b00:	ff 27       	eor	r31, r31
    6b02:	93 58       	subi	r25, 0x83	; 131
    6b04:	5f 4f       	sbci	r21, 0xFF	; 255
    6b06:	3a f0       	brmi	.+14     	; 0x6b16 <__divsf3_pse+0x70>
    6b08:	9e 3f       	cpi	r25, 0xFE	; 254
    6b0a:	51 05       	cpc	r21, r1
    6b0c:	78 f0       	brcs	.+30     	; 0x6b2c <__divsf3_pse+0x86>
    6b0e:	0c 94 45 36 	jmp	0x6c8a	; 0x6c8a <__fp_inf>
    6b12:	0c 94 90 36 	jmp	0x6d20	; 0x6d20 <__fp_szero>
    6b16:	5f 3f       	cpi	r21, 0xFF	; 255
    6b18:	e4 f3       	brlt	.-8      	; 0x6b12 <__divsf3_pse+0x6c>
    6b1a:	98 3e       	cpi	r25, 0xE8	; 232
    6b1c:	d4 f3       	brlt	.-12     	; 0x6b12 <__divsf3_pse+0x6c>
    6b1e:	86 95       	lsr	r24
    6b20:	77 95       	ror	r23
    6b22:	67 95       	ror	r22
    6b24:	b7 95       	ror	r27
    6b26:	f7 95       	ror	r31
    6b28:	9f 5f       	subi	r25, 0xFF	; 255
    6b2a:	c9 f7       	brne	.-14     	; 0x6b1e <__divsf3_pse+0x78>
    6b2c:	88 0f       	add	r24, r24
    6b2e:	91 1d       	adc	r25, r1
    6b30:	96 95       	lsr	r25
    6b32:	87 95       	ror	r24
    6b34:	97 f9       	bld	r25, 7
    6b36:	08 95       	ret
    6b38:	e1 e0       	ldi	r30, 0x01	; 1
    6b3a:	66 0f       	add	r22, r22
    6b3c:	77 1f       	adc	r23, r23
    6b3e:	88 1f       	adc	r24, r24
    6b40:	bb 1f       	adc	r27, r27
    6b42:	62 17       	cp	r22, r18
    6b44:	73 07       	cpc	r23, r19
    6b46:	84 07       	cpc	r24, r20
    6b48:	ba 07       	cpc	r27, r26
    6b4a:	20 f0       	brcs	.+8      	; 0x6b54 <__divsf3_pse+0xae>
    6b4c:	62 1b       	sub	r22, r18
    6b4e:	73 0b       	sbc	r23, r19
    6b50:	84 0b       	sbc	r24, r20
    6b52:	ba 0b       	sbc	r27, r26
    6b54:	ee 1f       	adc	r30, r30
    6b56:	88 f7       	brcc	.-30     	; 0x6b3a <__divsf3_pse+0x94>
    6b58:	e0 95       	com	r30
    6b5a:	08 95       	ret

00006b5c <__fixsfsi>:
    6b5c:	0e 94 b5 35 	call	0x6b6a	; 0x6b6a <__fixunssfsi>
    6b60:	68 94       	set
    6b62:	b1 11       	cpse	r27, r1
    6b64:	0c 94 90 36 	jmp	0x6d20	; 0x6d20 <__fp_szero>
    6b68:	08 95       	ret

00006b6a <__fixunssfsi>:
    6b6a:	0e 94 75 36 	call	0x6cea	; 0x6cea <__fp_splitA>
    6b6e:	88 f0       	brcs	.+34     	; 0x6b92 <__fixunssfsi+0x28>
    6b70:	9f 57       	subi	r25, 0x7F	; 127
    6b72:	98 f0       	brcs	.+38     	; 0x6b9a <__fixunssfsi+0x30>
    6b74:	b9 2f       	mov	r27, r25
    6b76:	99 27       	eor	r25, r25
    6b78:	b7 51       	subi	r27, 0x17	; 23
    6b7a:	b0 f0       	brcs	.+44     	; 0x6ba8 <__fixunssfsi+0x3e>
    6b7c:	e1 f0       	breq	.+56     	; 0x6bb6 <__fixunssfsi+0x4c>
    6b7e:	66 0f       	add	r22, r22
    6b80:	77 1f       	adc	r23, r23
    6b82:	88 1f       	adc	r24, r24
    6b84:	99 1f       	adc	r25, r25
    6b86:	1a f0       	brmi	.+6      	; 0x6b8e <__fixunssfsi+0x24>
    6b88:	ba 95       	dec	r27
    6b8a:	c9 f7       	brne	.-14     	; 0x6b7e <__fixunssfsi+0x14>
    6b8c:	14 c0       	rjmp	.+40     	; 0x6bb6 <__fixunssfsi+0x4c>
    6b8e:	b1 30       	cpi	r27, 0x01	; 1
    6b90:	91 f0       	breq	.+36     	; 0x6bb6 <__fixunssfsi+0x4c>
    6b92:	0e 94 8f 36 	call	0x6d1e	; 0x6d1e <__fp_zero>
    6b96:	b1 e0       	ldi	r27, 0x01	; 1
    6b98:	08 95       	ret
    6b9a:	0c 94 8f 36 	jmp	0x6d1e	; 0x6d1e <__fp_zero>
    6b9e:	67 2f       	mov	r22, r23
    6ba0:	78 2f       	mov	r23, r24
    6ba2:	88 27       	eor	r24, r24
    6ba4:	b8 5f       	subi	r27, 0xF8	; 248
    6ba6:	39 f0       	breq	.+14     	; 0x6bb6 <__fixunssfsi+0x4c>
    6ba8:	b9 3f       	cpi	r27, 0xF9	; 249
    6baa:	cc f3       	brlt	.-14     	; 0x6b9e <__fixunssfsi+0x34>
    6bac:	86 95       	lsr	r24
    6bae:	77 95       	ror	r23
    6bb0:	67 95       	ror	r22
    6bb2:	b3 95       	inc	r27
    6bb4:	d9 f7       	brne	.-10     	; 0x6bac <__fixunssfsi+0x42>
    6bb6:	3e f4       	brtc	.+14     	; 0x6bc6 <__fixunssfsi+0x5c>
    6bb8:	90 95       	com	r25
    6bba:	80 95       	com	r24
    6bbc:	70 95       	com	r23
    6bbe:	61 95       	neg	r22
    6bc0:	7f 4f       	sbci	r23, 0xFF	; 255
    6bc2:	8f 4f       	sbci	r24, 0xFF	; 255
    6bc4:	9f 4f       	sbci	r25, 0xFF	; 255
    6bc6:	08 95       	ret

00006bc8 <__floatunsisf>:
    6bc8:	e8 94       	clt
    6bca:	09 c0       	rjmp	.+18     	; 0x6bde <__floatsisf+0x12>

00006bcc <__floatsisf>:
    6bcc:	97 fb       	bst	r25, 7
    6bce:	3e f4       	brtc	.+14     	; 0x6bde <__floatsisf+0x12>
    6bd0:	90 95       	com	r25
    6bd2:	80 95       	com	r24
    6bd4:	70 95       	com	r23
    6bd6:	61 95       	neg	r22
    6bd8:	7f 4f       	sbci	r23, 0xFF	; 255
    6bda:	8f 4f       	sbci	r24, 0xFF	; 255
    6bdc:	9f 4f       	sbci	r25, 0xFF	; 255
    6bde:	99 23       	and	r25, r25
    6be0:	a9 f0       	breq	.+42     	; 0x6c0c <__floatsisf+0x40>
    6be2:	f9 2f       	mov	r31, r25
    6be4:	96 e9       	ldi	r25, 0x96	; 150
    6be6:	bb 27       	eor	r27, r27
    6be8:	93 95       	inc	r25
    6bea:	f6 95       	lsr	r31
    6bec:	87 95       	ror	r24
    6bee:	77 95       	ror	r23
    6bf0:	67 95       	ror	r22
    6bf2:	b7 95       	ror	r27
    6bf4:	f1 11       	cpse	r31, r1
    6bf6:	f8 cf       	rjmp	.-16     	; 0x6be8 <__floatsisf+0x1c>
    6bf8:	fa f4       	brpl	.+62     	; 0x6c38 <__floatsisf+0x6c>
    6bfa:	bb 0f       	add	r27, r27
    6bfc:	11 f4       	brne	.+4      	; 0x6c02 <__floatsisf+0x36>
    6bfe:	60 ff       	sbrs	r22, 0
    6c00:	1b c0       	rjmp	.+54     	; 0x6c38 <__floatsisf+0x6c>
    6c02:	6f 5f       	subi	r22, 0xFF	; 255
    6c04:	7f 4f       	sbci	r23, 0xFF	; 255
    6c06:	8f 4f       	sbci	r24, 0xFF	; 255
    6c08:	9f 4f       	sbci	r25, 0xFF	; 255
    6c0a:	16 c0       	rjmp	.+44     	; 0x6c38 <__floatsisf+0x6c>
    6c0c:	88 23       	and	r24, r24
    6c0e:	11 f0       	breq	.+4      	; 0x6c14 <__floatsisf+0x48>
    6c10:	96 e9       	ldi	r25, 0x96	; 150
    6c12:	11 c0       	rjmp	.+34     	; 0x6c36 <__floatsisf+0x6a>
    6c14:	77 23       	and	r23, r23
    6c16:	21 f0       	breq	.+8      	; 0x6c20 <__floatsisf+0x54>
    6c18:	9e e8       	ldi	r25, 0x8E	; 142
    6c1a:	87 2f       	mov	r24, r23
    6c1c:	76 2f       	mov	r23, r22
    6c1e:	05 c0       	rjmp	.+10     	; 0x6c2a <__floatsisf+0x5e>
    6c20:	66 23       	and	r22, r22
    6c22:	71 f0       	breq	.+28     	; 0x6c40 <__floatsisf+0x74>
    6c24:	96 e8       	ldi	r25, 0x86	; 134
    6c26:	86 2f       	mov	r24, r22
    6c28:	70 e0       	ldi	r23, 0x00	; 0
    6c2a:	60 e0       	ldi	r22, 0x00	; 0
    6c2c:	2a f0       	brmi	.+10     	; 0x6c38 <__floatsisf+0x6c>
    6c2e:	9a 95       	dec	r25
    6c30:	66 0f       	add	r22, r22
    6c32:	77 1f       	adc	r23, r23
    6c34:	88 1f       	adc	r24, r24
    6c36:	da f7       	brpl	.-10     	; 0x6c2e <__floatsisf+0x62>
    6c38:	88 0f       	add	r24, r24
    6c3a:	96 95       	lsr	r25
    6c3c:	87 95       	ror	r24
    6c3e:	97 f9       	bld	r25, 7
    6c40:	08 95       	ret

00006c42 <__fp_cmp>:
    6c42:	99 0f       	add	r25, r25
    6c44:	00 08       	sbc	r0, r0
    6c46:	55 0f       	add	r21, r21
    6c48:	aa 0b       	sbc	r26, r26
    6c4a:	e0 e8       	ldi	r30, 0x80	; 128
    6c4c:	fe ef       	ldi	r31, 0xFE	; 254
    6c4e:	16 16       	cp	r1, r22
    6c50:	17 06       	cpc	r1, r23
    6c52:	e8 07       	cpc	r30, r24
    6c54:	f9 07       	cpc	r31, r25
    6c56:	c0 f0       	brcs	.+48     	; 0x6c88 <__fp_cmp+0x46>
    6c58:	12 16       	cp	r1, r18
    6c5a:	13 06       	cpc	r1, r19
    6c5c:	e4 07       	cpc	r30, r20
    6c5e:	f5 07       	cpc	r31, r21
    6c60:	98 f0       	brcs	.+38     	; 0x6c88 <__fp_cmp+0x46>
    6c62:	62 1b       	sub	r22, r18
    6c64:	73 0b       	sbc	r23, r19
    6c66:	84 0b       	sbc	r24, r20
    6c68:	95 0b       	sbc	r25, r21
    6c6a:	39 f4       	brne	.+14     	; 0x6c7a <__fp_cmp+0x38>
    6c6c:	0a 26       	eor	r0, r26
    6c6e:	61 f0       	breq	.+24     	; 0x6c88 <__fp_cmp+0x46>
    6c70:	23 2b       	or	r18, r19
    6c72:	24 2b       	or	r18, r20
    6c74:	25 2b       	or	r18, r21
    6c76:	21 f4       	brne	.+8      	; 0x6c80 <__fp_cmp+0x3e>
    6c78:	08 95       	ret
    6c7a:	0a 26       	eor	r0, r26
    6c7c:	09 f4       	brne	.+2      	; 0x6c80 <__fp_cmp+0x3e>
    6c7e:	a1 40       	sbci	r26, 0x01	; 1
    6c80:	a6 95       	lsr	r26
    6c82:	8f ef       	ldi	r24, 0xFF	; 255
    6c84:	81 1d       	adc	r24, r1
    6c86:	81 1d       	adc	r24, r1
    6c88:	08 95       	ret

00006c8a <__fp_inf>:
    6c8a:	97 f9       	bld	r25, 7
    6c8c:	9f 67       	ori	r25, 0x7F	; 127
    6c8e:	80 e8       	ldi	r24, 0x80	; 128
    6c90:	70 e0       	ldi	r23, 0x00	; 0
    6c92:	60 e0       	ldi	r22, 0x00	; 0
    6c94:	08 95       	ret

00006c96 <__fp_nan>:
    6c96:	9f ef       	ldi	r25, 0xFF	; 255
    6c98:	80 ec       	ldi	r24, 0xC0	; 192
    6c9a:	08 95       	ret

00006c9c <__fp_pscA>:
    6c9c:	00 24       	eor	r0, r0
    6c9e:	0a 94       	dec	r0
    6ca0:	16 16       	cp	r1, r22
    6ca2:	17 06       	cpc	r1, r23
    6ca4:	18 06       	cpc	r1, r24
    6ca6:	09 06       	cpc	r0, r25
    6ca8:	08 95       	ret

00006caa <__fp_pscB>:
    6caa:	00 24       	eor	r0, r0
    6cac:	0a 94       	dec	r0
    6cae:	12 16       	cp	r1, r18
    6cb0:	13 06       	cpc	r1, r19
    6cb2:	14 06       	cpc	r1, r20
    6cb4:	05 06       	cpc	r0, r21
    6cb6:	08 95       	ret

00006cb8 <__fp_round>:
    6cb8:	09 2e       	mov	r0, r25
    6cba:	03 94       	inc	r0
    6cbc:	00 0c       	add	r0, r0
    6cbe:	11 f4       	brne	.+4      	; 0x6cc4 <__fp_round+0xc>
    6cc0:	88 23       	and	r24, r24
    6cc2:	52 f0       	brmi	.+20     	; 0x6cd8 <__fp_round+0x20>
    6cc4:	bb 0f       	add	r27, r27
    6cc6:	40 f4       	brcc	.+16     	; 0x6cd8 <__fp_round+0x20>
    6cc8:	bf 2b       	or	r27, r31
    6cca:	11 f4       	brne	.+4      	; 0x6cd0 <__fp_round+0x18>
    6ccc:	60 ff       	sbrs	r22, 0
    6cce:	04 c0       	rjmp	.+8      	; 0x6cd8 <__fp_round+0x20>
    6cd0:	6f 5f       	subi	r22, 0xFF	; 255
    6cd2:	7f 4f       	sbci	r23, 0xFF	; 255
    6cd4:	8f 4f       	sbci	r24, 0xFF	; 255
    6cd6:	9f 4f       	sbci	r25, 0xFF	; 255
    6cd8:	08 95       	ret

00006cda <__fp_split3>:
    6cda:	57 fd       	sbrc	r21, 7
    6cdc:	90 58       	subi	r25, 0x80	; 128
    6cde:	44 0f       	add	r20, r20
    6ce0:	55 1f       	adc	r21, r21
    6ce2:	59 f0       	breq	.+22     	; 0x6cfa <__fp_splitA+0x10>
    6ce4:	5f 3f       	cpi	r21, 0xFF	; 255
    6ce6:	71 f0       	breq	.+28     	; 0x6d04 <__fp_splitA+0x1a>
    6ce8:	47 95       	ror	r20

00006cea <__fp_splitA>:
    6cea:	88 0f       	add	r24, r24
    6cec:	97 fb       	bst	r25, 7
    6cee:	99 1f       	adc	r25, r25
    6cf0:	61 f0       	breq	.+24     	; 0x6d0a <__fp_splitA+0x20>
    6cf2:	9f 3f       	cpi	r25, 0xFF	; 255
    6cf4:	79 f0       	breq	.+30     	; 0x6d14 <__fp_splitA+0x2a>
    6cf6:	87 95       	ror	r24
    6cf8:	08 95       	ret
    6cfa:	12 16       	cp	r1, r18
    6cfc:	13 06       	cpc	r1, r19
    6cfe:	14 06       	cpc	r1, r20
    6d00:	55 1f       	adc	r21, r21
    6d02:	f2 cf       	rjmp	.-28     	; 0x6ce8 <__fp_split3+0xe>
    6d04:	46 95       	lsr	r20
    6d06:	f1 df       	rcall	.-30     	; 0x6cea <__fp_splitA>
    6d08:	08 c0       	rjmp	.+16     	; 0x6d1a <__fp_splitA+0x30>
    6d0a:	16 16       	cp	r1, r22
    6d0c:	17 06       	cpc	r1, r23
    6d0e:	18 06       	cpc	r1, r24
    6d10:	99 1f       	adc	r25, r25
    6d12:	f1 cf       	rjmp	.-30     	; 0x6cf6 <__fp_splitA+0xc>
    6d14:	86 95       	lsr	r24
    6d16:	71 05       	cpc	r23, r1
    6d18:	61 05       	cpc	r22, r1
    6d1a:	08 94       	sec
    6d1c:	08 95       	ret

00006d1e <__fp_zero>:
    6d1e:	e8 94       	clt

00006d20 <__fp_szero>:
    6d20:	bb 27       	eor	r27, r27
    6d22:	66 27       	eor	r22, r22
    6d24:	77 27       	eor	r23, r23
    6d26:	cb 01       	movw	r24, r22
    6d28:	97 f9       	bld	r25, 7
    6d2a:	08 95       	ret

00006d2c <__gesf2>:
    6d2c:	0e 94 21 36 	call	0x6c42	; 0x6c42 <__fp_cmp>
    6d30:	08 f4       	brcc	.+2      	; 0x6d34 <__gesf2+0x8>
    6d32:	8f ef       	ldi	r24, 0xFF	; 255
    6d34:	08 95       	ret

00006d36 <log10>:
    6d36:	0e 94 ab 36 	call	0x6d56	; 0x6d56 <log>
    6d3a:	29 ed       	ldi	r18, 0xD9	; 217
    6d3c:	3b e5       	ldi	r19, 0x5B	; 91
    6d3e:	4e ed       	ldi	r20, 0xDE	; 222
    6d40:	5e e3       	ldi	r21, 0x3E	; 62
    6d42:	0c 94 f3 36 	jmp	0x6de6	; 0x6de6 <__mulsf3>
    6d46:	16 f0       	brts	.+4      	; 0x6d4c <log10+0x16>
    6d48:	0c 94 9f 37 	jmp	0x6f3e	; 0x6f3e <__fp_mpack>
    6d4c:	0c 94 4b 36 	jmp	0x6c96	; 0x6c96 <__fp_nan>
    6d50:	68 94       	set
    6d52:	0c 94 45 36 	jmp	0x6c8a	; 0x6c8a <__fp_inf>

00006d56 <log>:
    6d56:	0e 94 75 36 	call	0x6cea	; 0x6cea <__fp_splitA>
    6d5a:	a8 f3       	brcs	.-22     	; 0x6d46 <log10+0x10>
    6d5c:	99 23       	and	r25, r25
    6d5e:	c1 f3       	breq	.-16     	; 0x6d50 <log10+0x1a>
    6d60:	ae f3       	brts	.-22     	; 0x6d4c <log10+0x16>
    6d62:	df 93       	push	r29
    6d64:	cf 93       	push	r28
    6d66:	1f 93       	push	r17
    6d68:	0f 93       	push	r16
    6d6a:	ff 92       	push	r15
    6d6c:	c9 2f       	mov	r28, r25
    6d6e:	dd 27       	eor	r29, r29
    6d70:	88 23       	and	r24, r24
    6d72:	2a f0       	brmi	.+10     	; 0x6d7e <log+0x28>
    6d74:	21 97       	sbiw	r28, 0x01	; 1
    6d76:	66 0f       	add	r22, r22
    6d78:	77 1f       	adc	r23, r23
    6d7a:	88 1f       	adc	r24, r24
    6d7c:	da f7       	brpl	.-10     	; 0x6d74 <log+0x1e>
    6d7e:	20 e0       	ldi	r18, 0x00	; 0
    6d80:	30 e0       	ldi	r19, 0x00	; 0
    6d82:	40 e8       	ldi	r20, 0x80	; 128
    6d84:	5f eb       	ldi	r21, 0xBF	; 191
    6d86:	9f e3       	ldi	r25, 0x3F	; 63
    6d88:	88 39       	cpi	r24, 0x98	; 152
    6d8a:	20 f0       	brcs	.+8      	; 0x6d94 <log+0x3e>
    6d8c:	80 3e       	cpi	r24, 0xE0	; 224
    6d8e:	38 f0       	brcs	.+14     	; 0x6d9e <log+0x48>
    6d90:	21 96       	adiw	r28, 0x01	; 1
    6d92:	8f 77       	andi	r24, 0x7F	; 127
    6d94:	0e 94 cb 34 	call	0x6996	; 0x6996 <__addsf3>
    6d98:	ee e1       	ldi	r30, 0x1E	; 30
    6d9a:	f2 e0       	ldi	r31, 0x02	; 2
    6d9c:	04 c0       	rjmp	.+8      	; 0x6da6 <log+0x50>
    6d9e:	0e 94 cb 34 	call	0x6996	; 0x6996 <__addsf3>
    6da2:	eb e4       	ldi	r30, 0x4B	; 75
    6da4:	f2 e0       	ldi	r31, 0x02	; 2
    6da6:	0e 94 ad 37 	call	0x6f5a	; 0x6f5a <__fp_powser>
    6daa:	8b 01       	movw	r16, r22
    6dac:	be 01       	movw	r22, r28
    6dae:	ec 01       	movw	r28, r24
    6db0:	fb 2e       	mov	r15, r27
    6db2:	6f 57       	subi	r22, 0x7F	; 127
    6db4:	71 09       	sbc	r23, r1
    6db6:	75 95       	asr	r23
    6db8:	77 1f       	adc	r23, r23
    6dba:	88 0b       	sbc	r24, r24
    6dbc:	99 0b       	sbc	r25, r25
    6dbe:	0e 94 e6 35 	call	0x6bcc	; 0x6bcc <__floatsisf>
    6dc2:	28 e1       	ldi	r18, 0x18	; 24
    6dc4:	32 e7       	ldi	r19, 0x72	; 114
    6dc6:	41 e3       	ldi	r20, 0x31	; 49
    6dc8:	5f e3       	ldi	r21, 0x3F	; 63
    6dca:	0e 94 06 37 	call	0x6e0c	; 0x6e0c <__mulsf3x>
    6dce:	af 2d       	mov	r26, r15
    6dd0:	98 01       	movw	r18, r16
    6dd2:	ae 01       	movw	r20, r28
    6dd4:	ff 90       	pop	r15
    6dd6:	0f 91       	pop	r16
    6dd8:	1f 91       	pop	r17
    6dda:	cf 91       	pop	r28
    6ddc:	df 91       	pop	r29
    6dde:	0e 94 e2 34 	call	0x69c4	; 0x69c4 <__addsf3x>
    6de2:	0c 94 5c 36 	jmp	0x6cb8	; 0x6cb8 <__fp_round>

00006de6 <__mulsf3>:
    6de6:	0e 94 06 37 	call	0x6e0c	; 0x6e0c <__mulsf3x>
    6dea:	0c 94 5c 36 	jmp	0x6cb8	; 0x6cb8 <__fp_round>
    6dee:	0e 94 4e 36 	call	0x6c9c	; 0x6c9c <__fp_pscA>
    6df2:	38 f0       	brcs	.+14     	; 0x6e02 <__mulsf3+0x1c>
    6df4:	0e 94 55 36 	call	0x6caa	; 0x6caa <__fp_pscB>
    6df8:	20 f0       	brcs	.+8      	; 0x6e02 <__mulsf3+0x1c>
    6dfa:	95 23       	and	r25, r21
    6dfc:	11 f0       	breq	.+4      	; 0x6e02 <__mulsf3+0x1c>
    6dfe:	0c 94 45 36 	jmp	0x6c8a	; 0x6c8a <__fp_inf>
    6e02:	0c 94 4b 36 	jmp	0x6c96	; 0x6c96 <__fp_nan>
    6e06:	11 24       	eor	r1, r1
    6e08:	0c 94 90 36 	jmp	0x6d20	; 0x6d20 <__fp_szero>

00006e0c <__mulsf3x>:
    6e0c:	0e 94 6d 36 	call	0x6cda	; 0x6cda <__fp_split3>
    6e10:	70 f3       	brcs	.-36     	; 0x6dee <__mulsf3+0x8>

00006e12 <__mulsf3_pse>:
    6e12:	95 9f       	mul	r25, r21
    6e14:	c1 f3       	breq	.-16     	; 0x6e06 <__mulsf3+0x20>
    6e16:	95 0f       	add	r25, r21
    6e18:	50 e0       	ldi	r21, 0x00	; 0
    6e1a:	55 1f       	adc	r21, r21
    6e1c:	62 9f       	mul	r22, r18
    6e1e:	f0 01       	movw	r30, r0
    6e20:	72 9f       	mul	r23, r18
    6e22:	bb 27       	eor	r27, r27
    6e24:	f0 0d       	add	r31, r0
    6e26:	b1 1d       	adc	r27, r1
    6e28:	63 9f       	mul	r22, r19
    6e2a:	aa 27       	eor	r26, r26
    6e2c:	f0 0d       	add	r31, r0
    6e2e:	b1 1d       	adc	r27, r1
    6e30:	aa 1f       	adc	r26, r26
    6e32:	64 9f       	mul	r22, r20
    6e34:	66 27       	eor	r22, r22
    6e36:	b0 0d       	add	r27, r0
    6e38:	a1 1d       	adc	r26, r1
    6e3a:	66 1f       	adc	r22, r22
    6e3c:	82 9f       	mul	r24, r18
    6e3e:	22 27       	eor	r18, r18
    6e40:	b0 0d       	add	r27, r0
    6e42:	a1 1d       	adc	r26, r1
    6e44:	62 1f       	adc	r22, r18
    6e46:	73 9f       	mul	r23, r19
    6e48:	b0 0d       	add	r27, r0
    6e4a:	a1 1d       	adc	r26, r1
    6e4c:	62 1f       	adc	r22, r18
    6e4e:	83 9f       	mul	r24, r19
    6e50:	a0 0d       	add	r26, r0
    6e52:	61 1d       	adc	r22, r1
    6e54:	22 1f       	adc	r18, r18
    6e56:	74 9f       	mul	r23, r20
    6e58:	33 27       	eor	r19, r19
    6e5a:	a0 0d       	add	r26, r0
    6e5c:	61 1d       	adc	r22, r1
    6e5e:	23 1f       	adc	r18, r19
    6e60:	84 9f       	mul	r24, r20
    6e62:	60 0d       	add	r22, r0
    6e64:	21 1d       	adc	r18, r1
    6e66:	82 2f       	mov	r24, r18
    6e68:	76 2f       	mov	r23, r22
    6e6a:	6a 2f       	mov	r22, r26
    6e6c:	11 24       	eor	r1, r1
    6e6e:	9f 57       	subi	r25, 0x7F	; 127
    6e70:	50 40       	sbci	r21, 0x00	; 0
    6e72:	9a f0       	brmi	.+38     	; 0x6e9a <__mulsf3_pse+0x88>
    6e74:	f1 f0       	breq	.+60     	; 0x6eb2 <__mulsf3_pse+0xa0>
    6e76:	88 23       	and	r24, r24
    6e78:	4a f0       	brmi	.+18     	; 0x6e8c <__mulsf3_pse+0x7a>
    6e7a:	ee 0f       	add	r30, r30
    6e7c:	ff 1f       	adc	r31, r31
    6e7e:	bb 1f       	adc	r27, r27
    6e80:	66 1f       	adc	r22, r22
    6e82:	77 1f       	adc	r23, r23
    6e84:	88 1f       	adc	r24, r24
    6e86:	91 50       	subi	r25, 0x01	; 1
    6e88:	50 40       	sbci	r21, 0x00	; 0
    6e8a:	a9 f7       	brne	.-22     	; 0x6e76 <__mulsf3_pse+0x64>
    6e8c:	9e 3f       	cpi	r25, 0xFE	; 254
    6e8e:	51 05       	cpc	r21, r1
    6e90:	80 f0       	brcs	.+32     	; 0x6eb2 <__mulsf3_pse+0xa0>
    6e92:	0c 94 45 36 	jmp	0x6c8a	; 0x6c8a <__fp_inf>
    6e96:	0c 94 90 36 	jmp	0x6d20	; 0x6d20 <__fp_szero>
    6e9a:	5f 3f       	cpi	r21, 0xFF	; 255
    6e9c:	e4 f3       	brlt	.-8      	; 0x6e96 <__mulsf3_pse+0x84>
    6e9e:	98 3e       	cpi	r25, 0xE8	; 232
    6ea0:	d4 f3       	brlt	.-12     	; 0x6e96 <__mulsf3_pse+0x84>
    6ea2:	86 95       	lsr	r24
    6ea4:	77 95       	ror	r23
    6ea6:	67 95       	ror	r22
    6ea8:	b7 95       	ror	r27
    6eaa:	f7 95       	ror	r31
    6eac:	e7 95       	ror	r30
    6eae:	9f 5f       	subi	r25, 0xFF	; 255
    6eb0:	c1 f7       	brne	.-16     	; 0x6ea2 <__mulsf3_pse+0x90>
    6eb2:	fe 2b       	or	r31, r30
    6eb4:	88 0f       	add	r24, r24
    6eb6:	91 1d       	adc	r25, r1
    6eb8:	96 95       	lsr	r25
    6eba:	87 95       	ror	r24
    6ebc:	97 f9       	bld	r25, 7
    6ebe:	08 95       	ret

00006ec0 <round>:
    6ec0:	0e 94 75 36 	call	0x6cea	; 0x6cea <__fp_splitA>
    6ec4:	e8 f0       	brcs	.+58     	; 0x6f00 <round+0x40>
    6ec6:	9e 37       	cpi	r25, 0x7E	; 126
    6ec8:	e8 f0       	brcs	.+58     	; 0x6f04 <round+0x44>
    6eca:	96 39       	cpi	r25, 0x96	; 150
    6ecc:	b8 f4       	brcc	.+46     	; 0x6efc <round+0x3c>
    6ece:	9e 38       	cpi	r25, 0x8E	; 142
    6ed0:	48 f4       	brcc	.+18     	; 0x6ee4 <round+0x24>
    6ed2:	67 2f       	mov	r22, r23
    6ed4:	78 2f       	mov	r23, r24
    6ed6:	88 27       	eor	r24, r24
    6ed8:	98 5f       	subi	r25, 0xF8	; 248
    6eda:	f9 cf       	rjmp	.-14     	; 0x6ece <round+0xe>
    6edc:	86 95       	lsr	r24
    6ede:	77 95       	ror	r23
    6ee0:	67 95       	ror	r22
    6ee2:	93 95       	inc	r25
    6ee4:	95 39       	cpi	r25, 0x95	; 149
    6ee6:	d0 f3       	brcs	.-12     	; 0x6edc <round+0x1c>
    6ee8:	b6 2f       	mov	r27, r22
    6eea:	b1 70       	andi	r27, 0x01	; 1
    6eec:	6b 0f       	add	r22, r27
    6eee:	71 1d       	adc	r23, r1
    6ef0:	81 1d       	adc	r24, r1
    6ef2:	20 f4       	brcc	.+8      	; 0x6efc <round+0x3c>
    6ef4:	87 95       	ror	r24
    6ef6:	77 95       	ror	r23
    6ef8:	67 95       	ror	r22
    6efa:	93 95       	inc	r25
    6efc:	0c 94 84 37 	jmp	0x6f08	; 0x6f08 <__fp_mintl>
    6f00:	0c 94 9f 37 	jmp	0x6f3e	; 0x6f3e <__fp_mpack>
    6f04:	0c 94 90 36 	jmp	0x6d20	; 0x6d20 <__fp_szero>

00006f08 <__fp_mintl>:
    6f08:	88 23       	and	r24, r24
    6f0a:	71 f4       	brne	.+28     	; 0x6f28 <__fp_mintl+0x20>
    6f0c:	77 23       	and	r23, r23
    6f0e:	21 f0       	breq	.+8      	; 0x6f18 <__fp_mintl+0x10>
    6f10:	98 50       	subi	r25, 0x08	; 8
    6f12:	87 2b       	or	r24, r23
    6f14:	76 2f       	mov	r23, r22
    6f16:	07 c0       	rjmp	.+14     	; 0x6f26 <__fp_mintl+0x1e>
    6f18:	66 23       	and	r22, r22
    6f1a:	11 f4       	brne	.+4      	; 0x6f20 <__fp_mintl+0x18>
    6f1c:	99 27       	eor	r25, r25
    6f1e:	0d c0       	rjmp	.+26     	; 0x6f3a <__fp_mintl+0x32>
    6f20:	90 51       	subi	r25, 0x10	; 16
    6f22:	86 2b       	or	r24, r22
    6f24:	70 e0       	ldi	r23, 0x00	; 0
    6f26:	60 e0       	ldi	r22, 0x00	; 0
    6f28:	2a f0       	brmi	.+10     	; 0x6f34 <__fp_mintl+0x2c>
    6f2a:	9a 95       	dec	r25
    6f2c:	66 0f       	add	r22, r22
    6f2e:	77 1f       	adc	r23, r23
    6f30:	88 1f       	adc	r24, r24
    6f32:	da f7       	brpl	.-10     	; 0x6f2a <__fp_mintl+0x22>
    6f34:	88 0f       	add	r24, r24
    6f36:	96 95       	lsr	r25
    6f38:	87 95       	ror	r24
    6f3a:	97 f9       	bld	r25, 7
    6f3c:	08 95       	ret

00006f3e <__fp_mpack>:
    6f3e:	9f 3f       	cpi	r25, 0xFF	; 255
    6f40:	31 f0       	breq	.+12     	; 0x6f4e <__fp_mpack_finite+0xc>

00006f42 <__fp_mpack_finite>:
    6f42:	91 50       	subi	r25, 0x01	; 1
    6f44:	20 f4       	brcc	.+8      	; 0x6f4e <__fp_mpack_finite+0xc>
    6f46:	87 95       	ror	r24
    6f48:	77 95       	ror	r23
    6f4a:	67 95       	ror	r22
    6f4c:	b7 95       	ror	r27
    6f4e:	88 0f       	add	r24, r24
    6f50:	91 1d       	adc	r25, r1
    6f52:	96 95       	lsr	r25
    6f54:	87 95       	ror	r24
    6f56:	97 f9       	bld	r25, 7
    6f58:	08 95       	ret

00006f5a <__fp_powser>:
    6f5a:	df 93       	push	r29
    6f5c:	cf 93       	push	r28
    6f5e:	1f 93       	push	r17
    6f60:	0f 93       	push	r16
    6f62:	ff 92       	push	r15
    6f64:	ef 92       	push	r14
    6f66:	df 92       	push	r13
    6f68:	7b 01       	movw	r14, r22
    6f6a:	8c 01       	movw	r16, r24
    6f6c:	68 94       	set
    6f6e:	06 c0       	rjmp	.+12     	; 0x6f7c <__fp_powser+0x22>
    6f70:	da 2e       	mov	r13, r26
    6f72:	ef 01       	movw	r28, r30
    6f74:	0e 94 06 37 	call	0x6e0c	; 0x6e0c <__mulsf3x>
    6f78:	fe 01       	movw	r30, r28
    6f7a:	e8 94       	clt
    6f7c:	a5 91       	lpm	r26, Z+
    6f7e:	25 91       	lpm	r18, Z+
    6f80:	35 91       	lpm	r19, Z+
    6f82:	45 91       	lpm	r20, Z+
    6f84:	55 91       	lpm	r21, Z+
    6f86:	a6 f3       	brts	.-24     	; 0x6f70 <__fp_powser+0x16>
    6f88:	ef 01       	movw	r28, r30
    6f8a:	0e 94 e2 34 	call	0x69c4	; 0x69c4 <__addsf3x>
    6f8e:	fe 01       	movw	r30, r28
    6f90:	97 01       	movw	r18, r14
    6f92:	a8 01       	movw	r20, r16
    6f94:	da 94       	dec	r13
    6f96:	69 f7       	brne	.-38     	; 0x6f72 <__fp_powser+0x18>
    6f98:	df 90       	pop	r13
    6f9a:	ef 90       	pop	r14
    6f9c:	ff 90       	pop	r15
    6f9e:	0f 91       	pop	r16
    6fa0:	1f 91       	pop	r17
    6fa2:	cf 91       	pop	r28
    6fa4:	df 91       	pop	r29
    6fa6:	08 95       	ret

00006fa8 <__udivmodhi4>:
    6fa8:	aa 1b       	sub	r26, r26
    6faa:	bb 1b       	sub	r27, r27
    6fac:	51 e1       	ldi	r21, 0x11	; 17
    6fae:	07 c0       	rjmp	.+14     	; 0x6fbe <__udivmodhi4_ep>

00006fb0 <__udivmodhi4_loop>:
    6fb0:	aa 1f       	adc	r26, r26
    6fb2:	bb 1f       	adc	r27, r27
    6fb4:	a6 17       	cp	r26, r22
    6fb6:	b7 07       	cpc	r27, r23
    6fb8:	10 f0       	brcs	.+4      	; 0x6fbe <__udivmodhi4_ep>
    6fba:	a6 1b       	sub	r26, r22
    6fbc:	b7 0b       	sbc	r27, r23

00006fbe <__udivmodhi4_ep>:
    6fbe:	88 1f       	adc	r24, r24
    6fc0:	99 1f       	adc	r25, r25
    6fc2:	5a 95       	dec	r21
    6fc4:	a9 f7       	brne	.-22     	; 0x6fb0 <__udivmodhi4_loop>
    6fc6:	80 95       	com	r24
    6fc8:	90 95       	com	r25
    6fca:	bc 01       	movw	r22, r24
    6fcc:	cd 01       	movw	r24, r26
    6fce:	08 95       	ret

00006fd0 <__divmodhi4>:
    6fd0:	97 fb       	bst	r25, 7
    6fd2:	07 2e       	mov	r0, r23
    6fd4:	16 f4       	brtc	.+4      	; 0x6fda <__divmodhi4+0xa>
    6fd6:	00 94       	com	r0
    6fd8:	07 d0       	rcall	.+14     	; 0x6fe8 <__divmodhi4_neg1>
    6fda:	77 fd       	sbrc	r23, 7
    6fdc:	09 d0       	rcall	.+18     	; 0x6ff0 <__divmodhi4_neg2>
    6fde:	0e 94 d4 37 	call	0x6fa8	; 0x6fa8 <__udivmodhi4>
    6fe2:	07 fc       	sbrc	r0, 7
    6fe4:	05 d0       	rcall	.+10     	; 0x6ff0 <__divmodhi4_neg2>
    6fe6:	3e f4       	brtc	.+14     	; 0x6ff6 <__divmodhi4_exit>

00006fe8 <__divmodhi4_neg1>:
    6fe8:	90 95       	com	r25
    6fea:	81 95       	neg	r24
    6fec:	9f 4f       	sbci	r25, 0xFF	; 255
    6fee:	08 95       	ret

00006ff0 <__divmodhi4_neg2>:
    6ff0:	70 95       	com	r23
    6ff2:	61 95       	neg	r22
    6ff4:	7f 4f       	sbci	r23, 0xFF	; 255

00006ff6 <__divmodhi4_exit>:
    6ff6:	08 95       	ret

00006ff8 <__udivmodsi4>:
    6ff8:	a1 e2       	ldi	r26, 0x21	; 33
    6ffa:	1a 2e       	mov	r1, r26
    6ffc:	aa 1b       	sub	r26, r26
    6ffe:	bb 1b       	sub	r27, r27
    7000:	fd 01       	movw	r30, r26
    7002:	0d c0       	rjmp	.+26     	; 0x701e <__udivmodsi4_ep>

00007004 <__udivmodsi4_loop>:
    7004:	aa 1f       	adc	r26, r26
    7006:	bb 1f       	adc	r27, r27
    7008:	ee 1f       	adc	r30, r30
    700a:	ff 1f       	adc	r31, r31
    700c:	a2 17       	cp	r26, r18
    700e:	b3 07       	cpc	r27, r19
    7010:	e4 07       	cpc	r30, r20
    7012:	f5 07       	cpc	r31, r21
    7014:	20 f0       	brcs	.+8      	; 0x701e <__udivmodsi4_ep>
    7016:	a2 1b       	sub	r26, r18
    7018:	b3 0b       	sbc	r27, r19
    701a:	e4 0b       	sbc	r30, r20
    701c:	f5 0b       	sbc	r31, r21

0000701e <__udivmodsi4_ep>:
    701e:	66 1f       	adc	r22, r22
    7020:	77 1f       	adc	r23, r23
    7022:	88 1f       	adc	r24, r24
    7024:	99 1f       	adc	r25, r25
    7026:	1a 94       	dec	r1
    7028:	69 f7       	brne	.-38     	; 0x7004 <__udivmodsi4_loop>
    702a:	60 95       	com	r22
    702c:	70 95       	com	r23
    702e:	80 95       	com	r24
    7030:	90 95       	com	r25
    7032:	9b 01       	movw	r18, r22
    7034:	ac 01       	movw	r20, r24
    7036:	bd 01       	movw	r22, r26
    7038:	cf 01       	movw	r24, r30
    703a:	08 95       	ret

0000703c <__divmodsi4>:
    703c:	05 2e       	mov	r0, r21
    703e:	97 fb       	bst	r25, 7
    7040:	1e f4       	brtc	.+6      	; 0x7048 <__divmodsi4+0xc>
    7042:	00 94       	com	r0
    7044:	0e 94 35 38 	call	0x706a	; 0x706a <__negsi2>
    7048:	57 fd       	sbrc	r21, 7
    704a:	07 d0       	rcall	.+14     	; 0x705a <__divmodsi4_neg2>
    704c:	0e 94 fc 37 	call	0x6ff8	; 0x6ff8 <__udivmodsi4>
    7050:	07 fc       	sbrc	r0, 7
    7052:	03 d0       	rcall	.+6      	; 0x705a <__divmodsi4_neg2>
    7054:	4e f4       	brtc	.+18     	; 0x7068 <__divmodsi4_exit>
    7056:	0c 94 35 38 	jmp	0x706a	; 0x706a <__negsi2>

0000705a <__divmodsi4_neg2>:
    705a:	50 95       	com	r21
    705c:	40 95       	com	r20
    705e:	30 95       	com	r19
    7060:	21 95       	neg	r18
    7062:	3f 4f       	sbci	r19, 0xFF	; 255
    7064:	4f 4f       	sbci	r20, 0xFF	; 255
    7066:	5f 4f       	sbci	r21, 0xFF	; 255

00007068 <__divmodsi4_exit>:
    7068:	08 95       	ret

0000706a <__negsi2>:
    706a:	90 95       	com	r25
    706c:	80 95       	com	r24
    706e:	70 95       	com	r23
    7070:	61 95       	neg	r22
    7072:	7f 4f       	sbci	r23, 0xFF	; 255
    7074:	8f 4f       	sbci	r24, 0xFF	; 255
    7076:	9f 4f       	sbci	r25, 0xFF	; 255
    7078:	08 95       	ret

0000707a <__tablejump2__>:
    707a:	ee 0f       	add	r30, r30
    707c:	ff 1f       	adc	r31, r31
    707e:	05 90       	lpm	r0, Z+
    7080:	f4 91       	lpm	r31, Z
    7082:	e0 2d       	mov	r30, r0
    7084:	09 94       	ijmp

00007086 <__umoddi3>:
    7086:	68 94       	set
    7088:	01 c0       	rjmp	.+2      	; 0x708c <__udivdi3_umoddi3>

0000708a <__udivdi3>:
    708a:	e8 94       	clt

0000708c <__udivdi3_umoddi3>:
    708c:	8f 92       	push	r8
    708e:	9f 92       	push	r9
    7090:	cf 93       	push	r28
    7092:	df 93       	push	r29
    7094:	0e 94 51 38 	call	0x70a2	; 0x70a2 <__udivmod64>
    7098:	df 91       	pop	r29
    709a:	cf 91       	pop	r28
    709c:	9f 90       	pop	r9
    709e:	8f 90       	pop	r8
    70a0:	08 95       	ret

000070a2 <__udivmod64>:
    70a2:	88 24       	eor	r8, r8
    70a4:	99 24       	eor	r9, r9
    70a6:	f4 01       	movw	r30, r8
    70a8:	e4 01       	movw	r28, r8
    70aa:	b0 e4       	ldi	r27, 0x40	; 64
    70ac:	9f 93       	push	r25
    70ae:	aa 27       	eor	r26, r26
    70b0:	9a 15       	cp	r25, r10
    70b2:	8b 04       	cpc	r8, r11
    70b4:	9c 04       	cpc	r9, r12
    70b6:	ed 05       	cpc	r30, r13
    70b8:	fe 05       	cpc	r31, r14
    70ba:	cf 05       	cpc	r28, r15
    70bc:	d0 07       	cpc	r29, r16
    70be:	a1 07       	cpc	r26, r17
    70c0:	98 f4       	brcc	.+38     	; 0x70e8 <__udivmod64+0x46>
    70c2:	ad 2f       	mov	r26, r29
    70c4:	dc 2f       	mov	r29, r28
    70c6:	cf 2f       	mov	r28, r31
    70c8:	fe 2f       	mov	r31, r30
    70ca:	e9 2d       	mov	r30, r9
    70cc:	98 2c       	mov	r9, r8
    70ce:	89 2e       	mov	r8, r25
    70d0:	98 2f       	mov	r25, r24
    70d2:	87 2f       	mov	r24, r23
    70d4:	76 2f       	mov	r23, r22
    70d6:	65 2f       	mov	r22, r21
    70d8:	54 2f       	mov	r21, r20
    70da:	43 2f       	mov	r20, r19
    70dc:	32 2f       	mov	r19, r18
    70de:	22 27       	eor	r18, r18
    70e0:	b8 50       	subi	r27, 0x08	; 8
    70e2:	31 f7       	brne	.-52     	; 0x70b0 <__udivmod64+0xe>
    70e4:	bf 91       	pop	r27
    70e6:	27 c0       	rjmp	.+78     	; 0x7136 <__udivmod64+0x94>
    70e8:	1b 2e       	mov	r1, r27
    70ea:	bf 91       	pop	r27
    70ec:	bb 27       	eor	r27, r27
    70ee:	22 0f       	add	r18, r18
    70f0:	33 1f       	adc	r19, r19
    70f2:	44 1f       	adc	r20, r20
    70f4:	55 1f       	adc	r21, r21
    70f6:	66 1f       	adc	r22, r22
    70f8:	77 1f       	adc	r23, r23
    70fa:	88 1f       	adc	r24, r24
    70fc:	99 1f       	adc	r25, r25
    70fe:	88 1c       	adc	r8, r8
    7100:	99 1c       	adc	r9, r9
    7102:	ee 1f       	adc	r30, r30
    7104:	ff 1f       	adc	r31, r31
    7106:	cc 1f       	adc	r28, r28
    7108:	dd 1f       	adc	r29, r29
    710a:	aa 1f       	adc	r26, r26
    710c:	bb 1f       	adc	r27, r27
    710e:	8a 14       	cp	r8, r10
    7110:	9b 04       	cpc	r9, r11
    7112:	ec 05       	cpc	r30, r12
    7114:	fd 05       	cpc	r31, r13
    7116:	ce 05       	cpc	r28, r14
    7118:	df 05       	cpc	r29, r15
    711a:	a0 07       	cpc	r26, r16
    711c:	b1 07       	cpc	r27, r17
    711e:	48 f0       	brcs	.+18     	; 0x7132 <__udivmod64+0x90>
    7120:	8a 18       	sub	r8, r10
    7122:	9b 08       	sbc	r9, r11
    7124:	ec 09       	sbc	r30, r12
    7126:	fd 09       	sbc	r31, r13
    7128:	ce 09       	sbc	r28, r14
    712a:	df 09       	sbc	r29, r15
    712c:	a0 0b       	sbc	r26, r16
    712e:	b1 0b       	sbc	r27, r17
    7130:	21 60       	ori	r18, 0x01	; 1
    7132:	1a 94       	dec	r1
    7134:	e1 f6       	brne	.-72     	; 0x70ee <__udivmod64+0x4c>
    7136:	2e f4       	brtc	.+10     	; 0x7142 <__udivmod64+0xa0>
    7138:	94 01       	movw	r18, r8
    713a:	af 01       	movw	r20, r30
    713c:	be 01       	movw	r22, r28
    713e:	cd 01       	movw	r24, r26
    7140:	00 0c       	add	r0, r0
    7142:	08 95       	ret

00007144 <__adddi3_s8>:
    7144:	00 24       	eor	r0, r0
    7146:	a7 fd       	sbrc	r26, 7
    7148:	00 94       	com	r0
    714a:	2a 0f       	add	r18, r26
    714c:	30 1d       	adc	r19, r0
    714e:	40 1d       	adc	r20, r0
    7150:	50 1d       	adc	r21, r0
    7152:	60 1d       	adc	r22, r0
    7154:	70 1d       	adc	r23, r0
    7156:	80 1d       	adc	r24, r0
    7158:	90 1d       	adc	r25, r0
    715a:	08 95       	ret

0000715c <__subdi3>:
    715c:	2a 19       	sub	r18, r10
    715e:	3b 09       	sbc	r19, r11
    7160:	4c 09       	sbc	r20, r12
    7162:	5d 09       	sbc	r21, r13
    7164:	6e 09       	sbc	r22, r14
    7166:	7f 09       	sbc	r23, r15
    7168:	80 0b       	sbc	r24, r16
    716a:	91 0b       	sbc	r25, r17
    716c:	08 95       	ret

0000716e <__cmpdi2_s8>:
    716e:	00 24       	eor	r0, r0
    7170:	a7 fd       	sbrc	r26, 7
    7172:	00 94       	com	r0
    7174:	2a 17       	cp	r18, r26
    7176:	30 05       	cpc	r19, r0
    7178:	40 05       	cpc	r20, r0
    717a:	50 05       	cpc	r21, r0
    717c:	60 05       	cpc	r22, r0
    717e:	70 05       	cpc	r23, r0
    7180:	80 05       	cpc	r24, r0
    7182:	90 05       	cpc	r25, r0
    7184:	08 95       	ret

00007186 <malloc>:
    7186:	0f 93       	push	r16
    7188:	1f 93       	push	r17
    718a:	cf 93       	push	r28
    718c:	df 93       	push	r29
    718e:	82 30       	cpi	r24, 0x02	; 2
    7190:	91 05       	cpc	r25, r1
    7192:	10 f4       	brcc	.+4      	; 0x7198 <malloc+0x12>
    7194:	82 e0       	ldi	r24, 0x02	; 2
    7196:	90 e0       	ldi	r25, 0x00	; 0
    7198:	e0 91 91 25 	lds	r30, 0x2591	; 0x802591 <__flp>
    719c:	f0 91 92 25 	lds	r31, 0x2592	; 0x802592 <__flp+0x1>
    71a0:	20 e0       	ldi	r18, 0x00	; 0
    71a2:	30 e0       	ldi	r19, 0x00	; 0
    71a4:	a0 e0       	ldi	r26, 0x00	; 0
    71a6:	b0 e0       	ldi	r27, 0x00	; 0
    71a8:	30 97       	sbiw	r30, 0x00	; 0
    71aa:	19 f1       	breq	.+70     	; 0x71f2 <malloc+0x6c>
    71ac:	40 81       	ld	r20, Z
    71ae:	51 81       	ldd	r21, Z+1	; 0x01
    71b0:	02 81       	ldd	r16, Z+2	; 0x02
    71b2:	13 81       	ldd	r17, Z+3	; 0x03
    71b4:	48 17       	cp	r20, r24
    71b6:	59 07       	cpc	r21, r25
    71b8:	c8 f0       	brcs	.+50     	; 0x71ec <malloc+0x66>
    71ba:	84 17       	cp	r24, r20
    71bc:	95 07       	cpc	r25, r21
    71be:	69 f4       	brne	.+26     	; 0x71da <malloc+0x54>
    71c0:	10 97       	sbiw	r26, 0x00	; 0
    71c2:	31 f0       	breq	.+12     	; 0x71d0 <malloc+0x4a>
    71c4:	12 96       	adiw	r26, 0x02	; 2
    71c6:	0c 93       	st	X, r16
    71c8:	12 97       	sbiw	r26, 0x02	; 2
    71ca:	13 96       	adiw	r26, 0x03	; 3
    71cc:	1c 93       	st	X, r17
    71ce:	27 c0       	rjmp	.+78     	; 0x721e <malloc+0x98>
    71d0:	00 93 91 25 	sts	0x2591, r16	; 0x802591 <__flp>
    71d4:	10 93 92 25 	sts	0x2592, r17	; 0x802592 <__flp+0x1>
    71d8:	22 c0       	rjmp	.+68     	; 0x721e <malloc+0x98>
    71da:	21 15       	cp	r18, r1
    71dc:	31 05       	cpc	r19, r1
    71de:	19 f0       	breq	.+6      	; 0x71e6 <malloc+0x60>
    71e0:	42 17       	cp	r20, r18
    71e2:	53 07       	cpc	r21, r19
    71e4:	18 f4       	brcc	.+6      	; 0x71ec <malloc+0x66>
    71e6:	9a 01       	movw	r18, r20
    71e8:	bd 01       	movw	r22, r26
    71ea:	ef 01       	movw	r28, r30
    71ec:	df 01       	movw	r26, r30
    71ee:	f8 01       	movw	r30, r16
    71f0:	db cf       	rjmp	.-74     	; 0x71a8 <malloc+0x22>
    71f2:	21 15       	cp	r18, r1
    71f4:	31 05       	cpc	r19, r1
    71f6:	f9 f0       	breq	.+62     	; 0x7236 <malloc+0xb0>
    71f8:	28 1b       	sub	r18, r24
    71fa:	39 0b       	sbc	r19, r25
    71fc:	24 30       	cpi	r18, 0x04	; 4
    71fe:	31 05       	cpc	r19, r1
    7200:	80 f4       	brcc	.+32     	; 0x7222 <malloc+0x9c>
    7202:	8a 81       	ldd	r24, Y+2	; 0x02
    7204:	9b 81       	ldd	r25, Y+3	; 0x03
    7206:	61 15       	cp	r22, r1
    7208:	71 05       	cpc	r23, r1
    720a:	21 f0       	breq	.+8      	; 0x7214 <malloc+0x8e>
    720c:	fb 01       	movw	r30, r22
    720e:	82 83       	std	Z+2, r24	; 0x02
    7210:	93 83       	std	Z+3, r25	; 0x03
    7212:	04 c0       	rjmp	.+8      	; 0x721c <malloc+0x96>
    7214:	80 93 91 25 	sts	0x2591, r24	; 0x802591 <__flp>
    7218:	90 93 92 25 	sts	0x2592, r25	; 0x802592 <__flp+0x1>
    721c:	fe 01       	movw	r30, r28
    721e:	32 96       	adiw	r30, 0x02	; 2
    7220:	44 c0       	rjmp	.+136    	; 0x72aa <malloc+0x124>
    7222:	fe 01       	movw	r30, r28
    7224:	e2 0f       	add	r30, r18
    7226:	f3 1f       	adc	r31, r19
    7228:	81 93       	st	Z+, r24
    722a:	91 93       	st	Z+, r25
    722c:	22 50       	subi	r18, 0x02	; 2
    722e:	31 09       	sbc	r19, r1
    7230:	28 83       	st	Y, r18
    7232:	39 83       	std	Y+1, r19	; 0x01
    7234:	3a c0       	rjmp	.+116    	; 0x72aa <malloc+0x124>
    7236:	20 91 8f 25 	lds	r18, 0x258F	; 0x80258f <__brkval>
    723a:	30 91 90 25 	lds	r19, 0x2590	; 0x802590 <__brkval+0x1>
    723e:	23 2b       	or	r18, r19
    7240:	41 f4       	brne	.+16     	; 0x7252 <malloc+0xcc>
    7242:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    7246:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    724a:	20 93 8f 25 	sts	0x258F, r18	; 0x80258f <__brkval>
    724e:	30 93 90 25 	sts	0x2590, r19	; 0x802590 <__brkval+0x1>
    7252:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    7256:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    725a:	21 15       	cp	r18, r1
    725c:	31 05       	cpc	r19, r1
    725e:	41 f4       	brne	.+16     	; 0x7270 <malloc+0xea>
    7260:	2d b7       	in	r18, 0x3d	; 61
    7262:	3e b7       	in	r19, 0x3e	; 62
    7264:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    7268:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    726c:	24 1b       	sub	r18, r20
    726e:	35 0b       	sbc	r19, r21
    7270:	e0 91 8f 25 	lds	r30, 0x258F	; 0x80258f <__brkval>
    7274:	f0 91 90 25 	lds	r31, 0x2590	; 0x802590 <__brkval+0x1>
    7278:	e2 17       	cp	r30, r18
    727a:	f3 07       	cpc	r31, r19
    727c:	a0 f4       	brcc	.+40     	; 0x72a6 <malloc+0x120>
    727e:	2e 1b       	sub	r18, r30
    7280:	3f 0b       	sbc	r19, r31
    7282:	28 17       	cp	r18, r24
    7284:	39 07       	cpc	r19, r25
    7286:	78 f0       	brcs	.+30     	; 0x72a6 <malloc+0x120>
    7288:	ac 01       	movw	r20, r24
    728a:	4e 5f       	subi	r20, 0xFE	; 254
    728c:	5f 4f       	sbci	r21, 0xFF	; 255
    728e:	24 17       	cp	r18, r20
    7290:	35 07       	cpc	r19, r21
    7292:	48 f0       	brcs	.+18     	; 0x72a6 <malloc+0x120>
    7294:	4e 0f       	add	r20, r30
    7296:	5f 1f       	adc	r21, r31
    7298:	40 93 8f 25 	sts	0x258F, r20	; 0x80258f <__brkval>
    729c:	50 93 90 25 	sts	0x2590, r21	; 0x802590 <__brkval+0x1>
    72a0:	81 93       	st	Z+, r24
    72a2:	91 93       	st	Z+, r25
    72a4:	02 c0       	rjmp	.+4      	; 0x72aa <malloc+0x124>
    72a6:	e0 e0       	ldi	r30, 0x00	; 0
    72a8:	f0 e0       	ldi	r31, 0x00	; 0
    72aa:	cf 01       	movw	r24, r30
    72ac:	df 91       	pop	r29
    72ae:	cf 91       	pop	r28
    72b0:	1f 91       	pop	r17
    72b2:	0f 91       	pop	r16
    72b4:	08 95       	ret

000072b6 <free>:
    72b6:	cf 93       	push	r28
    72b8:	df 93       	push	r29
    72ba:	00 97       	sbiw	r24, 0x00	; 0
    72bc:	09 f4       	brne	.+2      	; 0x72c0 <free+0xa>
    72be:	81 c0       	rjmp	.+258    	; 0x73c2 <free+0x10c>
    72c0:	fc 01       	movw	r30, r24
    72c2:	32 97       	sbiw	r30, 0x02	; 2
    72c4:	12 82       	std	Z+2, r1	; 0x02
    72c6:	13 82       	std	Z+3, r1	; 0x03
    72c8:	a0 91 91 25 	lds	r26, 0x2591	; 0x802591 <__flp>
    72cc:	b0 91 92 25 	lds	r27, 0x2592	; 0x802592 <__flp+0x1>
    72d0:	10 97       	sbiw	r26, 0x00	; 0
    72d2:	81 f4       	brne	.+32     	; 0x72f4 <free+0x3e>
    72d4:	20 81       	ld	r18, Z
    72d6:	31 81       	ldd	r19, Z+1	; 0x01
    72d8:	82 0f       	add	r24, r18
    72da:	93 1f       	adc	r25, r19
    72dc:	20 91 8f 25 	lds	r18, 0x258F	; 0x80258f <__brkval>
    72e0:	30 91 90 25 	lds	r19, 0x2590	; 0x802590 <__brkval+0x1>
    72e4:	28 17       	cp	r18, r24
    72e6:	39 07       	cpc	r19, r25
    72e8:	51 f5       	brne	.+84     	; 0x733e <free+0x88>
    72ea:	e0 93 8f 25 	sts	0x258F, r30	; 0x80258f <__brkval>
    72ee:	f0 93 90 25 	sts	0x2590, r31	; 0x802590 <__brkval+0x1>
    72f2:	67 c0       	rjmp	.+206    	; 0x73c2 <free+0x10c>
    72f4:	ed 01       	movw	r28, r26
    72f6:	20 e0       	ldi	r18, 0x00	; 0
    72f8:	30 e0       	ldi	r19, 0x00	; 0
    72fa:	ce 17       	cp	r28, r30
    72fc:	df 07       	cpc	r29, r31
    72fe:	40 f4       	brcc	.+16     	; 0x7310 <free+0x5a>
    7300:	4a 81       	ldd	r20, Y+2	; 0x02
    7302:	5b 81       	ldd	r21, Y+3	; 0x03
    7304:	9e 01       	movw	r18, r28
    7306:	41 15       	cp	r20, r1
    7308:	51 05       	cpc	r21, r1
    730a:	f1 f0       	breq	.+60     	; 0x7348 <free+0x92>
    730c:	ea 01       	movw	r28, r20
    730e:	f5 cf       	rjmp	.-22     	; 0x72fa <free+0x44>
    7310:	c2 83       	std	Z+2, r28	; 0x02
    7312:	d3 83       	std	Z+3, r29	; 0x03
    7314:	40 81       	ld	r20, Z
    7316:	51 81       	ldd	r21, Z+1	; 0x01
    7318:	84 0f       	add	r24, r20
    731a:	95 1f       	adc	r25, r21
    731c:	c8 17       	cp	r28, r24
    731e:	d9 07       	cpc	r29, r25
    7320:	59 f4       	brne	.+22     	; 0x7338 <free+0x82>
    7322:	88 81       	ld	r24, Y
    7324:	99 81       	ldd	r25, Y+1	; 0x01
    7326:	84 0f       	add	r24, r20
    7328:	95 1f       	adc	r25, r21
    732a:	02 96       	adiw	r24, 0x02	; 2
    732c:	80 83       	st	Z, r24
    732e:	91 83       	std	Z+1, r25	; 0x01
    7330:	8a 81       	ldd	r24, Y+2	; 0x02
    7332:	9b 81       	ldd	r25, Y+3	; 0x03
    7334:	82 83       	std	Z+2, r24	; 0x02
    7336:	93 83       	std	Z+3, r25	; 0x03
    7338:	21 15       	cp	r18, r1
    733a:	31 05       	cpc	r19, r1
    733c:	29 f4       	brne	.+10     	; 0x7348 <free+0x92>
    733e:	e0 93 91 25 	sts	0x2591, r30	; 0x802591 <__flp>
    7342:	f0 93 92 25 	sts	0x2592, r31	; 0x802592 <__flp+0x1>
    7346:	3d c0       	rjmp	.+122    	; 0x73c2 <free+0x10c>
    7348:	e9 01       	movw	r28, r18
    734a:	ea 83       	std	Y+2, r30	; 0x02
    734c:	fb 83       	std	Y+3, r31	; 0x03
    734e:	49 91       	ld	r20, Y+
    7350:	59 91       	ld	r21, Y+
    7352:	c4 0f       	add	r28, r20
    7354:	d5 1f       	adc	r29, r21
    7356:	ec 17       	cp	r30, r28
    7358:	fd 07       	cpc	r31, r29
    735a:	61 f4       	brne	.+24     	; 0x7374 <free+0xbe>
    735c:	80 81       	ld	r24, Z
    735e:	91 81       	ldd	r25, Z+1	; 0x01
    7360:	84 0f       	add	r24, r20
    7362:	95 1f       	adc	r25, r21
    7364:	02 96       	adiw	r24, 0x02	; 2
    7366:	e9 01       	movw	r28, r18
    7368:	88 83       	st	Y, r24
    736a:	99 83       	std	Y+1, r25	; 0x01
    736c:	82 81       	ldd	r24, Z+2	; 0x02
    736e:	93 81       	ldd	r25, Z+3	; 0x03
    7370:	8a 83       	std	Y+2, r24	; 0x02
    7372:	9b 83       	std	Y+3, r25	; 0x03
    7374:	e0 e0       	ldi	r30, 0x00	; 0
    7376:	f0 e0       	ldi	r31, 0x00	; 0
    7378:	12 96       	adiw	r26, 0x02	; 2
    737a:	8d 91       	ld	r24, X+
    737c:	9c 91       	ld	r25, X
    737e:	13 97       	sbiw	r26, 0x03	; 3
    7380:	00 97       	sbiw	r24, 0x00	; 0
    7382:	19 f0       	breq	.+6      	; 0x738a <free+0xd4>
    7384:	fd 01       	movw	r30, r26
    7386:	dc 01       	movw	r26, r24
    7388:	f7 cf       	rjmp	.-18     	; 0x7378 <free+0xc2>
    738a:	8d 91       	ld	r24, X+
    738c:	9c 91       	ld	r25, X
    738e:	11 97       	sbiw	r26, 0x01	; 1
    7390:	9d 01       	movw	r18, r26
    7392:	2e 5f       	subi	r18, 0xFE	; 254
    7394:	3f 4f       	sbci	r19, 0xFF	; 255
    7396:	82 0f       	add	r24, r18
    7398:	93 1f       	adc	r25, r19
    739a:	20 91 8f 25 	lds	r18, 0x258F	; 0x80258f <__brkval>
    739e:	30 91 90 25 	lds	r19, 0x2590	; 0x802590 <__brkval+0x1>
    73a2:	28 17       	cp	r18, r24
    73a4:	39 07       	cpc	r19, r25
    73a6:	69 f4       	brne	.+26     	; 0x73c2 <free+0x10c>
    73a8:	30 97       	sbiw	r30, 0x00	; 0
    73aa:	29 f4       	brne	.+10     	; 0x73b6 <free+0x100>
    73ac:	10 92 91 25 	sts	0x2591, r1	; 0x802591 <__flp>
    73b0:	10 92 92 25 	sts	0x2592, r1	; 0x802592 <__flp+0x1>
    73b4:	02 c0       	rjmp	.+4      	; 0x73ba <free+0x104>
    73b6:	12 82       	std	Z+2, r1	; 0x02
    73b8:	13 82       	std	Z+3, r1	; 0x03
    73ba:	a0 93 8f 25 	sts	0x258F, r26	; 0x80258f <__brkval>
    73be:	b0 93 90 25 	sts	0x2590, r27	; 0x802590 <__brkval+0x1>
    73c2:	df 91       	pop	r29
    73c4:	cf 91       	pop	r28
    73c6:	08 95       	ret

000073c8 <strcat>:
    73c8:	fb 01       	movw	r30, r22
    73ca:	dc 01       	movw	r26, r24
    73cc:	0d 90       	ld	r0, X+
    73ce:	00 20       	and	r0, r0
    73d0:	e9 f7       	brne	.-6      	; 0x73cc <strcat+0x4>
    73d2:	11 97       	sbiw	r26, 0x01	; 1
    73d4:	01 90       	ld	r0, Z+
    73d6:	0d 92       	st	X+, r0
    73d8:	00 20       	and	r0, r0
    73da:	e1 f7       	brne	.-8      	; 0x73d4 <strcat+0xc>
    73dc:	08 95       	ret

000073de <sprintf>:
    73de:	ae e0       	ldi	r26, 0x0E	; 14
    73e0:	b0 e0       	ldi	r27, 0x00	; 0
    73e2:	e5 ef       	ldi	r30, 0xF5	; 245
    73e4:	f9 e3       	ldi	r31, 0x39	; 57
    73e6:	0c 94 b0 3c 	jmp	0x7960	; 0x7960 <__prologue_saves__+0x1c>
    73ea:	0d 89       	ldd	r16, Y+21	; 0x15
    73ec:	1e 89       	ldd	r17, Y+22	; 0x16
    73ee:	86 e0       	ldi	r24, 0x06	; 6
    73f0:	8c 83       	std	Y+4, r24	; 0x04
    73f2:	09 83       	std	Y+1, r16	; 0x01
    73f4:	1a 83       	std	Y+2, r17	; 0x02
    73f6:	8f ef       	ldi	r24, 0xFF	; 255
    73f8:	9f e7       	ldi	r25, 0x7F	; 127
    73fa:	8d 83       	std	Y+5, r24	; 0x05
    73fc:	9e 83       	std	Y+6, r25	; 0x06
    73fe:	ae 01       	movw	r20, r28
    7400:	47 5e       	subi	r20, 0xE7	; 231
    7402:	5f 4f       	sbci	r21, 0xFF	; 255
    7404:	6f 89       	ldd	r22, Y+23	; 0x17
    7406:	78 8d       	ldd	r23, Y+24	; 0x18
    7408:	ce 01       	movw	r24, r28
    740a:	01 96       	adiw	r24, 0x01	; 1
    740c:	0e 94 11 3a 	call	0x7422	; 0x7422 <vfprintf>
    7410:	ef 81       	ldd	r30, Y+7	; 0x07
    7412:	f8 85       	ldd	r31, Y+8	; 0x08
    7414:	e0 0f       	add	r30, r16
    7416:	f1 1f       	adc	r31, r17
    7418:	10 82       	st	Z, r1
    741a:	2e 96       	adiw	r28, 0x0e	; 14
    741c:	e4 e0       	ldi	r30, 0x04	; 4
    741e:	0c 94 c9 3c 	jmp	0x7992	; 0x7992 <__epilogue_restores__+0x1c>

00007422 <vfprintf>:
    7422:	ab e0       	ldi	r26, 0x0B	; 11
    7424:	b0 e0       	ldi	r27, 0x00	; 0
    7426:	e7 e1       	ldi	r30, 0x17	; 23
    7428:	fa e3       	ldi	r31, 0x3A	; 58
    742a:	0c 94 a2 3c 	jmp	0x7944	; 0x7944 <__prologue_saves__>
    742e:	6c 01       	movw	r12, r24
    7430:	7b 01       	movw	r14, r22
    7432:	8a 01       	movw	r16, r20
    7434:	fc 01       	movw	r30, r24
    7436:	16 82       	std	Z+6, r1	; 0x06
    7438:	17 82       	std	Z+7, r1	; 0x07
    743a:	83 81       	ldd	r24, Z+3	; 0x03
    743c:	81 ff       	sbrs	r24, 1
    743e:	cc c1       	rjmp	.+920    	; 0x77d8 <vfprintf+0x3b6>
    7440:	ce 01       	movw	r24, r28
    7442:	01 96       	adiw	r24, 0x01	; 1
    7444:	3c 01       	movw	r6, r24
    7446:	f6 01       	movw	r30, r12
    7448:	93 81       	ldd	r25, Z+3	; 0x03
    744a:	f7 01       	movw	r30, r14
    744c:	93 fd       	sbrc	r25, 3
    744e:	85 91       	lpm	r24, Z+
    7450:	93 ff       	sbrs	r25, 3
    7452:	81 91       	ld	r24, Z+
    7454:	7f 01       	movw	r14, r30
    7456:	88 23       	and	r24, r24
    7458:	09 f4       	brne	.+2      	; 0x745c <vfprintf+0x3a>
    745a:	ba c1       	rjmp	.+884    	; 0x77d0 <vfprintf+0x3ae>
    745c:	85 32       	cpi	r24, 0x25	; 37
    745e:	39 f4       	brne	.+14     	; 0x746e <vfprintf+0x4c>
    7460:	93 fd       	sbrc	r25, 3
    7462:	85 91       	lpm	r24, Z+
    7464:	93 ff       	sbrs	r25, 3
    7466:	81 91       	ld	r24, Z+
    7468:	7f 01       	movw	r14, r30
    746a:	85 32       	cpi	r24, 0x25	; 37
    746c:	29 f4       	brne	.+10     	; 0x7478 <vfprintf+0x56>
    746e:	b6 01       	movw	r22, r12
    7470:	90 e0       	ldi	r25, 0x00	; 0
    7472:	0e 94 08 3c 	call	0x7810	; 0x7810 <fputc>
    7476:	e7 cf       	rjmp	.-50     	; 0x7446 <vfprintf+0x24>
    7478:	91 2c       	mov	r9, r1
    747a:	21 2c       	mov	r2, r1
    747c:	31 2c       	mov	r3, r1
    747e:	ff e1       	ldi	r31, 0x1F	; 31
    7480:	f3 15       	cp	r31, r3
    7482:	d8 f0       	brcs	.+54     	; 0x74ba <vfprintf+0x98>
    7484:	8b 32       	cpi	r24, 0x2B	; 43
    7486:	79 f0       	breq	.+30     	; 0x74a6 <vfprintf+0x84>
    7488:	38 f4       	brcc	.+14     	; 0x7498 <vfprintf+0x76>
    748a:	80 32       	cpi	r24, 0x20	; 32
    748c:	79 f0       	breq	.+30     	; 0x74ac <vfprintf+0x8a>
    748e:	83 32       	cpi	r24, 0x23	; 35
    7490:	a1 f4       	brne	.+40     	; 0x74ba <vfprintf+0x98>
    7492:	23 2d       	mov	r18, r3
    7494:	20 61       	ori	r18, 0x10	; 16
    7496:	1d c0       	rjmp	.+58     	; 0x74d2 <vfprintf+0xb0>
    7498:	8d 32       	cpi	r24, 0x2D	; 45
    749a:	61 f0       	breq	.+24     	; 0x74b4 <vfprintf+0x92>
    749c:	80 33       	cpi	r24, 0x30	; 48
    749e:	69 f4       	brne	.+26     	; 0x74ba <vfprintf+0x98>
    74a0:	23 2d       	mov	r18, r3
    74a2:	21 60       	ori	r18, 0x01	; 1
    74a4:	16 c0       	rjmp	.+44     	; 0x74d2 <vfprintf+0xb0>
    74a6:	83 2d       	mov	r24, r3
    74a8:	82 60       	ori	r24, 0x02	; 2
    74aa:	38 2e       	mov	r3, r24
    74ac:	e3 2d       	mov	r30, r3
    74ae:	e4 60       	ori	r30, 0x04	; 4
    74b0:	3e 2e       	mov	r3, r30
    74b2:	2a c0       	rjmp	.+84     	; 0x7508 <vfprintf+0xe6>
    74b4:	f3 2d       	mov	r31, r3
    74b6:	f8 60       	ori	r31, 0x08	; 8
    74b8:	1d c0       	rjmp	.+58     	; 0x74f4 <vfprintf+0xd2>
    74ba:	37 fc       	sbrc	r3, 7
    74bc:	2d c0       	rjmp	.+90     	; 0x7518 <vfprintf+0xf6>
    74be:	20 ed       	ldi	r18, 0xD0	; 208
    74c0:	28 0f       	add	r18, r24
    74c2:	2a 30       	cpi	r18, 0x0A	; 10
    74c4:	40 f0       	brcs	.+16     	; 0x74d6 <vfprintf+0xb4>
    74c6:	8e 32       	cpi	r24, 0x2E	; 46
    74c8:	b9 f4       	brne	.+46     	; 0x74f8 <vfprintf+0xd6>
    74ca:	36 fc       	sbrc	r3, 6
    74cc:	81 c1       	rjmp	.+770    	; 0x77d0 <vfprintf+0x3ae>
    74ce:	23 2d       	mov	r18, r3
    74d0:	20 64       	ori	r18, 0x40	; 64
    74d2:	32 2e       	mov	r3, r18
    74d4:	19 c0       	rjmp	.+50     	; 0x7508 <vfprintf+0xe6>
    74d6:	36 fe       	sbrs	r3, 6
    74d8:	06 c0       	rjmp	.+12     	; 0x74e6 <vfprintf+0xc4>
    74da:	8a e0       	ldi	r24, 0x0A	; 10
    74dc:	98 9e       	mul	r9, r24
    74de:	20 0d       	add	r18, r0
    74e0:	11 24       	eor	r1, r1
    74e2:	92 2e       	mov	r9, r18
    74e4:	11 c0       	rjmp	.+34     	; 0x7508 <vfprintf+0xe6>
    74e6:	ea e0       	ldi	r30, 0x0A	; 10
    74e8:	2e 9e       	mul	r2, r30
    74ea:	20 0d       	add	r18, r0
    74ec:	11 24       	eor	r1, r1
    74ee:	22 2e       	mov	r2, r18
    74f0:	f3 2d       	mov	r31, r3
    74f2:	f0 62       	ori	r31, 0x20	; 32
    74f4:	3f 2e       	mov	r3, r31
    74f6:	08 c0       	rjmp	.+16     	; 0x7508 <vfprintf+0xe6>
    74f8:	8c 36       	cpi	r24, 0x6C	; 108
    74fa:	21 f4       	brne	.+8      	; 0x7504 <vfprintf+0xe2>
    74fc:	83 2d       	mov	r24, r3
    74fe:	80 68       	ori	r24, 0x80	; 128
    7500:	38 2e       	mov	r3, r24
    7502:	02 c0       	rjmp	.+4      	; 0x7508 <vfprintf+0xe6>
    7504:	88 36       	cpi	r24, 0x68	; 104
    7506:	41 f4       	brne	.+16     	; 0x7518 <vfprintf+0xf6>
    7508:	f7 01       	movw	r30, r14
    750a:	93 fd       	sbrc	r25, 3
    750c:	85 91       	lpm	r24, Z+
    750e:	93 ff       	sbrs	r25, 3
    7510:	81 91       	ld	r24, Z+
    7512:	7f 01       	movw	r14, r30
    7514:	81 11       	cpse	r24, r1
    7516:	b3 cf       	rjmp	.-154    	; 0x747e <vfprintf+0x5c>
    7518:	98 2f       	mov	r25, r24
    751a:	9f 7d       	andi	r25, 0xDF	; 223
    751c:	95 54       	subi	r25, 0x45	; 69
    751e:	93 30       	cpi	r25, 0x03	; 3
    7520:	28 f4       	brcc	.+10     	; 0x752c <vfprintf+0x10a>
    7522:	0c 5f       	subi	r16, 0xFC	; 252
    7524:	1f 4f       	sbci	r17, 0xFF	; 255
    7526:	9f e3       	ldi	r25, 0x3F	; 63
    7528:	99 83       	std	Y+1, r25	; 0x01
    752a:	0d c0       	rjmp	.+26     	; 0x7546 <vfprintf+0x124>
    752c:	83 36       	cpi	r24, 0x63	; 99
    752e:	31 f0       	breq	.+12     	; 0x753c <vfprintf+0x11a>
    7530:	83 37       	cpi	r24, 0x73	; 115
    7532:	71 f0       	breq	.+28     	; 0x7550 <vfprintf+0x12e>
    7534:	83 35       	cpi	r24, 0x53	; 83
    7536:	09 f0       	breq	.+2      	; 0x753a <vfprintf+0x118>
    7538:	59 c0       	rjmp	.+178    	; 0x75ec <vfprintf+0x1ca>
    753a:	21 c0       	rjmp	.+66     	; 0x757e <vfprintf+0x15c>
    753c:	f8 01       	movw	r30, r16
    753e:	80 81       	ld	r24, Z
    7540:	89 83       	std	Y+1, r24	; 0x01
    7542:	0e 5f       	subi	r16, 0xFE	; 254
    7544:	1f 4f       	sbci	r17, 0xFF	; 255
    7546:	88 24       	eor	r8, r8
    7548:	83 94       	inc	r8
    754a:	91 2c       	mov	r9, r1
    754c:	53 01       	movw	r10, r6
    754e:	13 c0       	rjmp	.+38     	; 0x7576 <vfprintf+0x154>
    7550:	28 01       	movw	r4, r16
    7552:	f2 e0       	ldi	r31, 0x02	; 2
    7554:	4f 0e       	add	r4, r31
    7556:	51 1c       	adc	r5, r1
    7558:	f8 01       	movw	r30, r16
    755a:	a0 80       	ld	r10, Z
    755c:	b1 80       	ldd	r11, Z+1	; 0x01
    755e:	36 fe       	sbrs	r3, 6
    7560:	03 c0       	rjmp	.+6      	; 0x7568 <vfprintf+0x146>
    7562:	69 2d       	mov	r22, r9
    7564:	70 e0       	ldi	r23, 0x00	; 0
    7566:	02 c0       	rjmp	.+4      	; 0x756c <vfprintf+0x14a>
    7568:	6f ef       	ldi	r22, 0xFF	; 255
    756a:	7f ef       	ldi	r23, 0xFF	; 255
    756c:	c5 01       	movw	r24, r10
    756e:	0e 94 fd 3b 	call	0x77fa	; 0x77fa <strnlen>
    7572:	4c 01       	movw	r8, r24
    7574:	82 01       	movw	r16, r4
    7576:	f3 2d       	mov	r31, r3
    7578:	ff 77       	andi	r31, 0x7F	; 127
    757a:	3f 2e       	mov	r3, r31
    757c:	16 c0       	rjmp	.+44     	; 0x75aa <vfprintf+0x188>
    757e:	28 01       	movw	r4, r16
    7580:	22 e0       	ldi	r18, 0x02	; 2
    7582:	42 0e       	add	r4, r18
    7584:	51 1c       	adc	r5, r1
    7586:	f8 01       	movw	r30, r16
    7588:	a0 80       	ld	r10, Z
    758a:	b1 80       	ldd	r11, Z+1	; 0x01
    758c:	36 fe       	sbrs	r3, 6
    758e:	03 c0       	rjmp	.+6      	; 0x7596 <vfprintf+0x174>
    7590:	69 2d       	mov	r22, r9
    7592:	70 e0       	ldi	r23, 0x00	; 0
    7594:	02 c0       	rjmp	.+4      	; 0x759a <vfprintf+0x178>
    7596:	6f ef       	ldi	r22, 0xFF	; 255
    7598:	7f ef       	ldi	r23, 0xFF	; 255
    759a:	c5 01       	movw	r24, r10
    759c:	0e 94 f2 3b 	call	0x77e4	; 0x77e4 <strnlen_P>
    75a0:	4c 01       	movw	r8, r24
    75a2:	f3 2d       	mov	r31, r3
    75a4:	f0 68       	ori	r31, 0x80	; 128
    75a6:	3f 2e       	mov	r3, r31
    75a8:	82 01       	movw	r16, r4
    75aa:	33 fc       	sbrc	r3, 3
    75ac:	1b c0       	rjmp	.+54     	; 0x75e4 <vfprintf+0x1c2>
    75ae:	82 2d       	mov	r24, r2
    75b0:	90 e0       	ldi	r25, 0x00	; 0
    75b2:	88 16       	cp	r8, r24
    75b4:	99 06       	cpc	r9, r25
    75b6:	b0 f4       	brcc	.+44     	; 0x75e4 <vfprintf+0x1c2>
    75b8:	b6 01       	movw	r22, r12
    75ba:	80 e2       	ldi	r24, 0x20	; 32
    75bc:	90 e0       	ldi	r25, 0x00	; 0
    75be:	0e 94 08 3c 	call	0x7810	; 0x7810 <fputc>
    75c2:	2a 94       	dec	r2
    75c4:	f4 cf       	rjmp	.-24     	; 0x75ae <vfprintf+0x18c>
    75c6:	f5 01       	movw	r30, r10
    75c8:	37 fc       	sbrc	r3, 7
    75ca:	85 91       	lpm	r24, Z+
    75cc:	37 fe       	sbrs	r3, 7
    75ce:	81 91       	ld	r24, Z+
    75d0:	5f 01       	movw	r10, r30
    75d2:	b6 01       	movw	r22, r12
    75d4:	90 e0       	ldi	r25, 0x00	; 0
    75d6:	0e 94 08 3c 	call	0x7810	; 0x7810 <fputc>
    75da:	21 10       	cpse	r2, r1
    75dc:	2a 94       	dec	r2
    75de:	21 e0       	ldi	r18, 0x01	; 1
    75e0:	82 1a       	sub	r8, r18
    75e2:	91 08       	sbc	r9, r1
    75e4:	81 14       	cp	r8, r1
    75e6:	91 04       	cpc	r9, r1
    75e8:	71 f7       	brne	.-36     	; 0x75c6 <vfprintf+0x1a4>
    75ea:	e8 c0       	rjmp	.+464    	; 0x77bc <vfprintf+0x39a>
    75ec:	84 36       	cpi	r24, 0x64	; 100
    75ee:	11 f0       	breq	.+4      	; 0x75f4 <vfprintf+0x1d2>
    75f0:	89 36       	cpi	r24, 0x69	; 105
    75f2:	41 f5       	brne	.+80     	; 0x7644 <vfprintf+0x222>
    75f4:	f8 01       	movw	r30, r16
    75f6:	37 fe       	sbrs	r3, 7
    75f8:	07 c0       	rjmp	.+14     	; 0x7608 <vfprintf+0x1e6>
    75fa:	60 81       	ld	r22, Z
    75fc:	71 81       	ldd	r23, Z+1	; 0x01
    75fe:	82 81       	ldd	r24, Z+2	; 0x02
    7600:	93 81       	ldd	r25, Z+3	; 0x03
    7602:	0c 5f       	subi	r16, 0xFC	; 252
    7604:	1f 4f       	sbci	r17, 0xFF	; 255
    7606:	08 c0       	rjmp	.+16     	; 0x7618 <vfprintf+0x1f6>
    7608:	60 81       	ld	r22, Z
    760a:	71 81       	ldd	r23, Z+1	; 0x01
    760c:	07 2e       	mov	r0, r23
    760e:	00 0c       	add	r0, r0
    7610:	88 0b       	sbc	r24, r24
    7612:	99 0b       	sbc	r25, r25
    7614:	0e 5f       	subi	r16, 0xFE	; 254
    7616:	1f 4f       	sbci	r17, 0xFF	; 255
    7618:	f3 2d       	mov	r31, r3
    761a:	ff 76       	andi	r31, 0x6F	; 111
    761c:	3f 2e       	mov	r3, r31
    761e:	97 ff       	sbrs	r25, 7
    7620:	09 c0       	rjmp	.+18     	; 0x7634 <vfprintf+0x212>
    7622:	90 95       	com	r25
    7624:	80 95       	com	r24
    7626:	70 95       	com	r23
    7628:	61 95       	neg	r22
    762a:	7f 4f       	sbci	r23, 0xFF	; 255
    762c:	8f 4f       	sbci	r24, 0xFF	; 255
    762e:	9f 4f       	sbci	r25, 0xFF	; 255
    7630:	f0 68       	ori	r31, 0x80	; 128
    7632:	3f 2e       	mov	r3, r31
    7634:	2a e0       	ldi	r18, 0x0A	; 10
    7636:	30 e0       	ldi	r19, 0x00	; 0
    7638:	a3 01       	movw	r20, r6
    763a:	0e 94 44 3c 	call	0x7888	; 0x7888 <__ultoa_invert>
    763e:	88 2e       	mov	r8, r24
    7640:	86 18       	sub	r8, r6
    7642:	45 c0       	rjmp	.+138    	; 0x76ce <vfprintf+0x2ac>
    7644:	85 37       	cpi	r24, 0x75	; 117
    7646:	31 f4       	brne	.+12     	; 0x7654 <vfprintf+0x232>
    7648:	23 2d       	mov	r18, r3
    764a:	2f 7e       	andi	r18, 0xEF	; 239
    764c:	b2 2e       	mov	r11, r18
    764e:	2a e0       	ldi	r18, 0x0A	; 10
    7650:	30 e0       	ldi	r19, 0x00	; 0
    7652:	25 c0       	rjmp	.+74     	; 0x769e <vfprintf+0x27c>
    7654:	93 2d       	mov	r25, r3
    7656:	99 7f       	andi	r25, 0xF9	; 249
    7658:	b9 2e       	mov	r11, r25
    765a:	8f 36       	cpi	r24, 0x6F	; 111
    765c:	c1 f0       	breq	.+48     	; 0x768e <vfprintf+0x26c>
    765e:	18 f4       	brcc	.+6      	; 0x7666 <vfprintf+0x244>
    7660:	88 35       	cpi	r24, 0x58	; 88
    7662:	79 f0       	breq	.+30     	; 0x7682 <vfprintf+0x260>
    7664:	b5 c0       	rjmp	.+362    	; 0x77d0 <vfprintf+0x3ae>
    7666:	80 37       	cpi	r24, 0x70	; 112
    7668:	19 f0       	breq	.+6      	; 0x7670 <vfprintf+0x24e>
    766a:	88 37       	cpi	r24, 0x78	; 120
    766c:	21 f0       	breq	.+8      	; 0x7676 <vfprintf+0x254>
    766e:	b0 c0       	rjmp	.+352    	; 0x77d0 <vfprintf+0x3ae>
    7670:	e9 2f       	mov	r30, r25
    7672:	e0 61       	ori	r30, 0x10	; 16
    7674:	be 2e       	mov	r11, r30
    7676:	b4 fe       	sbrs	r11, 4
    7678:	0d c0       	rjmp	.+26     	; 0x7694 <vfprintf+0x272>
    767a:	fb 2d       	mov	r31, r11
    767c:	f4 60       	ori	r31, 0x04	; 4
    767e:	bf 2e       	mov	r11, r31
    7680:	09 c0       	rjmp	.+18     	; 0x7694 <vfprintf+0x272>
    7682:	34 fe       	sbrs	r3, 4
    7684:	0a c0       	rjmp	.+20     	; 0x769a <vfprintf+0x278>
    7686:	29 2f       	mov	r18, r25
    7688:	26 60       	ori	r18, 0x06	; 6
    768a:	b2 2e       	mov	r11, r18
    768c:	06 c0       	rjmp	.+12     	; 0x769a <vfprintf+0x278>
    768e:	28 e0       	ldi	r18, 0x08	; 8
    7690:	30 e0       	ldi	r19, 0x00	; 0
    7692:	05 c0       	rjmp	.+10     	; 0x769e <vfprintf+0x27c>
    7694:	20 e1       	ldi	r18, 0x10	; 16
    7696:	30 e0       	ldi	r19, 0x00	; 0
    7698:	02 c0       	rjmp	.+4      	; 0x769e <vfprintf+0x27c>
    769a:	20 e1       	ldi	r18, 0x10	; 16
    769c:	32 e0       	ldi	r19, 0x02	; 2
    769e:	f8 01       	movw	r30, r16
    76a0:	b7 fe       	sbrs	r11, 7
    76a2:	07 c0       	rjmp	.+14     	; 0x76b2 <vfprintf+0x290>
    76a4:	60 81       	ld	r22, Z
    76a6:	71 81       	ldd	r23, Z+1	; 0x01
    76a8:	82 81       	ldd	r24, Z+2	; 0x02
    76aa:	93 81       	ldd	r25, Z+3	; 0x03
    76ac:	0c 5f       	subi	r16, 0xFC	; 252
    76ae:	1f 4f       	sbci	r17, 0xFF	; 255
    76b0:	06 c0       	rjmp	.+12     	; 0x76be <vfprintf+0x29c>
    76b2:	60 81       	ld	r22, Z
    76b4:	71 81       	ldd	r23, Z+1	; 0x01
    76b6:	80 e0       	ldi	r24, 0x00	; 0
    76b8:	90 e0       	ldi	r25, 0x00	; 0
    76ba:	0e 5f       	subi	r16, 0xFE	; 254
    76bc:	1f 4f       	sbci	r17, 0xFF	; 255
    76be:	a3 01       	movw	r20, r6
    76c0:	0e 94 44 3c 	call	0x7888	; 0x7888 <__ultoa_invert>
    76c4:	88 2e       	mov	r8, r24
    76c6:	86 18       	sub	r8, r6
    76c8:	fb 2d       	mov	r31, r11
    76ca:	ff 77       	andi	r31, 0x7F	; 127
    76cc:	3f 2e       	mov	r3, r31
    76ce:	36 fe       	sbrs	r3, 6
    76d0:	0d c0       	rjmp	.+26     	; 0x76ec <vfprintf+0x2ca>
    76d2:	23 2d       	mov	r18, r3
    76d4:	2e 7f       	andi	r18, 0xFE	; 254
    76d6:	a2 2e       	mov	r10, r18
    76d8:	89 14       	cp	r8, r9
    76da:	58 f4       	brcc	.+22     	; 0x76f2 <vfprintf+0x2d0>
    76dc:	34 fe       	sbrs	r3, 4
    76de:	0b c0       	rjmp	.+22     	; 0x76f6 <vfprintf+0x2d4>
    76e0:	32 fc       	sbrc	r3, 2
    76e2:	09 c0       	rjmp	.+18     	; 0x76f6 <vfprintf+0x2d4>
    76e4:	83 2d       	mov	r24, r3
    76e6:	8e 7e       	andi	r24, 0xEE	; 238
    76e8:	a8 2e       	mov	r10, r24
    76ea:	05 c0       	rjmp	.+10     	; 0x76f6 <vfprintf+0x2d4>
    76ec:	b8 2c       	mov	r11, r8
    76ee:	a3 2c       	mov	r10, r3
    76f0:	03 c0       	rjmp	.+6      	; 0x76f8 <vfprintf+0x2d6>
    76f2:	b8 2c       	mov	r11, r8
    76f4:	01 c0       	rjmp	.+2      	; 0x76f8 <vfprintf+0x2d6>
    76f6:	b9 2c       	mov	r11, r9
    76f8:	a4 fe       	sbrs	r10, 4
    76fa:	0f c0       	rjmp	.+30     	; 0x771a <vfprintf+0x2f8>
    76fc:	fe 01       	movw	r30, r28
    76fe:	e8 0d       	add	r30, r8
    7700:	f1 1d       	adc	r31, r1
    7702:	80 81       	ld	r24, Z
    7704:	80 33       	cpi	r24, 0x30	; 48
    7706:	21 f4       	brne	.+8      	; 0x7710 <vfprintf+0x2ee>
    7708:	9a 2d       	mov	r25, r10
    770a:	99 7e       	andi	r25, 0xE9	; 233
    770c:	a9 2e       	mov	r10, r25
    770e:	09 c0       	rjmp	.+18     	; 0x7722 <vfprintf+0x300>
    7710:	a2 fe       	sbrs	r10, 2
    7712:	06 c0       	rjmp	.+12     	; 0x7720 <vfprintf+0x2fe>
    7714:	b3 94       	inc	r11
    7716:	b3 94       	inc	r11
    7718:	04 c0       	rjmp	.+8      	; 0x7722 <vfprintf+0x300>
    771a:	8a 2d       	mov	r24, r10
    771c:	86 78       	andi	r24, 0x86	; 134
    771e:	09 f0       	breq	.+2      	; 0x7722 <vfprintf+0x300>
    7720:	b3 94       	inc	r11
    7722:	a3 fc       	sbrc	r10, 3
    7724:	11 c0       	rjmp	.+34     	; 0x7748 <vfprintf+0x326>
    7726:	a0 fe       	sbrs	r10, 0
    7728:	06 c0       	rjmp	.+12     	; 0x7736 <vfprintf+0x314>
    772a:	b2 14       	cp	r11, r2
    772c:	88 f4       	brcc	.+34     	; 0x7750 <vfprintf+0x32e>
    772e:	28 0c       	add	r2, r8
    7730:	92 2c       	mov	r9, r2
    7732:	9b 18       	sub	r9, r11
    7734:	0e c0       	rjmp	.+28     	; 0x7752 <vfprintf+0x330>
    7736:	b2 14       	cp	r11, r2
    7738:	60 f4       	brcc	.+24     	; 0x7752 <vfprintf+0x330>
    773a:	b6 01       	movw	r22, r12
    773c:	80 e2       	ldi	r24, 0x20	; 32
    773e:	90 e0       	ldi	r25, 0x00	; 0
    7740:	0e 94 08 3c 	call	0x7810	; 0x7810 <fputc>
    7744:	b3 94       	inc	r11
    7746:	f7 cf       	rjmp	.-18     	; 0x7736 <vfprintf+0x314>
    7748:	b2 14       	cp	r11, r2
    774a:	18 f4       	brcc	.+6      	; 0x7752 <vfprintf+0x330>
    774c:	2b 18       	sub	r2, r11
    774e:	02 c0       	rjmp	.+4      	; 0x7754 <vfprintf+0x332>
    7750:	98 2c       	mov	r9, r8
    7752:	21 2c       	mov	r2, r1
    7754:	a4 fe       	sbrs	r10, 4
    7756:	10 c0       	rjmp	.+32     	; 0x7778 <vfprintf+0x356>
    7758:	b6 01       	movw	r22, r12
    775a:	80 e3       	ldi	r24, 0x30	; 48
    775c:	90 e0       	ldi	r25, 0x00	; 0
    775e:	0e 94 08 3c 	call	0x7810	; 0x7810 <fputc>
    7762:	a2 fe       	sbrs	r10, 2
    7764:	17 c0       	rjmp	.+46     	; 0x7794 <vfprintf+0x372>
    7766:	a1 fc       	sbrc	r10, 1
    7768:	03 c0       	rjmp	.+6      	; 0x7770 <vfprintf+0x34e>
    776a:	88 e7       	ldi	r24, 0x78	; 120
    776c:	90 e0       	ldi	r25, 0x00	; 0
    776e:	02 c0       	rjmp	.+4      	; 0x7774 <vfprintf+0x352>
    7770:	88 e5       	ldi	r24, 0x58	; 88
    7772:	90 e0       	ldi	r25, 0x00	; 0
    7774:	b6 01       	movw	r22, r12
    7776:	0c c0       	rjmp	.+24     	; 0x7790 <vfprintf+0x36e>
    7778:	8a 2d       	mov	r24, r10
    777a:	86 78       	andi	r24, 0x86	; 134
    777c:	59 f0       	breq	.+22     	; 0x7794 <vfprintf+0x372>
    777e:	a1 fe       	sbrs	r10, 1
    7780:	02 c0       	rjmp	.+4      	; 0x7786 <vfprintf+0x364>
    7782:	8b e2       	ldi	r24, 0x2B	; 43
    7784:	01 c0       	rjmp	.+2      	; 0x7788 <vfprintf+0x366>
    7786:	80 e2       	ldi	r24, 0x20	; 32
    7788:	a7 fc       	sbrc	r10, 7
    778a:	8d e2       	ldi	r24, 0x2D	; 45
    778c:	b6 01       	movw	r22, r12
    778e:	90 e0       	ldi	r25, 0x00	; 0
    7790:	0e 94 08 3c 	call	0x7810	; 0x7810 <fputc>
    7794:	89 14       	cp	r8, r9
    7796:	38 f4       	brcc	.+14     	; 0x77a6 <vfprintf+0x384>
    7798:	b6 01       	movw	r22, r12
    779a:	80 e3       	ldi	r24, 0x30	; 48
    779c:	90 e0       	ldi	r25, 0x00	; 0
    779e:	0e 94 08 3c 	call	0x7810	; 0x7810 <fputc>
    77a2:	9a 94       	dec	r9
    77a4:	f7 cf       	rjmp	.-18     	; 0x7794 <vfprintf+0x372>
    77a6:	8a 94       	dec	r8
    77a8:	f3 01       	movw	r30, r6
    77aa:	e8 0d       	add	r30, r8
    77ac:	f1 1d       	adc	r31, r1
    77ae:	80 81       	ld	r24, Z
    77b0:	b6 01       	movw	r22, r12
    77b2:	90 e0       	ldi	r25, 0x00	; 0
    77b4:	0e 94 08 3c 	call	0x7810	; 0x7810 <fputc>
    77b8:	81 10       	cpse	r8, r1
    77ba:	f5 cf       	rjmp	.-22     	; 0x77a6 <vfprintf+0x384>
    77bc:	22 20       	and	r2, r2
    77be:	09 f4       	brne	.+2      	; 0x77c2 <vfprintf+0x3a0>
    77c0:	42 ce       	rjmp	.-892    	; 0x7446 <vfprintf+0x24>
    77c2:	b6 01       	movw	r22, r12
    77c4:	80 e2       	ldi	r24, 0x20	; 32
    77c6:	90 e0       	ldi	r25, 0x00	; 0
    77c8:	0e 94 08 3c 	call	0x7810	; 0x7810 <fputc>
    77cc:	2a 94       	dec	r2
    77ce:	f6 cf       	rjmp	.-20     	; 0x77bc <vfprintf+0x39a>
    77d0:	f6 01       	movw	r30, r12
    77d2:	86 81       	ldd	r24, Z+6	; 0x06
    77d4:	97 81       	ldd	r25, Z+7	; 0x07
    77d6:	02 c0       	rjmp	.+4      	; 0x77dc <vfprintf+0x3ba>
    77d8:	8f ef       	ldi	r24, 0xFF	; 255
    77da:	9f ef       	ldi	r25, 0xFF	; 255
    77dc:	2b 96       	adiw	r28, 0x0b	; 11
    77de:	e2 e1       	ldi	r30, 0x12	; 18
    77e0:	0c 94 bb 3c 	jmp	0x7976	; 0x7976 <__epilogue_restores__>

000077e4 <strnlen_P>:
    77e4:	fc 01       	movw	r30, r24
    77e6:	05 90       	lpm	r0, Z+
    77e8:	61 50       	subi	r22, 0x01	; 1
    77ea:	70 40       	sbci	r23, 0x00	; 0
    77ec:	01 10       	cpse	r0, r1
    77ee:	d8 f7       	brcc	.-10     	; 0x77e6 <strnlen_P+0x2>
    77f0:	80 95       	com	r24
    77f2:	90 95       	com	r25
    77f4:	8e 0f       	add	r24, r30
    77f6:	9f 1f       	adc	r25, r31
    77f8:	08 95       	ret

000077fa <strnlen>:
    77fa:	fc 01       	movw	r30, r24
    77fc:	61 50       	subi	r22, 0x01	; 1
    77fe:	70 40       	sbci	r23, 0x00	; 0
    7800:	01 90       	ld	r0, Z+
    7802:	01 10       	cpse	r0, r1
    7804:	d8 f7       	brcc	.-10     	; 0x77fc <strnlen+0x2>
    7806:	80 95       	com	r24
    7808:	90 95       	com	r25
    780a:	8e 0f       	add	r24, r30
    780c:	9f 1f       	adc	r25, r31
    780e:	08 95       	ret

00007810 <fputc>:
    7810:	0f 93       	push	r16
    7812:	1f 93       	push	r17
    7814:	cf 93       	push	r28
    7816:	df 93       	push	r29
    7818:	fb 01       	movw	r30, r22
    781a:	23 81       	ldd	r18, Z+3	; 0x03
    781c:	21 fd       	sbrc	r18, 1
    781e:	03 c0       	rjmp	.+6      	; 0x7826 <fputc+0x16>
    7820:	8f ef       	ldi	r24, 0xFF	; 255
    7822:	9f ef       	ldi	r25, 0xFF	; 255
    7824:	2c c0       	rjmp	.+88     	; 0x787e <fputc+0x6e>
    7826:	22 ff       	sbrs	r18, 2
    7828:	16 c0       	rjmp	.+44     	; 0x7856 <fputc+0x46>
    782a:	46 81       	ldd	r20, Z+6	; 0x06
    782c:	57 81       	ldd	r21, Z+7	; 0x07
    782e:	24 81       	ldd	r18, Z+4	; 0x04
    7830:	35 81       	ldd	r19, Z+5	; 0x05
    7832:	42 17       	cp	r20, r18
    7834:	53 07       	cpc	r21, r19
    7836:	44 f4       	brge	.+16     	; 0x7848 <fputc+0x38>
    7838:	a0 81       	ld	r26, Z
    783a:	b1 81       	ldd	r27, Z+1	; 0x01
    783c:	9d 01       	movw	r18, r26
    783e:	2f 5f       	subi	r18, 0xFF	; 255
    7840:	3f 4f       	sbci	r19, 0xFF	; 255
    7842:	20 83       	st	Z, r18
    7844:	31 83       	std	Z+1, r19	; 0x01
    7846:	8c 93       	st	X, r24
    7848:	26 81       	ldd	r18, Z+6	; 0x06
    784a:	37 81       	ldd	r19, Z+7	; 0x07
    784c:	2f 5f       	subi	r18, 0xFF	; 255
    784e:	3f 4f       	sbci	r19, 0xFF	; 255
    7850:	26 83       	std	Z+6, r18	; 0x06
    7852:	37 83       	std	Z+7, r19	; 0x07
    7854:	14 c0       	rjmp	.+40     	; 0x787e <fputc+0x6e>
    7856:	8b 01       	movw	r16, r22
    7858:	ec 01       	movw	r28, r24
    785a:	fb 01       	movw	r30, r22
    785c:	00 84       	ldd	r0, Z+8	; 0x08
    785e:	f1 85       	ldd	r31, Z+9	; 0x09
    7860:	e0 2d       	mov	r30, r0
    7862:	09 95       	icall
    7864:	89 2b       	or	r24, r25
    7866:	e1 f6       	brne	.-72     	; 0x7820 <fputc+0x10>
    7868:	d8 01       	movw	r26, r16
    786a:	16 96       	adiw	r26, 0x06	; 6
    786c:	8d 91       	ld	r24, X+
    786e:	9c 91       	ld	r25, X
    7870:	17 97       	sbiw	r26, 0x07	; 7
    7872:	01 96       	adiw	r24, 0x01	; 1
    7874:	16 96       	adiw	r26, 0x06	; 6
    7876:	8d 93       	st	X+, r24
    7878:	9c 93       	st	X, r25
    787a:	17 97       	sbiw	r26, 0x07	; 7
    787c:	ce 01       	movw	r24, r28
    787e:	df 91       	pop	r29
    7880:	cf 91       	pop	r28
    7882:	1f 91       	pop	r17
    7884:	0f 91       	pop	r16
    7886:	08 95       	ret

00007888 <__ultoa_invert>:
    7888:	fa 01       	movw	r30, r20
    788a:	aa 27       	eor	r26, r26
    788c:	28 30       	cpi	r18, 0x08	; 8
    788e:	51 f1       	breq	.+84     	; 0x78e4 <__ultoa_invert+0x5c>
    7890:	20 31       	cpi	r18, 0x10	; 16
    7892:	81 f1       	breq	.+96     	; 0x78f4 <__ultoa_invert+0x6c>
    7894:	e8 94       	clt
    7896:	6f 93       	push	r22
    7898:	6e 7f       	andi	r22, 0xFE	; 254
    789a:	6e 5f       	subi	r22, 0xFE	; 254
    789c:	7f 4f       	sbci	r23, 0xFF	; 255
    789e:	8f 4f       	sbci	r24, 0xFF	; 255
    78a0:	9f 4f       	sbci	r25, 0xFF	; 255
    78a2:	af 4f       	sbci	r26, 0xFF	; 255
    78a4:	b1 e0       	ldi	r27, 0x01	; 1
    78a6:	3e d0       	rcall	.+124    	; 0x7924 <__ultoa_invert+0x9c>
    78a8:	b4 e0       	ldi	r27, 0x04	; 4
    78aa:	3c d0       	rcall	.+120    	; 0x7924 <__ultoa_invert+0x9c>
    78ac:	67 0f       	add	r22, r23
    78ae:	78 1f       	adc	r23, r24
    78b0:	89 1f       	adc	r24, r25
    78b2:	9a 1f       	adc	r25, r26
    78b4:	a1 1d       	adc	r26, r1
    78b6:	68 0f       	add	r22, r24
    78b8:	79 1f       	adc	r23, r25
    78ba:	8a 1f       	adc	r24, r26
    78bc:	91 1d       	adc	r25, r1
    78be:	a1 1d       	adc	r26, r1
    78c0:	6a 0f       	add	r22, r26
    78c2:	71 1d       	adc	r23, r1
    78c4:	81 1d       	adc	r24, r1
    78c6:	91 1d       	adc	r25, r1
    78c8:	a1 1d       	adc	r26, r1
    78ca:	20 d0       	rcall	.+64     	; 0x790c <__ultoa_invert+0x84>
    78cc:	09 f4       	brne	.+2      	; 0x78d0 <__ultoa_invert+0x48>
    78ce:	68 94       	set
    78d0:	3f 91       	pop	r19
    78d2:	2a e0       	ldi	r18, 0x0A	; 10
    78d4:	26 9f       	mul	r18, r22
    78d6:	11 24       	eor	r1, r1
    78d8:	30 19       	sub	r19, r0
    78da:	30 5d       	subi	r19, 0xD0	; 208
    78dc:	31 93       	st	Z+, r19
    78de:	de f6       	brtc	.-74     	; 0x7896 <__ultoa_invert+0xe>
    78e0:	cf 01       	movw	r24, r30
    78e2:	08 95       	ret
    78e4:	46 2f       	mov	r20, r22
    78e6:	47 70       	andi	r20, 0x07	; 7
    78e8:	40 5d       	subi	r20, 0xD0	; 208
    78ea:	41 93       	st	Z+, r20
    78ec:	b3 e0       	ldi	r27, 0x03	; 3
    78ee:	0f d0       	rcall	.+30     	; 0x790e <__ultoa_invert+0x86>
    78f0:	c9 f7       	brne	.-14     	; 0x78e4 <__ultoa_invert+0x5c>
    78f2:	f6 cf       	rjmp	.-20     	; 0x78e0 <__ultoa_invert+0x58>
    78f4:	46 2f       	mov	r20, r22
    78f6:	4f 70       	andi	r20, 0x0F	; 15
    78f8:	40 5d       	subi	r20, 0xD0	; 208
    78fa:	4a 33       	cpi	r20, 0x3A	; 58
    78fc:	18 f0       	brcs	.+6      	; 0x7904 <__ultoa_invert+0x7c>
    78fe:	49 5d       	subi	r20, 0xD9	; 217
    7900:	31 fd       	sbrc	r19, 1
    7902:	40 52       	subi	r20, 0x20	; 32
    7904:	41 93       	st	Z+, r20
    7906:	02 d0       	rcall	.+4      	; 0x790c <__ultoa_invert+0x84>
    7908:	a9 f7       	brne	.-22     	; 0x78f4 <__ultoa_invert+0x6c>
    790a:	ea cf       	rjmp	.-44     	; 0x78e0 <__ultoa_invert+0x58>
    790c:	b4 e0       	ldi	r27, 0x04	; 4
    790e:	a6 95       	lsr	r26
    7910:	97 95       	ror	r25
    7912:	87 95       	ror	r24
    7914:	77 95       	ror	r23
    7916:	67 95       	ror	r22
    7918:	ba 95       	dec	r27
    791a:	c9 f7       	brne	.-14     	; 0x790e <__ultoa_invert+0x86>
    791c:	00 97       	sbiw	r24, 0x00	; 0
    791e:	61 05       	cpc	r22, r1
    7920:	71 05       	cpc	r23, r1
    7922:	08 95       	ret
    7924:	9b 01       	movw	r18, r22
    7926:	ac 01       	movw	r20, r24
    7928:	0a 2e       	mov	r0, r26
    792a:	06 94       	lsr	r0
    792c:	57 95       	ror	r21
    792e:	47 95       	ror	r20
    7930:	37 95       	ror	r19
    7932:	27 95       	ror	r18
    7934:	ba 95       	dec	r27
    7936:	c9 f7       	brne	.-14     	; 0x792a <__ultoa_invert+0xa2>
    7938:	62 0f       	add	r22, r18
    793a:	73 1f       	adc	r23, r19
    793c:	84 1f       	adc	r24, r20
    793e:	95 1f       	adc	r25, r21
    7940:	a0 1d       	adc	r26, r0
    7942:	08 95       	ret

00007944 <__prologue_saves__>:
    7944:	2f 92       	push	r2
    7946:	3f 92       	push	r3
    7948:	4f 92       	push	r4
    794a:	5f 92       	push	r5
    794c:	6f 92       	push	r6
    794e:	7f 92       	push	r7
    7950:	8f 92       	push	r8
    7952:	9f 92       	push	r9
    7954:	af 92       	push	r10
    7956:	bf 92       	push	r11
    7958:	cf 92       	push	r12
    795a:	df 92       	push	r13
    795c:	ef 92       	push	r14
    795e:	ff 92       	push	r15
    7960:	0f 93       	push	r16
    7962:	1f 93       	push	r17
    7964:	cf 93       	push	r28
    7966:	df 93       	push	r29
    7968:	cd b7       	in	r28, 0x3d	; 61
    796a:	de b7       	in	r29, 0x3e	; 62
    796c:	ca 1b       	sub	r28, r26
    796e:	db 0b       	sbc	r29, r27
    7970:	cd bf       	out	0x3d, r28	; 61
    7972:	de bf       	out	0x3e, r29	; 62
    7974:	09 94       	ijmp

00007976 <__epilogue_restores__>:
    7976:	2a 88       	ldd	r2, Y+18	; 0x12
    7978:	39 88       	ldd	r3, Y+17	; 0x11
    797a:	48 88       	ldd	r4, Y+16	; 0x10
    797c:	5f 84       	ldd	r5, Y+15	; 0x0f
    797e:	6e 84       	ldd	r6, Y+14	; 0x0e
    7980:	7d 84       	ldd	r7, Y+13	; 0x0d
    7982:	8c 84       	ldd	r8, Y+12	; 0x0c
    7984:	9b 84       	ldd	r9, Y+11	; 0x0b
    7986:	aa 84       	ldd	r10, Y+10	; 0x0a
    7988:	b9 84       	ldd	r11, Y+9	; 0x09
    798a:	c8 84       	ldd	r12, Y+8	; 0x08
    798c:	df 80       	ldd	r13, Y+7	; 0x07
    798e:	ee 80       	ldd	r14, Y+6	; 0x06
    7990:	fd 80       	ldd	r15, Y+5	; 0x05
    7992:	0c 81       	ldd	r16, Y+4	; 0x04
    7994:	1b 81       	ldd	r17, Y+3	; 0x03
    7996:	aa 81       	ldd	r26, Y+2	; 0x02
    7998:	b9 81       	ldd	r27, Y+1	; 0x01
    799a:	ce 0f       	add	r28, r30
    799c:	d1 1d       	adc	r29, r1
    799e:	cd bf       	out	0x3d, r28	; 61
    79a0:	de bf       	out	0x3e, r29	; 62
    79a2:	ed 01       	movw	r28, r26
    79a4:	08 95       	ret

000079a6 <_exit>:
    79a6:	f8 94       	cli

000079a8 <__stop_program>:
    79a8:	ff cf       	rjmp	.-2      	; 0x79a8 <__stop_program>
